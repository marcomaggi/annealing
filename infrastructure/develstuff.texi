\input texinfo.tex
@c %**start of header
@setfilename develstuff.info
@settitle DevelStuff Infrastructure
@c %**end of header


@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@macro version{}
5.0a1
@end macro

@c ------------------------------------------------------------
@c License macros.
@c ------------------------------------------------------------

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@macro bsd{}
@acronym{BSD}
@end macro

@c ------------------------------------------------------------
@c Software related macros.
@c ------------------------------------------------------------

@macro bash{}
@command{bash}
@end macro

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@macro glibc{}
@gnu{} C Library
@end macro

@c ------------------------------------------------------------
@c Network protocols acronyms.
@c ------------------------------------------------------------

@macro dns{}
@acronym{DNS}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro dhcp{}
@acronym{DHCP}
@end macro

@macro icmp{}
@acronym{ICMP}
@end macro

@macro http{}
@acronym{HTTP}
@end macro

@macro https{}
@acronym{HTTP}
@end macro

@macro imap{}
@acronym{IMAP}
@end macro

@macro tcp{}
@acronym{TCP}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro ppp{}
@acronym{PPP}
@end macro

@macro sftp{}
@acronym{FTP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@macro snmp{}
@acronym{SNMP}
@end macro

@macro ssh{}
@acronym{SSH}
@end macro

@macro ssl{}
@acronym{SSL}
@end macro

@macro tls{}
@acronym{TLS}
@end macro

@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro adsl{}
@acronym{ADSL}
@end macro

@macro alsa{}
@acronym{ALSA}
@end macro

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cdrom{}
@acronym{CDROM}
@end macro

@macro cli{}
@acronym{CLI}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro gui{}
@acronym{GUI}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro isp{}
@acronym{ISP}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro mpeg{}
@acronym{MPEG}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@macro ram{}
@acronym{RAM}
@end macro

@macro rfc{}
@acronym{RFC}
@end macro

@c Remember that @url is already used by Texinfo.
@macro urla{}
@acronym{URL}
@end macro

@macro usb{}
@acronym{USB}
@end macro

@macro utf{}
@acronym{UTF}
@end macro

@macro uri{}
@acronym{URI}
@end macro

@macro xmla{}
@acronym{XML}
@end macro


@c ------------------------------------------------------------
@c Arguments macros.
@c ------------------------------------------------------------

@macro vari{ARG}
@var{\ARG\1}
@end macro

@macro varii{ARG}
@var{\ARG\2}
@end macro

@macro variii{ARG}
@var{\ARG\3}
@end macro

@macro variv{ARG}
@var{\ARG\4}
@end macro

@macro varn{ARG}
@var{\ARG\n}
@end macro

@macro vark{ARG}
@var{\ARG\k}
@end macro

@macro varj{ARG}
@var{\ARG\j}
@end macro

@c ------------------------------------------------------------

@macro meta{ARG}
<\ARG\>
@end macro

@macro metai{ARG}
@meta{\ARG\1}
@end macro

@macro metaii{ARG}
@meta{\ARG\2}
@end macro

@macro metaiii{ARG}
@meta{\ARG\3}
@end macro

@macro metaiv{ARG}
@meta{\ARG\4}
@end macro

@macro metan{ARG}
@meta{\ARG\n}
@end macro

@macro metak{ARG}
@meta{\ARG\k}
@end macro

@macro metaj{ARG}
@meta{\ARG\j}
@end macro

@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro cnull{}
@code{NULL}
@end macro

@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{NAME}
@code{(\NAME\)}
@end macro

@macro smodule{NAME}
@code{\NAME\}
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@ignore
Separating the @srfi{} macro from the number with a '--' rather than a
'-' makes the expansion look ugly in menu entries under the Info reader.
IMHO this should not happen, but it does; so we live with this, because
the main purpose of this document is to provide an Info version.
@end ignore
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@c ------------------------------------------------------------

@macro func{NAME}
@code{\NAME\}
@end macro

@macro nil{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro


@c ------------------------------------------------------------
@c Other macros.
@c ------------------------------------------------------------

@macro configure{}
@command{configure}
@end macro

@macro make{}
@command{make}
@end macro

@macro acmacro{NAME}
@code{\NAME\}
@end macro

@c ------------------------------------------------------------
@c External document references.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\, \TITLE\, \TITLE\, libc}
@end macro

@macro gccref{NODE, TITLE}
@ref{\NODE\, \TITLE\, \TITLE\, gcc}
@end macro

@macro makeref{NODE, TITLE}
@ref{\NODE\, \TITLE\, \TITLE\, make}
@end macro

@macro autoconfref{NODE, TITLE}
@ref{\NODE\, \TITLE\, \TITLE\, autoconf}
@end macro

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      DevelStuff Infrastructure

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    DevelStuff Infrastructure

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           develstuff

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marcomaggi@@gna.org}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2005--2009

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @version{} of @value{PACKAGE}: a set of
files for @gnu{} Autoconf, @gnu{} Make and @gnu{} Bash that automates
software development, distribution and installation tasks (notice that
neither @gnu{} Automake, nor Libtool are in the list).

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}).

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} General Public License'' and ``@gnu{}
Free Documentation License'', no Front--Cover Texts, and no Back--Cover
Texts.  A copy of the license is included in the section entitled
``@gnu{} Free Documentation License''.
@end quotation
@end copying


@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* infrastructure: (infrastructure).     @value{TITLE}.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore


@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the infrastructure.
* config::                      General configuration.
* make::                        The makefile library.

Special support

* compilers::                   Generic support for compiling.
* clang::                       C language support.
* cxxlang::                     C++ language support.

Appendices

* makevars::                    Understanding @file{Makefile} variables.
* library version::             How to interpret library versions.
* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* Concept Index::               An entry for each concept.
* Function Index::              An entry for each function.
* Variable Index::              An entry for each variable.
@c * Type Index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the infrastructure


DevelStuff Infrastructure is a set of files for @gnu{} Autoconf, @gnu{}
Make and @gnu{} Bash that automates software development, distribution
and installation tasks (notice that neither @gnu{} Automake, nor Libtool
are in the list).  The main purpose is to make full use of the @gnu{}
Make facilities to reduce the complexity of project meta files.

@menu
* overview intro::              Introduction and examples.
* overview conventions::        Conventions.
* overview layout::             Project layout.
@end menu

@c page
@node overview intro
@section Introduction and examples


A typical @file{configure.ac} file looks like the following:

@example
# @@configure_input@@
#

AC_INIT(my_project,1.2.3)
DS_BEGIN([./some/file.ext])

dnl Project specific tasks go here.

DS_END
AC_OUTPUT

### end of file
@end example

@noindent
and a typical @file{Makefile.in} looks like the following:

@example
# @@configure_input@@
#

srcdir          = @@srcdir@@
builddir        = @@builddir@@

include meta.d/makefiles/develstuff.make
include meta.d/makefiles/project.make

### end of file
@end example

@noindent
the definition of the @code{builddir} and @code{srcdir} variables is
mandatory.

Notice that the external makefiles are included from a pathname under
the @code{$(builddir)} directory.  To have them in the specified
directory we can use the following chunk of @file{configure.ac} file:

@example
AC_CONFIG_FILES([meta.d/makefiles/develstuff.make:\
                 $@{srcdir@}/infrastructure/develstuff.make])
AC_CONFIG_FILES([meta.d/makefiles/project.make:\
                 $@{srcdir@}/configuration/project.make])
@end example

@noindent
which is exactly what the predefined @acmacro{DS_COMMON_CONFIG_FILES}
macro does, and @acmacro{DS_END} invokes
@acmacro{DS_COMMON_CONFIG_FILES}.

@c page
@node overview conventions
@section Conventions


@menu
* overview conventions files::  File names.
* overview conventions config:: Autoconf library names.
* overview conventions make::   Makefile library names.
@end menu


@c page
@node overview conventions files
@subsection File names


@table @emph
@item file name
@itemx directory name
it is the last component of the file or directory identifier; the name
of the file in @file{/bin/bash} is @code{bash}, while the name of the
directory in @file{/usr/local} is @code{local};

@item file pathname
@itemx directory pathname
it is a file or directory identifier that includes a name and a
directory part; @file{/bin/bash} is a file pathname and
@file{/usr/local} is a directory pathname;

@item file basename
@itemx directory basename
it is a file or directory name with the extension stripped (including
the dot); the basename of the file in @file{/etc/lilo.conf} is
@code{lilo}, while the basename of the directory in @file{/etc/rc.d} is
@code{rc};

@item file rootname
@itemx directory rootname
it is a file or directory pathname with the extension stripped
(including the dot); the rootname of the file in @file{/etc/lilo.conf}
is @code{/etc/lilo}, while the rootname of the directory in
@file{/etc/rc.d} is @code{/etc/rc};

@item path
it is a list of directory pathnames to look into when searching for a
file or directory name.
@end table


@c page
@node overview conventions config
@subsection Autoconf library names


The following are naming conventions for the Autocon library of macros.

@enumerate
@item
Function names are uppercase with @code{_} as word--splitting char and
@code{DS} as namespace prefix; example: @func{DS_COMMON_CONFIG_FILES}.

@item
Private variable names are mixed case with @code{_} as word--splitting
char and @code{ds} as namespace prefix; example: @code{ds_private_PATH}.
@end enumerate


@c page
@node overview conventions make
@subsection Makefile library names


The following are naming conventions for the makefile library.

@enumerate
@item
Function names are lowercase with @code{-} as word--splitting char and
@code{ds} as namespace prefix; example: @func{ds-install-files}.

@item
Private variable names are mixed case with @code{_} as word--splitting
char and @code{ds} as namespace prefix; example:
@code{ds_doc_texinfo_BUILDDIR}.

@item
User configurable interface variables are mixed case with @code{_} as
word--splitting char; example: @code{my_SRCDIR}, in which the prefix
@code{my} is selected by the user.

@item
All the variables that are defined with the @code{?=} operator are meant
to be configurable by the user, either by setting them on the command
line of @make{} or by declaring them before calling the @code{ds-}
function.

@item
All the variable with prefix @code{ds_config_} are meant to be used to
configure library's behaviour.
@end enumerate


@c page
@node overview layout
@section Project layout


@menu
* overview layout intro::       Layout introduction.
* overview layout dirs::        Directories and files.
* overview layout config::      Configuration files.
* overview layout make::        Makefiles.
@end menu


@c page
@node overview layout intro
@subsection Layout introduction


A project using the DevelStuff Infrastructure is meant to have a
specific layout of meta files.  Meta files are:

@itemize
@item
configuration files for @gnu{} Autoconf;

@item
makefiles and libraries of functions for @gnu{} Make;

@item
description files for packaging systems like the Slackware tools;

@item
installation inspection scripts, like the @command{gsl-config} installed
by the @gnu{} Scientific Library;

@item
the meta file for @command{pkg-config} support;

@item
Autoconf macros prepared for other projects that need to detect this
project installation;

@item
everything else that is needed to install and use the package.
@end itemize

The suggested layout makes heavy usage of subdirectories, for example to
separate infrastructure files from project specific files.


@c page
@node overview layout dirs
@subsection Directories and files


Two kinds of distributions are supported:

@enumerate
@item
standalone project with a single source tree;

@item
collection of projects, each with its own source subtree;
@end enumerate

@noindent
for a standalone project, the directories layout should be:

@example
<top_srcdir>/infrastructure
<top_srcdir>/configuration
<top_srcdir>/meta
<top_srcdir>/doc
<top_srcdir>/src
<top_srcdir>/tests
...
@end example

@noindent
for a collection of projects it should be:

@example
<top_srcdir>/infrastructure

<top_srcdir>/<project-A>/configuration
<top_srcdir>/<project-A>/meta
<top_srcdir>/<project-A>/doc
<top_srcdir>/<project-A>/src
<top_srcdir>/<project-A>/tests
<top_srcdir>/<project-A>/...

<top_srcdir>/<project-B>/configuration
<top_srcdir>/<project-B>/meta
<top_srcdir>/<project-B>/doc
<top_srcdir>/<project-B>/src
<top_srcdir>/<project-B>/tests
<top_srcdir>/<project-B>/...

...
@end example

What follows is a description of the directories.

@table @file
@item infrastructure
Holds the DevelStuff infrastructure files, which are shared among all
the projects.  Updating the infrastructure to a new revision should mean
replacing the files in this directory.  Typically the directory holds
the following:

@example
config.guess
config.sub
install-sh
develstuff.autoconf
develstuff.make
develstuff.texi
fdl-1.3.texiinc
gpl-3.0.texiinc
@end example

@noindent
other files can be there to be shared among projects.

@item configuration
Holds configuration files for a single project.  This is usually only a
makefile with project--specific rules, but can include, for example,
libraries of Autoconf macros to detect project dependencies.

@item meta
Holds description files for packaging tools, inspection scripts,
whatever is needed to describe and inspect the package.

@item src
Holds the source files of the project, whatever language they use;
application configuration files also go in here.  There can be any
number of subdirectories.

@item doc
Holds the documentation, which usually is a single file in Texinfo
format.  There can be any number of modules, but beware that even huge
Texinfo files can be easily managed under @gnu{} Emacs.

License files should be split from the main source, and put under
@file{infrastructure} so that they can be easily shared and updated (to
fix typos, etc.).

@item tests
Holds the test suite for the project.

@item examles
Holds usage example for the project targets.
@end table

@c page
@node overview layout config
@subsection Configuration files


@cindex @file{configure}
@cindex @file{configure.ac}
@cindex @file{aclocal.m4}
@cindex @file{develstuff.autoconf}
@cindex @file{develstuff.make}


Project's configuration is driven with @gnu{} Autoconf.  What follows is
a description of the involved files.

@table @file
@item configure
@itemx configure.ac
@configure{} is the configuration script produced by Autoconf from the
template @file{configure.ac}.

@item aclocal.m4
A file loaded by Autoconf when processing @file{configure.ac}.  It is
meant to define additional macros and/or load other files holding macro
definitions.  It must @strong{not} run configuration tasks directly.

For a standalone project it should be at least:

@example
m4_include(infrastructure/develstuff.autoconf)
@end example

@noindent
while for a collection of projects:

@example
m4_include(../infrastructure/develstuff.autoconf)
@end example

@item infrastructure/develstuff.autoconf
The DevelStuff library of Autoconf macros.  The inclusion of this file
is mandatory.

@item configuration/project.autoconf
Optional project specific library of macros.  If present it must be
loaded by @file{aclocal.m4}:

@example
m4_include(configuration/project.autoconf)
@end example
@end table

@c page
@node overview layout make
@subsection Makefiles


@cindex @file{Makefile.in}
@cindex @file{develstuff.make}
@cindex @file{project.make}


Building and installation is driven with @gnu{} Make.  What follows is a
description of the involved files.


@table @file
@item Makefile.in
The main makefile.  Its purpose is to load modules and set
non--configurable options.  It must be processed by Autoconf.

@item infrastructure/develstuff.make
Holds the DevelStuff library of makefile functions.  Its inclusion in
the @file{Makefile.in} is mandatory.  It must be processed by Autoconf.

@item configuration/project.make
Holds the project--specific rules.  It must be processed by Autoconf.

The use of a project--specific makefile is optional (all the rules can
be written in @file{Makefile.in}), but similar projects have similar
@file{Makefile.in} files if we leave out project specific rules.
@end table

Additional makefiles holding non--project--specific rules can be
installed under @file{configuration}; example: if we write a set of
@gnu{} Make functions to automate compiling code for the Neko Virtual
Machine, we can create a file:

@example
$@{srcdir@}/configuration/neko.make
@end example

@noindent
process it with Autoconf:

@example
AC_CONFIG_FILES([meta.d/makefiles/neko.make:\
                 $@{srcdir@}/configuration/neko.make])
@end example

@noindent
and load it into @file{Makefile.in}:

@example
...
include meta.d/makefiles/develstuff.make
include meta.d/makefiles/neko.make
...
@end example

@c page
@node config
@chapter General configuration


Projects configuration is mainly performed with command line options for
the @configure{} script.  It is mandatory to configure the DevelStuff
infrastructure using the appropriate Autoconf macros in the
@file{configure.ac} template.

@menu
* config intro::                Introduction.
* config preamble::             Preamble configuration.
* config conclusion::           Conclusion.
* config sections::             Selection of feature sets.
* config options::              Configuration options.
* config modules::              Configuration modules.
* config packaging::            Packaging support.
* config helpers::              Helper macros.
@end menu

@c page
@node config intro
@section Introduction


Let's say that a project is named @code{develstuff} and its version
number is @code{1.2.3}; its detailed @file{configure.ac} template file
looks like this:

@example
# @@configure_input@@
#

AC_INIT([develstuff],[1.2.3],[marcomaggi@@gna.org])
AC_PREREQ(2.63)
AC_CONFIG_SRCDIR([./some/source/file.ext])

DS_PREAMBLE
DS_DECLARE_SECTIONS
DS_OPTIONS
DS_DIRECTORIES
DS_PROGRAMS
DS_PACKAGING

dnl project specific tasks go here

DS_SUBST_SECTION_VARIABLES
DS_COMMON_CONFIG_FILES
AC_OUTPUT

### end of file
@end example

@noindent
and using helper macros it becomes:

@example
# @@configure_input@@
#

AC_INIT([develstuff],[1.2.3],[marcomaggi@@gna.org])
DS_BEGIN([./some/source/file.ext])

dnl project specific tasks go here

DS_END

### end of file
@end example

@c page
@node config preamble
@section Preamble configuration


It is mandatory to expand @code{DS_PREAMBLE} at the beginning of the
@file{configure.ac} template.


@deffn {Autoconf Macro} DS_PREAMBLE
Run a set of configuration tasks that must precede all the others.  In
particular the following tasks are executed:

@example
DS_FIND_INFRASTRUCTURE
DS_FIND_CONFIGURATION
@end example
@end deffn


@subsubheading Auxiliary tasks

@deffn {Autoconf Macro} DS_FIND_INFRASTRUCTURE
Find the @file{infrastructure} directory.  This is the directory in
which the DevelStuff infrastructure files are meant to be stored.

Define the output variable @code{INFRASTRUCTUREDIR}, whose value is
available in the makefile library as @code{infrastructuredir}.  Include
the following:

@example
AC_CONFIG_AUX_DIR([$@{INFRASTRUCTUREDIR@}])
@end example
@end deffn


@deffn {Autoconf Macro} DS_FIND_CONFIGURATION
Find the @file{configuration} directory.  This is the directory in which
the project--specific files are meant to be stored.

Define the output variable @code{CONFIGURATIONDIR}, whose value is
available in the makefile library as @code{configurationdir}.
@end deffn

@c page
@node config conclusion
@section Conclusion


@deffn {Autoconf Macro} DS_COMMON_CONFIG_FILES
A mandatory macro to be invoked at the end of the @file{configure.ac}
template.  Expands to:

@example
AC_CONFIG_FILES([meta.d/makefiles/develstuff.make:\
   $INFRASTRUCTUREDIR/develstuff.make])
AC_CONFIG_FILES([meta.d/makefiles/project.make:\
   $CONFIGURATIONDIR/project.make])
AC_CONFIG_FILES([Makefile])
@end example

@noindent
that is: define as output files the main @file{Makefile}, the DevelStuff
library and the project specific makefile.
@end deffn


@subsubheading Package installation files


@deffn {Autoconf Macro} DS_CONFIG_FILE_INSPECTION_SCRIPT
Register the package installation inspection script as output file.  The
script is meant to be called @code{$@{PACKAGE_NAME@}-config}, its source
directory is @code{$(srcdir)/meta} and its build directory
@code{$(builddir)/meta.d}.

Equivalent to:

@example
AC_CONFIG_FILES([meta.d/$@{PACKAGE_NAME@}-config:\
   meta/$@{PACKAGE_NAME@}-config.in])
@end example
@end deffn


@deffn {Autoconf Macro} DS_CONFIG_FILE_PKGCONFIG
Register the @command{pkg-config} meta file as output file.  The script
is meant to be called @code{$@{PACKAGE_NAME@}.pc}, its source directory
is @code{$(srcdir)/meta} and its build directory
@code{$(builddir)/meta.d}.

Equivalent to:

@example
AC_CONFIG_FILES([meta.d/$@{PACKAGE_NAME@}.pc:\
   meta/$@{PACKAGE_NAME@}.pc.in])
@end example
@end deffn


@subsubheading Slackware packaging files


@deffn {Autoconf Macro} DS_CONFIG_FILE_SLACKWARE_BIN_DESC
@deffnx {Autoconf Macro} DS_CONFIG_FILE_SLACKWARE_DOC_DESC
@deffnx {Autoconf Macro} DS_CONFIG_FILE_SLACKWARE_DEV_DESC
Register as output file the description file for the @code{bin},
@code{doc} or @code{dev} Slackware package.  @ref{make dist slackware,
Slackware packaging}

The source files are called @file{slack-desc.in} and their source
directories are:

@example
$(srcdir)/meta/slackware/bin
$(srcdir)/meta/slackware/doc
$(srcdir)/meta/slackware/dev
@end example

@noindent
the output files are called @file{slack-desc} and their output
directories are:

@example
$(builddir)/meta.d/slackware/bin
$(builddir)/meta.d/slackware/doc
$(builddir)/meta.d/slackware/dev
@end example

The macros expand to:

@example
AC_CONFIG_FILES([meta.d/slackware/bin/slack-desc:\
  meta/slackware/bin/slack-desc.in])
AC_CONFIG_FILES([meta.d/slackware/doc/slack-desc:\
  meta/slackware/doc/slack-desc.in])
AC_CONFIG_FILES([meta.d/slackware/dev/slack-desc:\
  meta/slackware/dev/slack-desc.in])
@end example
@end deffn


@deffn {Autoconf Macro} DS_CONFIG_FILE_SLACKWARE_BIN_DOINST
@deffnx {Autoconf Macro} DS_CONFIG_FILE_SLACKWARE_DOC_DOINST
@deffnx {Autoconf Macro} DS_CONFIG_FILE_SLACKWARE_DEV_DOINST
Register as output file the description file for the @code{bin},
@code{doc} or @code{dev} Slackware package.  @ref{make dist slackware,
Slackware packaging}

The input files are called @file{doinst.sh.in} and their source
directories are:

@example
$(srcdir)/meta/slackware/bin
$(srcdir)/meta/slackware/doc
$(srcdir)/meta/slackware/dev
@end example

@noindent
the output files are called @file{doinst.sh} and their output
directories are:

@example
$(builddir)/meta.d/slackware/bin
$(builddir)/meta.d/slackware/doc
$(builddir)/meta.d/slackware/dev
@end example

The macros expand to:

@example
AC_CONFIG_FILES([meta.d/slackware/bin/doinst.sh:\
  meta/slackware/bin/doinst.sh.in])
AC_CONFIG_FILES([meta.d/slackware/doc/doinst.sh:\
  meta/slackware/doc/doinst.sh.in])
AC_CONFIG_FILES([meta.d/slackware/dev/doinst.sh:\
  meta/slackware/dev/doinst.sh.in])
@end example
@end deffn

@c page
@node config sections
@section Selection of feature sets


@cindex @code{BIN_RULES} section
@cindex @code{DOC_RULES} section
@cindex @code{DEV_RULES} section
@cindex @code{AUTOCONF_DIRS} section
@cindex @code{DEVELSTUFF_DIRS} section
@cindex @code{C_LANGUAGE} section
@cindex @code{CXX_LANGUAGE} section


In the makefile library: some facilities are available through makefile
functions that must be explicitly invoked, while other facilities are
included if selected by the @configure{} script.

Defined sections are identified by the following symbols:

@table @code
@item BIN_RULES
Decide whether to include the @code{bin} ruleset in the makefile.
Included by default.

@item DOC_RULES
Decide whether to include the @code{doc} ruleset in the makefile.
Included by default.

@item DEV_RULES
Decide whether to include the @code{dev} ruleset in the makefile.
Excluded by default.

@item AUTOCONF_DIRS
Decide whether to include the Autoconf directory variables in the
makefile.  Included by default.

@item DEVELSTUFF_DIRS
Decide whether to include the DevelStuff directory variables in the
makefile.  Included by default.

@item C_LANGUAGE
Support for C language.  Excluded by default.

@item CXX_LANGUAGE
Support for C++ language.  Excluded by default.

@item GENERIC_DOCUMENTATION
Support for generic documentation installation, @file{README} files and
the like.  Included by default.

@item TEXINFO_DOCUMENTATION
Support for documentation in Texinfo format.  Included by default.

@item UNINSTALL_SCRIPTS
Support for automatic generation of uninstallation scripts for this
package.  Included by default.

@item META_SCRIPTS
Support for meta installation scripts to be executed before and after
the installation of this project.  Included by default.

@item PKGCONFIG
Support for @command{pkg-config} meta files used by other packages to
detect this one.  Included by default.

@item AUTOCONF
Support for @gnu{} Autoconf macro files used by other packages to detect
this one.  Included by default.

@item CONFIG_INSPECTION_SCRIPT
Support for installation inspection scripts used by other packages to
detect this one.  Included by default.

@item SOURCE_DISTRIBUTION
Support for automatic generation of source distribution archives for
this project.  Included by default.

@item BINARY_DISTRIBUTION
Support for automatic generation of binary distribution archives for
this project.  Included by default.

@item SLACKWARE_DISTRIBUTION
Support for automatic generation of binary Slackware packages for this
project.  Included by default.
@end table


@deffn {Autoconf Macro} DS_DECLARE_SECTIONS
Initialise one variable for each makefile section defined by DevelStuff.
@end deffn


@deffn {Autoconf Macro} DS_SUBST_SECTION_VARIABLES
Register the section variables as Autoconf output variables, so that
their values are available in the makefiles.
@end deffn


@deffn {Autoconf Macro} DS_INCLUDE_SECTION (@var{section_spec})
@deffnx {Autoconf Macro} DS_EXCLUDE_SECTION (@var{section_spec})
Include or exclude the makefile section selected by @var{section_spec},
which must be one of the symbols defined above.  The variable:

@example
DS_INCLUDE_<@var{section_spec}>
@end example

@noindent
will be defined to @code{yes} if the section is included, to @code{no}
if excluded.
@end deffn


@c ------------------------------------------------------------

@subsubheading Makefile variables


@defvr {Makefile Variable} ds_include_BIN_RULES
@defvrx {Makefile Variable} ds_include_DOC_RULES
@defvrx {Makefile Variable} ds_include_DEV_RULES
If set to @code{yes}: Include the associated makefile section.
@end defvr


@defvr {Makefile Variable} ds_include_AUTOCONF_DIRS
If set to @code{yes}: Include the directory variables defined by @gnu{}
Autoconf.
@end defvr


@defvr {Makefile Variable} ds_include_DEVELSTUFF_DIRS
If set to @code{yes}: Include the directory variables defined by
DevelStuff.
@end defvr


@defvr {Makefile Variable} ds_include_C_LANGUAGE
If set to @code{yes}: Include support for C language.
@end defvr


@defvr {Makefile Variable} ds_include_CXX_LANGUAGE
If set to @code{yes}: Include support for C++ language.
@end defvr


@defvr {Makefile Variable} ds_include_GENERIC_DOCUMENTATION
If set to @code{yes}: Include support for generic documentation
installation, @file{README} files and the like.
@end defvr


@defvr {Makefile Variable} ds_include_TEXINFO_DOCUMENTATION
If set to @code{yes}: Include support for documentation in Texinfo
format.
@end defvr


@defvr {Makefile Variable} ds_include_UNINSTALL_SCRIPTS
If set to @code{yes}: Include support for automatic generation of
uninstallation scripts for this package.
@end defvr


@defvr {Makefile Variable} ds_include_META_SCRIPTS
If set to @code{yes}: Include support for meta installation scripts to
be executed before and after the installation of this project.
@end defvr


@defvr {Makefile Variable} ds_include_PKGCONFIG
If set to @code{yes}: Include support for @command{pkg-config} meta
files used by other packages to detect this one.
@end defvr


@defvr {Makefile Variable} ds_include_AUTOCONF
If set to @code{yes}: Include support for @gnu{} Autoconf macro files
used by other packages to detect this one.
@end defvr


@defvr {Makefile Variable} ds_include_CONFIG_INSPECTION_SCRIPT
If set to @code{yes}: Include support for installation inspection
scripts used by other packages to detect this one.
@end defvr


@defvr {Makefile Variable} ds_include_SOURCE_DISTRIBUTION
If set to @code{yes}: Include support for automatic generation of source
distribution archives for this project.
@end defvr


@defvr {Makefile Variable} ds_include_BINARY_DISTRIBUTION
If set to @code{yes}: Include support for automatic generation of binary
distribution archives for this project.
@end defvr


@defvr {Makefile Variable} ds_include_SLACKWARE_DISTRIBUTION
If set to @code{yes}: Include support for automatic generation of binary
Slackware packages for this project.
@end defvr


@defvr {Makefile Variable} ds_RULESETS
The list of included makefile rulesets.  This variable is used to add a
ruleset (@code{bin}, @code{doc}, @code{dev}) to the main rules
(@code{all}, @code{clean}, @dots{}).

Usage examples:

@example
all:            $(ds_RULESETS)
mostlyclean:    $(addsuffix -mostlyclean,$(ds_RULESETS))
clean:          $(addsuffix -clean,$(ds_RULESETS))

install:        $(addsuffix -install,$(ds_RULESETS))
uninstall:      $(addsuffix -uninstall,$(ds_RULESETS))
@end example
@end defvr

@c page
@node config options
@section Configuration options


@deffn {Autoconf Macro} DS_OPTIONS
Define a set of configuration options.  When using the DevelStuff
infrastructure invoking this macro in @file{configure.ac} is mandatory.
@end deffn


@menu
* config options packaging::    Packaging options.
* config options doc::          Documentation options.
* config options misc::         Miscellaneous options.
@end menu

@c page
@node config options packaging
@subsection Packaging options


@vindex ds_config_USE_SUDO
@deffn {Configuration Option} @option{--enable-use-sudo}
@deffnx {Configuration Option} @option{--disable-use-sudo}
@deffnx {Makefile Variable} ds_config_USE_SUDO
When the @configure{} option is enabled, the makefile variable is set to
@code{yes}.  Tell the makefile library to use @command{sudo} when
issuing commands that may need superuser privileges.  Defaults to
disabled.

This feature is used, for example, when building and installing
Slackware packages.

This is for experts only; it is safer, for the casual user of this
infrastructure, to leave this option alone and acquire superuser
privileges by other means.
@end deffn


@vindex ds_config_ABI
@deffn {Configuration Option} @option{--with-abi}
@deffnx {Makefile Variable} ds_config_ABI
Select a set of rules to implement @code{abi} and @code{abu} phony
rules.  @ref{make rules abi,Build install upgrade}

Supported values for this option are: @code{direct}, @code{bindist},
@code{slackware}, @code{local-slackware}.  Defaults to @code{direct}.
@end deffn


@vindex ds_config_COMPRESSOR
@deffn {Configuration Option} @option{--with-compressor}
@deffnx {Makefile Variable} ds_config_COMPRESSOR
Select a program to use to compress archives (@ref{make global programs,
Program variables}, for details).

Supported values for this option are:

@table @code
@item bzip
Which selects the @command{bzip2} program.

@item gzip
Which selects the @command{gzip} program.
@end table
@end deffn

@c page
@node config options doc
@subsection Documentation options


The DevelStuff infrastructure has special support for documentation in
@gnu{} Texinfo format.  Notice that, by default, only documentation in
Info format is built and installed.

With all the following options: When the @configure{} option is enabled,
the makefile variable is set to @code{yes}.


@vindex ds_config_ENABLE_DOC
@deffn {Configuration Option} @option{--enable-doc}
@deffnx {Configuration Option} @option{--disable-doc}
@deffnx {Makefile Variable} ds_config_ENABLE_DOC
Enable building and installing the documentation files, in whatever
format.  Default to enabled.
@end deffn


@vindex ds_config_ENABLE_DOC_INFO
@deffn {Configuration Option} @option{--enable-doc-info}
@deffnx {Configuration Option} @option{--disable-doc-info}
@deffnx {Makefile Variable} ds_config_ENABLE_DOC_INFO
Enable building and installing the documentation files in Info format.
Default to enabled.
@end deffn


@vindex ds_config_ENABLE_DOC_HTML
@deffn {Configuration Option} @option{--enable-doc-html}
@deffnx {Configuration Option} @option{--disable-doc-html}
@deffnx {Makefile Variable} ds_config_ENABLE_DOC_HTML
Enable building and installing the documentation files in @acronym{HTML}
format.  Default to disabled.
@end deffn


@vindex ds_config_ENABLE_DOC_DVI
@deffn {Configuration Option} @option{--enable-doc-dvi}
@deffnx {Configuration Option} @option{--disable-doc-dvi}
@deffnx {Makefile Variable} ds_config_ENABLE_DOC_DVI
Enable building and installing the documentation files in @acronym{DVI}
format.  Default to disabled.
@end deffn


@vindex ds_config_ENABLE_DOC_PDF
@deffn {Configuration Option} @option{--enable-doc-pdf}
@deffnx {Configuration Option} @option{--disable-doc-pdf}
@deffnx {Makefile Variable} ds_config_ENABLE_DOC_PDF
Enable building and installing the documentation files in @acronym{PDF}
format.  Default to disabled.
@end deffn


@vindex ds_config_ENABLE_DOC_PS
@deffn {Configuration Option} @option{--enable-doc-ps}
@deffnx {Configuration Option} @option{--disable-doc-ps}
@deffnx {Makefile Variable} ds_config_ENABLE_DOC_PS
Enable building and installing the documentation files in PostScript
format.  Default to disabled.
@end deffn


@defvr {Makefile Variable} ds_config_VERBOSE_MESSAGES
If set to @code{yes}: the function @func{ds-echo} will print the
message, otherwise it will not.  Defaults to @code{yes}.

This cannot be set by a @configure{} option.
@end defvr

@c page
@node config options misc
@subsection Miscellaneous options


@vindex ds_config_VERSIONED_LAYOUT
@deffn {Configuration Option} @option{--enable-versioned-layout}
@deffnx {Configuration Option} @option{--disable-versioned-layout}
@deffnx {Makefile Variable} ds_config_VERSIONED_LAYOUT
When the @configure{} option is enabled, the makefile variable is set to
@code{yes}.  Currently ignored.  Default to enabled.
@end deffn

@c page
@node config modules
@section Configuration modules


@deffn {Autoconf Macro} DS_PROGRAMS
Define a bunch of output variables representing common program
pathnames.  See the documentation of the makefile library for details.
@end deffn


@deffn {Autoconf Macro} DS_DIRECTORIES
Define a bunch of output variables representing installation
directories.  These are the DevelStuff directories that can be included
or excluded from the makefile with:

@example
DS_INCLUDE_SECTION([DEVELSTUFF_DIRS])
DS_EXCLUDE_SECTION([DEVELSTUFF_DIRS])
@end example

They are defined in the @configure{} script so that they can be used
also in the package inspection scripts and meta files.
@end deffn

@c page
@node config packaging
@section Packaging support


@deffn {Autoconf Macro} DS_PACKAGING
Find all the packaging tools supported by the infrastructure.
@end deffn


@menu
* config packaging slackware::  Slackware packaging.
@end menu

@c page
@node config packaging slackware
@subsection Slackware packaging


Support for Slackware packaging can be included or excluded from the
makefile library with:

@example
DS_INCLUDE_SECTION([SLACKWARE_DISTRIBUTION])
DS_EXCLUDE_SECTION([SLACKWARE_DISTRIBUTION])
@end example


@deffn {Autoconf Macro} DS_SLACKWARE_TOOLS
Find the Slackware packaging tools and define the associated
configuration options.
@end deffn


The following options are defined.  For all of them: When the
@configure{} option is enabled, the makefile variable is set to
@code{yes}.


@vindex ds_config_SLACKWARE_CHOWN
@deffn {Configuration Option} @option{--enable-slackware-chown}
@deffnx {Configuration Option} @option{--disable-slackware-chown}
@deffnx {Makefile Variable} ds_config_SLACKWARE_CHOWN
Tell the Slackware tools to set the owner and group of files and
directories to @code{root} when building Slackware packages.  Default to
enabled, because this is the default for Slackware.

It comes down to use @code{--chown y} or @code{--chown n} on the command
line of @command{makepkg}.

When this option is enabled, building Slackware packages requires
superuser privileges.
@end deffn


@vindex ds_config_SLACKWARE_LINKADD
@deffn {Configuration Option} @option{--enable-slackware-linkadd}
@deffnx {Configuration Option} @option{--disable-slackware-linkadd}
@deffnx {Makefile Variable} ds_config_SLACKWARE_LINKADD
Tell the Slackware tools to find symbolic links in a package about to be
built, remove them and create them from the @file{doinst.sh}
installation script.  Default to enabled.

It comes down to use @code{--prepend --linkadd y} or @code{--linkadd n}
on the command line of @command{makepkg}.
@end deffn


@vindex ds_config_SLACKWARE_USE_PREFIX_TOOLS
@deffn {Configuration Option} @option{--enable-slackware-prefix-tools}
@deffnx {Configuration Option} @option{--disable-slackware-prefix-tools}
@deffnx {Makefile Variable} ds_config_SLACKWARE_USE_PREFIX_TOOLS
Tell the DevelStuff infrastructure to look for the Slackware packaging
tools under the installation prefix, rather than to use the system ones.
Defaults to disabled.

By default the infrastructure will use the following Slackware programs:

@example
/sbin/makepkg
/sbin/installpkg
/sbin/removepkg
/sbin/upgradepkg
@end example

@noindent
but if this option is enabled, and say that the installation prefix is
@file{/usr/local}, it will look for:

@example
/usr/local/sbin/makepkg
/usr/local/sbin/installpkg
/usr/local/sbin/removepkg
/usr/local/sbin/upgradepkg
@end example

This allows custom scripts to be used (usually modified versions of the
system ones).  This is especially interesting to handle packages
installed in a user's home directory.
@end deffn

@c page
@node config helpers
@section Helper macros


@menu
* config helpers init::         Opening and closing macros.
* config helpers options::      Command line options.
* config helpers programs::     Finding programs.
* config helpers tmpfile::      Temporary files.
* config helpers misc::         Miscellaneous helpers.
@end menu

@c page
@node config helpers init
@subsection Opening and closing macros


@deffn {Autoconf Macro} DS_BEGIN (@var{source-file})
Equivalent to the following:

@example
AC_PREREQ(2.63)
AC_CONFIG_SRCDIR([@var{source-file}])
DS_PREAMBLE
DS_DECLARE_SECTIONS
DS_OPTIONS
DS_DIRECTORIES
DS_PROGRAMS
DS_PACKAGING
@end example
@end deffn


@deffn {Autoconf Macro} DS_END
Equivalent to the following:

@example
DS_SUBST_SECTION_VARIABLES
DS_COMMON_CONFIG_FILES
AC_OUTPUT
@end example
@end deffn

@c page
@node config helpers options
@subsection Command line options


@menu
* config helpers options enable::       Enabling options.
* config helpers options with::         With component options.
@end menu


@c page
@node config helpers options enable
@subsubsection Enabling options


The following chunk defines the options @option{--enable-fasl} and
@option{--disable-fasl}, that can be used to configure the output
variable @code{nau_config_ENABLE_FASL}.

@example
DS_ENABLE_OPTION([nau_config_ENABLE_FASL],[fasl],[no],
   [whether compiled files will be built and installed],
   [enable installation of precompiled libraries])
@end example

@noindent
The default is @code{no}.  The checking message will show as:

@example
checking whether compiled files will be built and installed ... no
@end example

@noindent
and the help screen will include the lines:

@example
--enable-fasl   enable installation of precompiled libraries
                (default: yes)
@end example

@c ------------------------------------------------------------

@deffn {Autoconf Macro} DS_ENABLE_OPTION (@var{output_variable}, @var{identifier}, @var{default}, @var{checking_description}, @var{option_description})
Define an enable/disable command line option for @configure{}.  Set
@var{output_variable} to @code{yes} if the enable option is used, to
@code{no} if the disable option is used.

@table @var
@item output_variable
It is used as argument for @code{AC_SUBST}.

@item identifier
It is the key used to define the options, which will be
@code{--enable-@var{identifier}} and @code{--disable-@var{identifier}}.

@item default
It is the default value for @var{output_variable} if neither the enable
nor the disable options are used.  It must be @code{yes} or @code{no}.

@item checking_description
It is a description of the feature that is shown as log message when
@configure{} is executed.  It will show as:

@example
checking @var{checking_description} ... yes
@end example

@item option_description
It is the description of the feature that is shown when @configure{} is
executed with the @code{--help} option.
@end table
@end deffn


@c page
@node config helpers options with
@subsubsection With component options


The following chunk defines the options @option{--with-build-version},
that can be used to configure the output variable
@code{package_BUILD_VERSION}.

@example
DS_WITH_OPTION([package_BUILD_VERSION],[build-version],
   [1nau],
   [binary package build revision tag],
   [select binary package build revision tag])
@end example

@noindent
The default is @code{1nau}.  The checking message will show as:

@example
checking binary package build revision tag ... 1nau
@end example

@noindent
and the help screen will include the lines:

@example
--with-build-version    select binary package build revision tag
                        (default: 1nau)
@end example

@c ------------------------------------------------------------

@deffn {Autoconf Macro} DS_WITH_OPTION (@var{output_variable}, @var{identifier}, @var{default}, @var{checking_description}, @var{option_description})
Define a ``with component'' command line option for @configure{}.  Set
@var{output_variable} to the argument given to the option.

@table @var
@item output_variable
It is used as argument for @code{AC_SUBST}.

@item identifier
It is the key used to define the option, which will be
@code{--with-@var{identifier}}.

@item default
It is the default value for @var{output_variable} if the option is not
used.

@item checking_description
It is a description of the feature that is shown as log message when
@configure{} is executed.  It will show as:

@example
checking @var{checking_description} ... @var{default}
@end example

@item option_description
It is the description of the feature that is shown when @configure{} is
executed with the @code{--help} option.
@end table
@end deffn


@c page
@node config helpers programs
@subsection Finding programs


@deffn {Autoconf Macro} DS_PROGRAM (@var{output_variable}, @var{program_name}, @var{description})
Find the full pathname of a program and store it into the
@var{output_variable}.  If the program is not found: The output variable
is set to @code{:}, which with a Bourne--like shell is the no--operation
command: it does nothing and exits with code 0.

The @var{description} is currently unused.

Usage example to find some Scheme language executables:

@example
DS_PROGRAM([IKARUS],
   [ikarus],
   [the Ikarus Scheme executable])

DS_PROGRAM([LARCENY],
   [larceny],
   [the Larceny Scheme executable])

DS_PROGRAM([YPSILON],
   [ypsilon],
   [the Ypsilon Scheme executable])
@end example
@end deffn

@c page
@node config helpers tmpfile
@subsection Temporary files


@deffn {Autoconf Macro} DS_WITH_TMPFILE (@var{with_temp_file_chunk}, @var{after_chunk})
Execute a chunk of code that uses a temporary file.

The chunk in @var{with_temp_file_chunk} can use the temporary file whose
full pathname is stored in the variable @code{ds_TMPFILE}.

The chunk in @var{after_chunk} will be evaluated after the temporary
file has been removed, so it can safely report errors and terminate the
script.

The code that creates the temporary file makes use of the @env{TMPDIR}
variable, which will default to @file{/tmp} if not set.
@end deffn


@c page
@node config helpers misc
@subsection Miscellaneous helpers


@deffn {Autoconf Macro} DS_WITH_SAVED_VARIABLE (@var{variable_name}, @var{chunk})
Save the current value of @var{variable_name} in a temporary variable,
evaluate @var{chunk}, then restore the original value of
@var{variable_name}.  That way @var{chunk} can mutate
@var{variable_name} temporarily.

Usage example: The following chunk temporarily mutate the value of
@env{PATH}.

@example
DS_WITH_SAVED_VARIABLE([PATH],
  [PATH=/sbin:$PATH
   DS_PROGRAM([ds_slackware_MAKEPKG_PROGRAM],
     [makepkg],[the Slackware package maker])])
@end example
@end deffn

@c page
@node make
@chapter The makefile library


@menu
* make rules::                  Organisation of main rules.
* make global::                 Global variables.
* make fs::                     Handling files and directories.
* make modules::                Predefined modules.
* make transformers::           Make's modules to process files.
* make dist::                   Source and binary distributions.
* make misc::                   Miscellaneous functions.
@end menu

@c page
@node make rules
@section Organisation of main rules


@menu
* make rules intro::            Introduction.
* make rules main::             Main rules.
* make rules sets::             Sets of rules.
* make rules abi::              Build, install, upgrade.
* make rules misc::             Miscellaneous rules.
@end menu

@c page
@node make rules intro
@subsection Introduction


The makefile library defines a set of ``well known'' phony targets that
can be used to drive project building and installation.  Examples of
these rules are @code{all}, @code{clean}, @code{install},
@code{uninstall}.  These are called ``main rules'' in this document.

The main rules, more or less, follow the @gnu{} coding standards
(@xref{Makefile Conventions,makefile,Makefile
Conventions,gnu-coding-standards}, for details).

Sets of rules are implemented to perform common building tasks; they
partition a project targets in: binary distribution files, documentation
files, development files.  Each of these partitions is driven by a
``ruleset''.

There are 3 main rulesets whose target files are meant to be installed
and that can be ``attached'' to the main rules (@ref{config
sections,Selection of feature sets}, for details):

@table @code
@item bin
It is for the main files of a project.  Programs, libraries, data files
and default configuration files belong to this ruleset.

@item doc
It is for the documentation of the project.  Notice that building and
installation of the documentation can be enabled and disabled by
configuration options.  @ref{config options doc,Documentation options}

@item dev
It is for development--only files.  C language header files and
statically linkable libraries belong to this section.
@end table

Additionally the following rulesets are not meant to install files and
are fully independent from the main rules:

@table @code
@item tests
It drives building and running tests for the project.

@item examples
It drives building and running usage examples for the project.

@item nop
The no--operation ruleset is for stuff that does not fit in any other
ruleset.
@end table

The cleaning main rules of these additional rulesets are always attached
to the main rules.

@c page
@node make rules main
@subsection Main rules


The following are the rules that we are meant to use in normal
operations.  @ref{config sections,Selection of feature sets}, for
details on included rulesets.


@deffn {Makefile Rule} all
Build everything that this package is meant to build; after successful
completion of this rule, the package is ready to be installed.  Only the
included rulesets targets are built.
@end deffn


@deffn {Makefile Rule} clean
@deffnx {Makefile Rule} mostlyclean
Remove from the build directory the files that this project is meant to
build.  Only the included rulesets targets are removed.

@code{clean} is the heavy version: it removes all the target files.
@code{mostlyclean} is the light version: it does not remove files that
we rarely want to rebuild.

@quotation
@emph{Example}: When building @acronym{PDF} documentation from a Texinfo
file, the rules populate a build directory with cache files describing
the source; those files are updated at each build operation, but do not
need to be removed to rebuild the @code{.pdf} file.  So @code{clean}
removes everything, while @code{mostlyclean} does not remove the cache
files.
@end quotation

The @code{clean} and @code{mostlyclean} rules are independent: they do
not invoke each other.  Usually, we have to manually add the list of
``mostly clean'' files to the list of ``clean'' files.
@end deffn


@deffn {Makefile Rule} install
Install all the files and directories that this project is meant to
install.  Only the included rulesets files are installed.
@end deffn


@deffn {Makefile Rule} uninstall
Uninstall all the files and directories that this project is meant to
install.  Only the included rulesets files are uninstalled.
@end deffn


@subsubheading Auxiliary rules


@deffn {Makefile Rule} info
@deffnx {Makefile Rule} html
@deffnx {Makefile Rule} dvi
@deffnx {Makefile Rule} pdf
@deffnx {Makefile Rule} ps
@deffnx {Makefile Rule} man
Build documentation in the specified format.

Not all projects provide documentation in all these output formats, but
if the source is in Texinfo format the available output should be Info,
@acronym{HTML}, @acronym{DVI}, @acronym{PDF} and @acronym{PS}.

Notice that building and installation of the documentation in different
formats can be enabled or disabled by @configure{} command line
options.  @ref{config options doc,Documentation options}
@end deffn


@deffn {Makefile Rule} print-install-layout
Print a list of pathnames (one per line) representing the installation
layout for all the included rulesets.
@end deffn


@deffn {Makefile Rule} print-install-dirs-layout
@deffnx {Makefile Rule} print-install-files-layout
Print a list of pathnames (one per line) representing the installation
layout for all the included rulesets.  Only directories or only files
are printed.
@end deffn


@deffn {Makefile Rule} print-uninstall-script
Print a list of command invocations (one per line) that can be used to
uninstall the files of all the included rulesets.  The commands make use
of the @gnu{} @command{rmdir} and @command{rm} command line utilities.
@end deffn


@deffn {Makefile Rule} print-uninstall-dirs-script
@deffnx {Makefile Rule} print-uninstall-files-script
Print a list of command invocations (one per line) that can be used to
uninstall the directories or the files of all the included rulesets.
@end deffn


@c page
@node make rules sets
@subsection Sets of rules


@deffn {Makefile Rule} bin
@deffnx {Makefile Rule} doc
@deffnx {Makefile Rule} dev
@deffnx {Makefile Rule} examples
@deffnx {Makefile Rule} tests
@deffnx {Makefile Rule} nop
Build all the targets of the selected ruleset.

When the @code{BIN_RULES}, @code{DOC_RULES}, @code{DEV_RULES} sections
are included: the main rule @code{all} invokes @code{bin}, @code{doc},
@code{dev} respectively.
@end deffn


@deffn {Makefile Rule} bin-clean
@deffnx {Makefile Rule} doc-clean
@deffnx {Makefile Rule} dev-clean
@deffnx {Makefile Rule} examples-clean
@deffnx {Makefile Rule} tests-clean
@deffnx {Makefile Rule} nop-clean
Remove all the targets of the selected ruleset.

When the @code{BIN_RULES}, @code{DOC_RULES}, @code{DEV_RULES} sections
are included: the main rule @code{clean} invokes @code{bin-clean},
@code{doc-clean}, @code{dev-clean} respectively.

The main rule @code{clean} always invokes @code{examples-clean},
@code{tests-clean} and @code{nop-clean}.
@end deffn


@deffn {Makefile Rule} bin-mostlyclean
@deffnx {Makefile Rule} doc-mostlyclean
@deffnx {Makefile Rule} dev-mostlyclean
@deffnx {Makefile Rule} examples-mostlyclean
@deffnx {Makefile Rule} tests-mostlyclean
@deffnx {Makefile Rule} nop-mostlyclean
Remove most of the targets of the selected ruleset.

When the @code{BIN_RULES}, @code{DOC_RULES}, @code{DEV_RULES} sections
are included: the main rule @code{mostlyclean} invokes
@code{bin-mostlyclean}, @code{doc-mostlyclean}, @code{dev-mostlyclean}
respectively.

The main rule @code{mostlyclean} always invokes
@code{examples-mostlyclean}, @code{tests-mostlyclean} and
@code{nop-mostlyclean}.
@end deffn


@deffn {Makefile Rule} bin-install
@deffnx {Makefile Rule} doc-install
@deffnx {Makefile Rule} dev-install
Install all the targets of the selected ruleset.

When the @code{BIN_RULES}, @code{DOC_RULES}, @code{DEV_RULES} sections
are included: the main rule @code{install} invokes @code{bin-install},
@code{doc-install}, @code{dev-install} respectively.
@end deffn


@deffn {Makefile Rule} bin-uninstall
@deffnx {Makefile Rule} doc-uninstall
@deffnx {Makefile Rule} dev-uninstall
Uninstall all the targets of the selected ruleset.

When the @code{BIN_RULES}, @code{DOC_RULES}, @code{DEV_RULES} sections
are included: the main rule @code{uninstall} invokes
@code{bin-uninstall}, @code{doc-uninstall}, @code{dev-uninstall}
respectively.
@end deffn


@subsubheading Auxiliary rules


@deffn {Makefile Rule} bin-print-install-layout
@deffnx {Makefile Rule} doc-print-install-layout
@deffnx {Makefile Rule} dev-print-install-layout
Print a list of pathnames (one per line) representing the installation
layout of the selected section.

When the @code{BIN_RULES}, @code{DOC_RULES}, @code{DEV_RULES} sections
are included: the main rule @code{print-install-layout} invokes the
respective rules.
@end deffn


@deffn {Makefile Rule} bin-print-install-dirs-layout
@deffnx {Makefile Rule} bin-print-install-files-layout
@deffnx {Makefile Rule} doc-print-install-dirs-layout
@deffnx {Makefile Rule} doc-print-install-files-layout
@deffnx {Makefile Rule} dev-print-install-dirs-layout
@deffnx {Makefile Rule} dev-print-install-files-layout
Print a list of pathnames (one per line) representing the installation
layout of the selected section.  Only directories or only files are
printed.

When the @code{BIN_RULES}, @code{DOC_RULES}, @code{DEV_RULES} sections
are included: the main rules @code{print-install-dirs-layout} and
@code{print-install-files-layout} invoke the respective rules.
@end deffn


@deffn {Makefile Rule} bin-print-uninstall-script
@deffnx {Makefile Rule} doc-print-uninstall-script
@deffnx {Makefile Rule} dev-print-uninstall-script
Print a list of command invocations (one per line) that can be used to
uninstall the files of all the selected section.  The commands make use
of the @gnu{} @command{rmdir} and @command{rm} command line utilities.

When the @code{BIN_RULES}, @code{DOC_RULES}, @code{DEV_RULES} sections
are included: the main rule @code{print-uninstall-script} invokes the
respective rules.
@end deffn


@deffn {Makefile Rule} bin-print-uninstall-dirs-script
@deffnx {Makefile Rule} bin-print-uninstall-files-script
@deffnx {Makefile Rule} doc-print-uninstall-dirs-script
@deffnx {Makefile Rule} doc-print-uninstall-files-script
@deffnx {Makefile Rule} dev-print-uninstall-dirs-script
@deffnx {Makefile Rule} dev-print-uninstall-files-script
Print a list of command invocations (one per line) that can be used to
uninstall the directories or the files of all the selected section.

When the @code{BIN_RULES}, @code{DOC_RULES}, @code{DEV_RULES} sections
are included: the main rules @code{print-uninstall-dirs-script} and
@code{print-uninstall-files-script} invoke the respective rules.
@end deffn

@c page
@node make rules abi
@subsection Build, install, upgrade


@deffn {Makefile Rule} abi
@deffnx {Makefile Rule} abu
Build the targets, build a binary distribution archive, then install
(@code{abi}) or upgrade (@code{abu}).  To invoke @code{abi} is
equivalent to invoke @code{all bi}; to invoke @code{abu} is equivalent
to invoke @code{all bu}.
@end deffn


@deffn {Makefile Rule} bi
@deffnx {Makefile Rule} bu
If the makefile variable @code{ds_config_ABI} is set to:

@table @code
@item direct
To invoke @code{bi} is equivalent to invoke @code{install}; to invoke
@code{bu} is equivalent to invoke @code{uninstall install}.

@item bindist
To invoke @code{bi} is equivalent to invoke @code{bindist
bindist-install}; to invoke @code{bu} is equivalent to invoke
@code{uninstall bindist bindist-install}.

@item slackware
To invoke @code{bi} is equivalent to invoke @code{slackware
slackware-install}; to invoke @code{bu} is equivalent to invoke
@code{slackware slackware-upgrade}.

@item local-slackware
To invoke @code{bi} is equivalent to invoke @code{local-slackware
local-slackware-install}; to invoke @code{bu} is equivalent to invoke
@code{local-slackware local-slackware-upgrade}.
@end table
@end deffn

@c page
@node make rules misc
@subsection Miscellaneous rules


@deffn {Makefile Rule} clean-builddir
Remove @strong{all} the files under @code{$(builddir)}.  @strong{Be
careful!!!}
@end deffn


@deffn {Makefile Rule} nothing
This target is to allow one to update the @file{Makefile}, if required,
without doing anything else, by issuing:

@example
$ make nothing
@end example

@noindent
if the @file{Makefile} does not need updating: nothing happens.
@end deffn


@deffn {Makefile Rule} echo-variable
Print to stdout the value of a variable; the variable is selected with
the @code{VARIABLE} variable on the command line of @make{}.  Example to
print the value of @code{prefix}:

@example
$ make echo-variable VARIABLE=prefix
/usr/local
@end example
@end deffn


@deffn {Makefile Rule} echo-list-variable
Like @code{echo-variable} but assumes that the value of the selected
variable is a list of strings separated by blank characters, so it
prints each string on its line.
@end deffn

@c page
@node make global
@section Generic functions and modules


@menu
* make global package::         Package variables.
* make global dirs::            Predefined directory variables.
* make global programs::        Program variables.
@end menu

@c page
@node make global package
@subsection Package variables


The variables described here are defined at top level in the makefile
library, so they are always available.  Configuration variables are not
described here (@ref{config,General configuration}, for details on
configuration).


@defvr {Makefile Variable} PACKAGE_NAME
The identifier of the package.  It is the identifier we have used as
first argument to the Autoconf macro @code{AC_INIT}.
@end defvr


@defvr {Makefile Variable} PACKAGE_VERSION
The version of the package.  It is the thing we have used as second
argument to the Autoconf macro @code{AC_INIT}.
@end defvr


@defvr {Makefile Variable} PKG_ID
The package identifier.  Defined by DevelStuff's Autoconf
infrastructure, it should be something like:

@example
$(PACKAGE_VARIABLE)-$(PACKAGE_VERSION)
@end example

@noindent
and it is used, for example, to build archive names for source and
binary distributions.
@end defvr


@defvr {Makefile Variable} PKG_DIR
The package directory.  Defined by DevelStuff's Autoconf infrastructure,
it should be something like:

@example
$(PACKAGE_VARIABLE)/$(PACKAGE_VERSION)
@end example

@noindent
and it is used to build package specific directory pathnames.
@end defvr


@c page
@node make global dirs
@subsection Predefined directory variables


A set of variables is defined to hold the installation directories
layout; there are two sections: directories defined by @gnu{} Autoconf;
directories defined by DevelStuff.  The DevelStuff values are based on
the Autoconf ones.

The directories defined by @gnu{} Autoconf can be placed in template
files by using symbols like @code{@@libdir@@}; the @command{configure}
script will substitute these symbols with values that are themselves
dependent upon other variables; example: the expansion of '@@libdir@@'
can be '$@{prefix@}/lib'.

@quotation
The presence of @code{$} in the body of a make function triggers
expansion to empty string when a function is invoked with @code{eval},
and this is not good; for this reason the following variables are
defined at top level in the makefile library.
@end quotation

@menu
* make global dirs service::    Service variables.
* make global dirs autoconf::   Predefined Autoconf directories.
* make global dirs develstuff:: Predefined DevelStuff directories.
@end menu

@c page
@node make global dirs service
@subsubsection Service variables


@defvr {Makefile Variable} srcdir
The top directory of the source tree.  It @strong{must} be defined in
@file{Makefile.in} as:

@example
srcdir = @@srcdir@@
@end example
@end defvr


@defvr {Makefile Variable} builddir
The top build directory.  It @strong{must} be defined in
@file{Makefile.in} as:

@example
builddir = @@builddir@@
@end example
@end defvr


@defvr {Makefile Variable} DESTDIR
Select a directory to be prepended to the installation directories; it
allows the installation in a temporary location, useful when building
binary packages.  Usage example:

@example
$ make install DESTDIR=/tmp/marco/ucl-1.2.3
@end example
@end defvr


@defvr {Environment Variable} TMPDIR
If its value from the environment is the empty string: it is set to
@file{/tmp}.
@end defvr


@defvr {Makefile Variable} infrastructuredir
@defvrx {Makefile Variable} configurationdir
Hold the relative pathname from @code{$(builddir)} to the infrastructure
and configuration directories.
@end defvr


@c page
@node make global dirs autoconf
@subsubsection Predefined Autoconf directories


@defvr {Makefile Variable} prefix
The installation prefix for all the files; defaults to @code{@@prefix@@}.
@end defvr


@defvr {Makefile Variable} exec_prefix
The installation prefix for executable programs; defaults to
@code{@@exec_prefix@@}.
@end defvr


@defvr {Makefile Variable} bindir
The directory in which to install public executables; defaults to
@code{@@bindir@@}.
@end defvr


@defvr {Makefile Variable} datarootdir
The installation prefix for platform independent data files; defaults to
@code{@@datarootdir@@}.
@end defvr


@defvr {Makefile Variable} datadir
The directory in which to install platform independent data files;
defaults to @code{@@datadir@@}.
@end defvr


@defvr {Makefile Variable} docdir
The directory in which to install documentation files; defaults to
@code{@@datarootdir@@/doc}.
@end defvr


@defvr {Makefile Variable} includedir
The directory in which to install C language header files; defaults to
@code{@@includedir@@}.
@end defvr


@defvr {Makefile Variable} infodir
The directory in which to install Info files; defaults to
@code{@@infodir@@}.
@end defvr


@defvr {Makefile Variable} libdir
The directory in which to install platform dependent libraries; defaults
to @code{@@libdir@@}.
@end defvr


@defvr {Makefile Variable} libexecdir
The directory in which to install private executables; defaults to
@code{@@libexecdir@@}.
@end defvr


@defvr {Makefile Variable} localstatedir
The directory in which to install the application's local state files;
defaults to @code{@@localstatedir@@}.
@end defvr


@defvr {Makefile Variable} mandir
The directory in which to install manual pages; defaults to
@code{@@mandir@@}.
@end defvr


@defvr {Makefile Variable} sbindir
The directory in which to install system public executables; defaults to
@code{@@sbindir@@}.
@end defvr


@defvr {Makefile Variable} sharedstatedir
The directory in which to install the application's shared state files;
defaults to @code{@@sharedstatedir@@}.
@end defvr


@defvr {Makefile Variable} sysconfdir
The directory in which to install system configuration files; defaults
to @code{@@sysconfdir@@}.
@end defvr

@c page
@node make global dirs develstuff
@subsubsection Predefined DevelStuff directories


@defvr {Makefile Variable} pkgdatadir
The directory in which to install data files and platform independent
libraries; defaults to @code{@@pkgdatadir@@}.
@end defvr


@defvr {Makefile Variable} pkgdocdir
The directory in which to install documentation files; defaults to
@code{@@pkgdocdir@@}.
@end defvr


@defvr {Makefile Variable} pkgexampledir
The directory in which to install example files; defaults to
@code{@@pkgexampledir@@}.
@end defvr


@defvr {Makefile Variable} pkginfodir
The directory in which to install Info files; defaults to
@code{@@pkginfodir@@}.
@end defvr


@defvr {Makefile Variable} pkghtmldir
The directory in which to install @acronym{HTML} documentation files;
defaults to @code{@@pkghtmldir@@}.
@end defvr


@defvr {Makefile Variable} pkgincludedir
The directory in which to install C language header files; defaults to
@code{@@pkgincludedir@@}.
@end defvr


@defvr {Makefile Variable} pkglibdir
The directory in which to install platform dependent libraries and data
files; defaults to @code{@@pkglibdir@@}.
@end defvr


@defvr {Makefile Variable} pkglibexecdir
The directory in which to install private executable files; defaults to
@code{@@pkglibexecdir@@}.
@end defvr


@defvr {Makefile Variable} pkgsysconfdir
The directory in which to install system configuration files; defaults
to @code{@@pkgsysconfdir@@}.
@end defvr

@c page
@node make global programs
@subsection Program variables


The program variables are defined at top level, so they are always
available; they are initialised by the @code{DS_PROGRAMS} Autoconf
macro.  This section is constantly updated, so we have to look at the
source of the makefile library, but it should be something like the
following:

@example
BASH_PROGRAM = @@BASH_PROGRAM@@
SHELL        = @@SHELL@@
@@SET_MAKE@@
MAKE_SILENT  = $(MAKE) --silent
MAKE_NODIR   = $(MAKE) --no-print-directory
BZIP         = @@BZIP@@
CAT          = @@CAT@@
CP           = @@CP@@ --force --verbose \
                 --preserve=mode,timestamp --
DATE         = @@DATE@@
GREP         = @@GREP@@
GAWK         = @@GAWK@@
GZIP         = @@GZIP@@
M4           = @@M4@@
MAKEINFO     = @@MAKEINFO@@
MKDIR        = @@MKDIR@@ --parents --verbose
MV           = @@MV@@ --verbose --
RM           = @@RM@@ --force --recursive --verbose --
RM_FILE      = @@RM@@ --force --verbose --
RM_SILENT    = @@RM@@ --force --recursive --
RMDIR        = @@RMDIR@@ --parents \
                  --ignore-fail-on-non-empty --
SED          = @@SED@@
SYMLINK      = @@SYMLINK@@ --symbolic
TAR          = @@TAR@@
TEXI2PDF     = @@TEXI2PDF@@
DVIPS        = @@DVIPS@@
SUDO         = @@SUDO@@

INSTALL                 = @@INSTALL@@
INSTALL_DIR_MODE        ?= 0755
INSTALL_BIN_MODE        ?= 0555
INSTALL_DATA_MODE       ?= 0444
INSTALL_LIB_MODE        ?= 0444

INSTALL_DIR  = $(INSTALL) -p -m $(INSTALL_DIR_MODE) -d
INSTALL_BIN  = $(INSTALL) -p -m $(INSTALL_BIN_MODE)
INSTALL_DATA = $(INSTALL) -p -m $(INSTALL_DATA_MODE)
@end example

@noindent
notice that automatic installation of files and directories is
@strong{not} performed with the @code{INSTALL_DIR}, @code{INSTALL_BIN},
@code{INSTALL_DATA} variables, but rather with the
@func{ds-install-directory} and @func{ds-install-files} makefile
functions.

Special support for compressing archive files is present through the
following variables.  Notice that the selected compressor is
@strong{not} used for all the compression tasks in the DevelStuff
infrastructure (example: documentation files are compressed with
@command{gzip}).


@defvr {Makefile Variable} ds_COMPRESSOR_PROGRAM
The executable to use to compress a file.  This variable is configured
by the value of @code{ds_config_COMPRESSOR}; if it is:

@table @code
@item gzip
This variable is set to @code{$(GZIP)}.

@item bzip
This variable is set to @code{$(BZIP)}.
@end table
@end defvr


@defvr {Makefile Variable} ds_COMPRESSOR_TAR
The command line option to give to @gnu{} Tar to make it compress or
uncompress an archive.  This variable is configured by the value of
@code{ds_config_COMPRESSOR}; if it is:

@table @code
@item gzip
This variable is set to @option{--gzip}.

@item bzip
This variable is set to @option{--bzip2}.
@end table
@end defvr


@defvr {Makefile Variable} ds_COMPRESSOR_EXT
The file name extension of a file compressed with the selected
compressor.  This variable is configured by the value of
@code{ds_config_COMPRESSOR}; if it is:

@table @code
@item gzip
This variable is set to @code{gz}.

@item bzip
This variable is set to @code{bz2}.
@end table
@end defvr

@c page
@node make fs
@section Handling files and directories


@deffn {Makefile Function} ds-drop-backup-files @var{list_of_pathnames}
Filter out backup files, that is files whose name ends with @code{~}.
@end deffn


@deffn {Makefile Function} ds-drop-equal-prefixed-files @var{list_of_pathnames}
Filter out files whose name begins with @code{=}; notice that it is the
name of the file that is checked, not the directory part of the
pathname.
@end deffn


@deffn {Makefile Function} ds-drop-unwanted-files @var{list_of_pathnames}
Applies the following functions: @func{ds-drop-backup-files},
@func{ds-drop-equal-prefixed-files}.
@end deffn


@deffn {Makefile Function} ds-files-from-dir @var{directory} [@var{list_of_patterns}]
Return the list of files in @var{directory}, filtering out unwanted
files by applying @func{ds-drop-unwanted-files}.  The optional
@var{list_of_patterns} is used to filter the collected files with
@func{wildcard}; it defaults to @code{*}.  Examples:

@itemize
@item
collect all the files from @code{$(srcdir)/src}:

@example
$(call ds-files-from-dir,$(srcdir)/src)
@end example

@item
collect all the @code{*.h} and @code{*.c} files from
@code{$(srcdir)/src}:

@example
$(call ds-files-from-dir,$(srcdir)/src,*.c *.h)
@end example

@item
collect all the @code{*.h} files from @code{$(srcdir)/include} and all
the @code{*.c} files from @code{$(srcdir)/src}:

@example
$(call ds-files-from-dir,$(srcdir),src/*.c include/*.h)
@end example
@end itemize
@end deffn


@deffn {Makefile Function} ds-replace-dir @var{new_directory} @var{list_of_pathnames}
Remove the directory part from @var{list_of_pathnames} then prepend
@var{new_directory} to each file name.
@end deffn


@deffn {Makefile Function} ds-glob @var{identifier} @var{list_of_patterns}
Take a module's source directory from the variable
@code{<IDENTIFIER>_SRCDIR} and apply @func{ds-files-from-dir} to it
and the patterns.  This is meant to acquire the list of source files of
a transformation module.  An error is signalled if the source directory
is the empty string.
@end deffn

@c page
@node make modules
@section Predefined modules


@menu
* make modules gendoc::         Generic documentation.
* make modules texinfo::        Texinfo documentation.
* make modules meta::           Meta scripts.
* make modules pkgconfig::      Support for @command{pkg-config}.
* make modules autoconf::       Detecting this package with Autoconf.
* make modules inspect::        Configuration inspection scripts.
* make modules uninstall::      Uninstallation scripts.
@end menu

@c page
@node make modules gendoc
@subsection Generic documentation


If the makefile variable @code{ds_include_GENERIC_DOCUMENTATION} is set
to @code{yes}: the makefile section @code{ds-generic-documenation} is
automatically evaluated in the makefile library.


@deffn {Makefile Section} ds-generic-documentation
Install generic documentation files under the package specific
documentation directory.  This module does its job only if the makefile
variable @code{ds_config_ENABLE_DOC} is set to @code{yes}.

Generic documentation files are @file{README}, @file{COPYRIGHT},
@file{INSTALL}, @file{BUGS}, @file{TODO} and the like that are in the
top level source directory.  They are compressed with @code{$(GZIP)} and
installed under @code{$(pkgdocdir)}.

To use this module put the following in the makefile:

@example
$(eval $(call ds-generic-documentation))
@end example

@noindent
the core of the module is generated with:

@example
$(eval $(call ds-module,ds_gendoc,doc,DATA))
@end example

@noindent
and all the rules generated by @func{ds-module} are available.
@end deffn


@defvr {Makefile Variable} ds_gendoc_SRCDIR
The source directory; it is the directory in which the module will
search the generic documentation files.
@end defvr


@defvr {Makefile Variable} ds_gendoc_BUILDDIR
The build directory in which the files will be compressed.
@end defvr


@defvr {Makefile Variable} ds_gendoc_PATTERNS
The list of shell patterns used to select the files.
@end defvr


@defvr {Makefile Variable} ds_gendoc_SOURCES
The list of selected files.
@end defvr


@defvr {Makefile Variable} ds_gendoc_TARGETS
The list of compressed files.
@end defvr


@defvr {Makefile Variable} ds_gendoc_INSTLST
The list of files that will be installed.
@end defvr


@defvr {Makefile Variable} ds_gendoc_INSTDIR
The directory under which the files will be installed.  It is set to
@code{$(pkgdocdir)}.
@end defvr


@defvr {Makefile Variable} ds_gendoc_CLEANFILES
@defvrx {Makefile Variable} ds_gendoc_MOSTLYCLEANFILES
The list of files removed by the @code{clean} and @code{mostlyclean}
rules.
@end defvr


@c page
@node make modules texinfo
@subsection Texinfo documentation


If the makefile variable @code{ds_include_TEXINFO_DOCUMENTATION} is set
to @code{yes}: the makefile section @code{ds-texinfo-documenation} is
automatically evaluated in the makefile library.

To use this module put the following in the makefile:

@example
$(eval $(call ds-texinfo-documentation))
@end example

@noindent
this module does it job only if the makefile variable
@code{ds_config_ENABLE_DOC} is set to @code{yes}.  @ref{config options
doc, Documentation options}.


@deffn {Makefile Section} ds-texinfo-documentation
Build and install documentation from source files in Texinfo format.
@end deffn


@menu
* make modules texinfo gen::    Generic variables and rules.
* make modules texinfo info::   Documenation in Info format.
* make modules texinfo html::   Documenation in @acronym{HTML} format.
* make modules texinfo dvi::    Documenation in @acronym{DVI} format.
* make modules texinfo pdf::    Documenation in @acronym{PDF} format.
* make modules texinfo ps::     Documenation in PostScript format.
@end menu

@c page
@node make modules texinfo gen
@subsubsection Generic variables and rules


@defvr {Makefile Variable} ds_texi_SRCDIR
The source directory for Texinfo files.  It is set to
@code{$(srcdir)/doc}.
@end defvr


@defvr {Makefile Variable} ds_texi_BUILDDIR
The build directory for Texinfo files.  It is set to
@code{$(builddir)/texinfo.d}.
@end defvr


@defvr {Makefile Variable} ds_texi_SOURCES
The list of source files in Texinfo format.  It is the list of file with
@code{texi} extension under the source directory.
@end defvr


@deffn {Makefile Rule} ds-texinfo-builddir
Create the build directory under which all the documentation files from
Texinfo source will be created.
@end deffn


@defvr {Makefile Variable} texi_MORE_FLAGS
Customisable variable meant to hold flags for the command line of all
the @command{makeinfo} invocations.  For example: it is the place to
select additional include directories.
@end defvr

@c page
@node make modules texinfo info
@subsubsection Documenation in Info format


The core of the Info format support rules is generated with:

@example
$(eval $(call ds-module,ds_texi_INFO,doc,DATA))
@end example

@noindent
all the rules generated by @func{ds-module} are available.  The
auxiliary rule @code{info} invokes @code{ds_texi_INFO-all}.


@defvr {Makefile Variable} ds_texi_INFO_TARGETS
The list of target files in Info format.
@end defvr


@defvr {Makefile Variable} ds_texi_INFO_INSTLST
The list of files in Info format to install.
@end defvr


@defvr {Makefile Variable} ds_texi_INFO_INSTDIR
The directory in which install the files in Info format.  Defaults to
@code{$(pkginfodir)}.
@end defvr

@c page
@node make modules texinfo html
@subsubsection Documenation in @acronym{HTML} format


The core of the @acronym{HTML} format support rules is generated with:

@example
$(eval $(call ds-module,ds_texi_HTML,doc,DATA))
@end example

@noindent
all the rules generated by @func{ds-module} are available.  The
auxiliary rule @code{html} invokes @code{ds_texi_HTML-all}.


@defvr {Makefile Variable} ds_texi_HTML_TARGETS
The list of target files in @acronym{HTML} format.
@end defvr


@defvr {Makefile Variable} ds_texi_HTML_INSTLST
The list of files in @acronym{HTML} format to install.
@end defvr


@defvr {Makefile Variable} ds_texi_HTML_INSTDIR
The directory in which install the files in @acronym{HTML} format.
Defaults to @code{$(pkghtmldir)}.
@end defvr

@c page
@node make modules texinfo dvi
@subsubsection Documenation in @acronym{DVI} format


The core of the @acronym{DVI} format support rules is generated with:

@example
$(eval $(call ds-module,ds_texi_DVI,doc,DATA))
@end example

@noindent
all the rules generated by @func{ds-module} are available.  The
auxiliary rule @code{dvi} invokes @code{ds_texi_DVI-all}.


@defvr {Makefile Variable} ds_texi_DVI_TARGETS
The list of target files in @acronym{DVI} format.
@end defvr


@defvr {Makefile Variable} ds_texi_DVI_INSTLST
The list of files in @acronym{DVI} format to install.
@end defvr


@defvr {Makefile Variable} ds_texi_DVI_INSTDIR
The directory in which install the files in @acronym{DVI} format.
Defaults to @code{$(pkgdvidir)}.
@end defvr

@c page
@node make modules texinfo pdf
@subsubsection Documenation in @acronym{PDF} format


The core of the @acronym{PDF} format support rules is generated with:

@example
$(eval $(call ds-module,ds_texi_PDF,doc,DATA))
@end example

@noindent
all the rules generated by @func{ds-module} are available.  The
auxiliary rule @code{pdf} invokes @code{ds_texi_PDF-all}.


@defvr {Makefile Variable} ds_texi_PDF_TARGETS
The list of target files in @acronym{PDF} format.
@end defvr


@defvr {Makefile Variable} ds_texi_PDF_INSTLST
The list of files in @acronym{PDF} format to install.
@end defvr


@defvr {Makefile Variable} ds_texi_PDF_INSTDIR
The directory in which install the files in @acronym{PDF} format.
Defaults to @code{$(pkgpdfdir)}.
@end defvr

@c page
@node make modules texinfo ps
@subsubsection Documenation in PostScript format


The core of the PostScript format support rules is generated with:

@example
$(eval $(call ds-module,ds_texi_PS,doc,DATA))
@end example

@noindent
all the rules generated by @func{ds-module} are available.  The
auxiliary rule @code{ps} invokes @code{ds_texi_PS-all}.  Notice that
PostScript files are compressed with @code{$(GZIP)} before installation.


@defvr {Makefile Variable} ds_texi_PS_TARGETS
The list of target files in PostScript format.
@end defvr


@defvr {Makefile Variable} ds_texi_PS_INSTLST
The list of files in PostScript format to install.
@end defvr


@defvr {Makefile Variable} ds_texi_PS_INSTDIR
The directory in which install the files in PostScript format.  Defaults
to @code{$(pkgpsdir)}.
@end defvr


@c page
@node make modules meta
@subsection Meta scripts


Meta scripts are:

@table @file
@item preinstall
To be executed before installing the package (for example to add users
and groups).

@item postinstall
To be executed after package installation (for example to configure the
pakcage).

@item preremoval
To be executed before removing the package (for example to remove
programs from menu infrastructures).

@item postremoval
To be executed after removing the package (for example to remove users
and groups).
@end table

At present there is no support for meta scripts in the @code{install}
and @code{uninstall} rules.

If the makefile variable @code{ds_include_META_SCRIPTS} is set to
@code{yes}: the makefile section @code{ds-meta-scripts} is automatically
evaluated in the makefile library.


@deffn {Makefile Section} ds-meta-scripts
Install package handling scripts.  It is fine if only some (or none) of
the scripts exist in the source tree.

To use this module put the following in the makefile:

@example
$(eval $(call ds-meta-scripts))
@end example
@end deffn


@defvr {Makefile Variable} ds_meta_scripts_SOURCES
The list of generic documentation files.
@end defvr


@defvr {Makefile Variable} ds_meta_scripts_INSTLST
The list of files that will be installed.
@end defvr


@defvr {Makefile Variable} ds_meta_scripts_INSTDIR
The directory in which the files will be installed.  It is set to
@code{$(pkglibexecdir)}.
@end defvr

@c page
@node make modules pkgconfig
@subsection Support for @command{pkg-config}


@command{pkg-config} is a program (a compiled executable) that inspects
a database of package meta informations and prints to its standard
output channel informations about installed packages and libraries.  It
can print any custom value, but has special support for C compiler flags
to be used in preprocessing and linking.

An example meta file for a package named @code{annealing} that provides
a shared library may look like this:

@example
# annealing.pc --
#

PACKAGE_NAME="annealing"
PACKAGE_VERSION="0.4a0"

library_interface_version="1.1"
library_interface_major_version="1"
library_interface_minor_version="1"
library_id="annealing1.1"

Name: Annealing
Description: simulated annealing for the GNU Scientific Library
Version: $library_interface_version
Libs: -L$libdir -l$library_id
Cflags: -I$pkgincludedir
Requires: gsl >= 1.9

### end of file
@end example

When using the DevelStuff infrastructure we are meant to build a
template file to be processed by Autoconf; for example by putting the
following macro in @file{configure.ac}:

@example
AC_CONFIG_FILES(meta.d/@meta{package-name}.pc:meta/@meta{package-name}.pc.in)
@end example

@noindent
where @code{@meta{package-name}} can be equal to the first argument to
@code{AC_INIT}.

If the makefile variable @code{ds_include_PKGCONFIG} is set to
@code{yes}: the makefile section @code{ds-pkg-config} is automatically
evaluated in the makefile library with no arguments.


@deffn {Makefile Section} ds-pkg-config
@deffnx {Makefile Section} ds-pkg-config @var{names}
Install the meta data files for @command{pkg-config}, usually it is a
single meta file.

If @var{names} is not used: by default an attempt is done to install
@code{$(PACKAGE_NAME).pc} picking it up from @code{$(builddir)/meta.d}.
More than one meta file can be selected by setting the @var{names}
optional parameter to the list of file names with the @code{.pc}
extension stripped.

To use this module put the following in the makefile:

@example
$(eval $(call ds-pkg-config))
@end example
@end deffn


@defvr {Makefile Variable} ds_pkgconfig_SRCDIR
The source directory.  It is set to @code{$(srcdir)/meta}.
@end defvr


@defvr {Makefile Variable} ds_pkgconfig_BUILDDIR
The build directory.  It is set to @code{$(builddir)/meta.d}.
@end defvr


@defvr {Makefile Variable} ds_pkgconfig_NAMES
The list of meta files that will be searched in the source tree.
@end defvr


@defvr {Makefile Variable} ds_pkgconfig_SOURCES
The list of meta files that are present in the source tree.
@end defvr


@defvr {Makefile Variable} ds_pkgconfig_INSTLST
The list of meta files that will be installed.
@end defvr


@defvr {Makefile Variable} ds_pkgconfig_INSTDIR
The directory in which the files will be installed.  It is set to
@code{$(libdir)/pkgconfig}.
@end defvr

@c page
@node make modules autoconf
@subsection Detecting this package with Autoconf


When using @gnu{} Autoconf to configure a package, it is possible to
load in the @file{configure.ac} template a file of macros that detect
the availability of another package.

For example, to detect the availability of a package named
@code{annealing} that provides a shared library
@file{libannealing1.2.so}, we can prepare the following macro file:

@example
# annealing.m4 --
#

AC_DEFUN([ANNEALING_LIBRARY],
  [annealing_MAJOR=$1
   annealing_MINOR=$2
   annealing_LIBID=annealing$annealing_MAJOR.$annealing_MINOR

   AC_CHECK_HEADERS([annealing.h])
   AC_CHECK_LIB([$annealing_LIBID],[annealing_version],
     [ANNEALING_LIBS="-l$annealing_LIBID"],
     [AC_MSG_ERROR([cannot link to Annealing Library])])
   AC_SUBST([ANNEALING_LIBS],[$ANNEALING_LIBS])])

### end of file
@end example

@noindent
put the following in @file{aclocal.m4}:

@example
m4_include(annealing.m4)
@end example

@noindent
and put the following in @file{configure.ac}:

@example
ANNEALING_LIBRARY(1,2)
@end example

If the makefile variable @code{ds_include_AUTOCONF} is set to
@code{yes}: the makefile section @code{ds-autoconf} is automatically
evaluated in the makefile library with no arguments.


@deffn {Makefile Section} ds-autoconf
@deffnx {Makefile Section} ds-autoconf @var{names}
Install macro files for @gnu{} Autoconf to be used by other projects to
detect this package installation.

If @var{names} is not used: by default an attempt is done to install
@code{$(PACKAGE_NAME).m4} by picking it up from
@code{$(srcdir)/meta/autoconf}.  More than one meta file can be selected
by setting the @var{names} optional parameter to the list of file names
with the @code{.m4} extension stripped.

To use this module put the following in the makefile:

@example
$(eval $(call ds-autoconf))
@end example
@end deffn


@defvr {Makefile Variable} ds_autoconf_SRCDIR
The source directory.  It is set to @code{$(srcdir)/meta/autoconf}.
@end defvr


@defvr {Makefile Variable} ds_autoconf_NAMES
The list of macro files that will be searched in the source tree.
@end defvr


@defvr {Makefile Variable} ds_autoconf_SOURCES
The list of macro files found in the source tree.
@end defvr


@defvr {Makefile Variable} ds_autoconf_INSTLST
The list of macro files that will be installed.
@end defvr


@defvr {Makefile Variable} ds_autoconf_INSTDIR
The directory in which the files will be installed.  It is set to:

@example
$(datadir)/aclocal/$(PKG_DIR)
@end example
@end defvr

@c page
@node make modules inspect
@subsection Configuration inspection scripts.


A configuration inspection script is an executable that can be used to
inspect the installation of a package from the command line or another
script.

For example, to detect the availability of a package named
@code{annealing} that provides a shared library
@file{libannealing1.2.so}, we can prepare the following script:

@example
#!/bin/sh
#
# annealing-config

case "$1" in
    --package-name)
        echo "annealing"
        ;;
    --package-version)
        echo "0.4a0"
        ;;

    --library-interface-version)
        echo "1.2"
        ;;
    --library-interface-major-version)
        echo "1"
        ;;
    --library-interface-minor-version)
        echo "2"
        ;;
    --library-id)
        # print the shared library identifier
        echo "annealing1.1"
        ;;
    *)
        echo 'usage: annealing-config OPTION
options:

    --package-name              print the package name
    --package-version           print the full package version

    --library-interface-version
                                print the interface version
    --library-interface-major-version
                                print the interface version
                                major number
    --library-interface-minor-version
                                print the interface version
                                minor number
    --library-id                print the library identifier
'
        ;;
esac

exit 0

### end of file
@end example

It is useful to write such a script so that it is preprocessed by
Autoconf; for example by putting the following macro in
@file{configure.ac}:

@example
AC_CONFIG_FILES(meta.d/@meta{package-name}-config:\
meta/@meta{package-name}-config.in)
@end example

@noindent
where @code{@meta{package-name}} can be equal to the first argument to
@code{AC_INIT}.

If the makefile variable @code{ds_include_CONFIG_INSPECTION_SCRIPT} is
set to @code{yes}: the makefile section
@code{ds-config-inspection-script} is automatically evaluated in the
makefile library with no arguments.


@deffn {Makefile Module} ds-config-inspection-script
@deffnx {Makefile Module} ds-config-inspection-script @var{names}
Install the configuration inspection script.

If @var{names} is not used: by default an attempt is done to install
@code{$(PACKAGE_NAME)-config} by picking it up from
@code{$(builddir)/meta.d}.  More than one script can be selected by
setting the @var{names} optional parameter to the list of file names.

To use this module put the following in the makefile:

@example
$(eval $(call ds-config-inspection-script))
@end example
@end deffn


@defvr {Makefile Variable} ds_config_script_SRCDIR
The source directory.  It is set to @code{$(srcdir)/meta}.
@end defvr


@defvr {Makefile Variable} ds_config_script_BUILDDIR
The build directory.  It is set to @code{$(builddir)/meta.d}.
@end defvr


@defvr {Makefile Variable} ds_config_script_NAMES
The list of config scripts that will be searched in the source tree.
@end defvr


@defvr {Makefile Variable} ds_config_script_SOURCES
The list of config scripts that are present in the source tree.
@end defvr


@defvr {Makefile Variable} ds_config_script_INSTLST
The list of config scripts that will be installed.
@end defvr


@defvr {Makefile Variable} ds_config_script_INSTDIR
The directory in which the files will be installed.  It is set to
@code{$(bindir)}.
@end defvr

@c page
@node make modules uninstall
@subsection Uninstallation scripts


In addition to the @code{install} and @code{uninstall} rules, DevelStuff
autocomposes and installs a set of scripts that can be used to remove a
package from the system.  Three scripts are generated, one for each main
ruleset: @code{bin}, @code{doc}, @code{dev}.

If the makefile variable @code{ds_include_UNINSTALL_SCRIPTS} is set to
@code{yes}: the makefile section @code{ds-uninstall-scripts} is
automatically evaluated in the makefile library.


@deffn {Makefile Section} ds-uninstall-scripts
Enable generation of uninstallation scripts.  Only scripts to uninstall
the included main rulesets are generated.

To use this module put the following in the makefile:

@example
$(eval $(call ds-uninstall-scripts))
@end example

@noindent
the core of the module is generated with:

@example
$(eval $(call ds-module,ds_uninstall,bin,BIN))
$(eval $(call ds-module,ds_uninstall,doc,BIN))
$(eval $(call ds-module,ds_uninstall,dev,BIN))
@end example

@noindent
and all the rules generated by @func{ds-module} are available.
@end deffn


@defvr {Makefile Variable} ds_uninstall_BUILDDIR
The build directory in which the scripts will be created.
@end defvr


@defvr {Makefile Variable} ds_uninstall_bin_TARGETS
@defvrx {Makefile Variable} ds_uninstall_doc_TARGETS
@defvrx {Makefile Variable} ds_uninstall_dev_TARGETS
The list of scripts that will be generated.
@end defvr


@defvr {Makefile Variable} ds_uninstall_bin_INSTLST
@defvrx {Makefile Variable} ds_uninstall_doc_INSTLST
@defvrx {Makefile Variable} ds_uninstall_dev_INSTLST
The list of scripts that will be installed.
@end defvr


@defvr {Makefile Variable} ds_uninstall_bin_INSTDIR
@defvrx {Makefile Variable} ds_uninstall_doc_INSTDIR
@defvrx {Makefile Variable} ds_uninstall_dev_INSTDIR
The directory under which the scripts will be installed.  Defaults to
@code{$(pkglibexecdir)}.
@end defvr


@defvr {Makefile Variable} ds_uninstall_bin_CLEANFILES
@defvrx {Makefile Variable} ds_uninstall_doc_CLEANFILES
@defvrx {Makefile Variable} ds_uninstall_dev_CLEANFILES
@defvrx {Makefile Variable} ds_uninstall_bin_MOSTLYCLEANFILES
@defvrx {Makefile Variable} ds_uninstall_doc_MOSTLYCLEANFILES
@defvrx {Makefile Variable} ds_uninstall_dev_MOSTLYCLEANFILES
The list of files under the build directory that will be removed by the
@code{clean} and @code{mostlyclean} rules.
@end defvr


@defvr {Makefile Variable} ds_uninstall_bin_NAME
@defvrx {Makefile Variable} ds_uninstall_doc_NAME
@defvrx {Makefile Variable} ds_uninstall_dev_NAME
The scripts file names.
@end defvr


@defvr {Makefile Variable} ds_uninstall_bin_PATHNAME
@defvrx {Makefile Variable} ds_uninstall_doc_PATHNAME
@defvrx {Makefile Variable} ds_uninstall_dev_PATHNAME
The scripts pathnames.
@end defvr

@c page
@node make transformers
@section Make's modules to process files


@menu
* make transformers intro::     Introduction to the usage of modules.
* make transformers srcdir::    Handling source directories.
* make transformers builddir::  Handling build directories.
* make transformers define::    Defining a module.
* make transformers clean::     Removing target files.
* make transformers install::   Module installation code sections
                                and functions.
@end menu

@c page
@node make transformers intro
@subsection Introduction to the usage of modules


Let's se an example of module whose purpose is to process a set of files
with the @gnu{} M4 preprocessor:

@example
$(eval $(call ds-srcdir,mine,$(srcdir)/src/mine))
$(eval $(call ds-builddir,mine))

mine_SOURCES    = $(call ds-glob,mine,*.txt.m4)
mine_TARGETS    = $(mine_SOURCES:.txt.m4=.txt)

$(eval $(call ds-default-install-variables,mine,$(pkgdatadir)))
$(eval $(call ds-default-clean-variables,mine))
$(eval $(call ds-module,mine,bin,DATA))

vpath %.m4    $(mine_SRCDIR)

mine_M4FLAGS   = --prefix-builtins --include=$(mine_SRCDIR) --

%.txt : %.txt.m4
      $(M4) $(mine_M4FLAGS) $(<) >$(@@)
@end example

@noindent
this chunk of makefile defines a module with identifier @code{mine},
having the following characteristics:

@itemize
@item
the module is registered under the @code{bin} ruleset and its output
files are meant to be installed as data (as opposed to binaries and
libraries);

@item
the source files are under @code{$(srcdir)/src/mine} and match the
pattern @code{*.txt.m4};

@item
the output files will be built under @code{$(builddir)/mine.d} and will
have @code{.txt} extension;

@item
the variable @code{M4} must hold the pathname of the executable program
of @gnu{} M4; something like:

@example
AC_PATH_PROG([M4],[m4],[:])
@end example

@noindent
must be present in @file{configure.ac} and something like:

@example
M4  = @@M4@@
@end example

@noindent
must be present in the makefile;

@item
the @gnu{} M4 flags to be used are specific for this module and selected
with @code{mine_M4FLAGS};

@item
the following phony rules are available to drive the module:

@table @code
@item mine-all
build the output files;

@item mine-mostlyclean
remove the files listed in the variable @code{mine_MOSTLYCLEANFILES},
which is set to the value of the variable @code{mine_TARGETS} by
@func{ds-default-clean-variables};

@item mine-clean
remove the files listed in the variable @code{mine_CLEANFILES}, which is
set to the value of the variable @code{mine_MOSTLYCLEANFILES} by
@func{ds-default-clean-variables};

@item mine-install
installs the files in @code{mine_INSTLST} under the directory in
@code{mine_INSTDIR} with data files permissions.
@end table
@end itemize

Other rules and variables are generated.

@c page
@node make transformers srcdir
@subsection Handling source directories


@deffn {Makefile Section} ds-srcdir @var{identifier}
@deffnx {Makefile Section} ds-srcdir @var{identifier} @var{directory_pathname}
Test if the source directory of the module exists in the source tree;
this function makes use of @func{ds-assert-srcdir}.

The module @var{identifier} is the one used when defining a module with
@func{ds-module}, the optional directory pathname defaults to
@code{$(srcdir)/<IDENTIFIER>}.

The variable @code{<IDENTIFIER>_SRCDIR} is set to the source directory
pathname.  The assignment is performed with the @code{?=} operator, so
if the variable is already defined: it will @strong{not} be overwritten.

Examples:

@itemize
@item
select @code{$(srcdir)/src/mine} as location of source files for a
module identified by @code{mine}:

@example
$(eval $(call ds-srcdir,mine,$(srcdir)/src/mine))
@end example

@item
select @code{$(srcdir)/mine} as location of source files for a module
identified by @code{mine}:

@example
$(eval $(call ds-srcdir,mine))
@end example
@end itemize
@end deffn


@deffn {Makefile Section} ds-assert-srcdir @var{identifier}
Invoke the built in makefile function @func{error} if a module's source
directory does not exist.  The module's source directory is the value of
the variable @code{<IDENTIFIER>_SRCDIR}.
@end deffn

@c page
@node make transformers builddir
@subsection Handling build directories


@deffn {Makefile Section} ds-builddir @var{identifier}
@deffnx {Makefile Section} ds-builddir @var{identifier} @var{directory_pathname}
Define what is needed to create a module's build directory.  The module
@var{identifier} is the one used when defining a module with
@func{ds-module}, the optional directory pathname defaults to
@code{$(builddir)/<IDENTIFIER>.d}.

The variable @code{<IDENTIFIER>_BUILDDIR} is set to the build directory
pathname.  The assignment is performed with the @code{?=} operator, so
if the variable is already defined: it will @strong{not} be overwritten.

The phony rule @code{<IDENTIFIER>-make-builddir} is defined to apply
@func{ds-make-builddir} to @var{identifier}; the rule is added as
prerequisite to the rule @code{<IDENTIFIER>-all}.

Examples:

@itemize
@item
select @code{$(builddir)/mine.d} as location of output files for a
module identified by @code{mine}:

@example
$(eval $(call ds-builddir,mine))
@end example

@item
select @code{$(builddir)/objects.d} as location of output files for a
module identified by @code{mine}:

@example
$(eval $(call ds-builddir,mine,$(builddir)/objects.d))
@end example
@end itemize
@end deffn


@deffn {Makefile Function} ds-make-builddir @var{identifier}
If the directory pathname in the variable @code{<IDENTIFIER>_BUILDDIR}
does not exists: create it using @code{$(MKDIR)}.  If the pathname is
the empty string: an error is signalled.  Notice that this function has
to be called without indentation in the makefile, for example:

@example
mine_BUILDDIR = $(builddir)/mine.d)

.PHONY: mine-make-builddir

mine-make-builddir:
$(call ds-make-builddir,mine)
@end example

@noindent
alternatively:

@example
mine-make-builddir: ; $(call ds-make-builddir,mine)
@end example
@end deffn

@c page
@node make transformers define
@subsection Defining a module


There are a number of makefile sections to define transformation
modules; usually we need only @func{ds-module} or
@func{ds-module-with-defaults}.  The others are provided for flexibility
and customisation.

For all the makefile sections described below, the arguments are as
follows:

@table @var
@item identifier
It is the prefix for all module's variables and phony rules.

@item set
It is the ruleset under which the defined module is registered; usually
it is one among @code{bin}, @code{doc} and @code{dev}, but it can also
be @code{nop}, @code{tests}, @code{examples} or some custom makefile
ruleset.

@item install-mode
It is the installation mode to be handed to @func{ds-install-module};
usually it is one among: @code{BIN}, @code{DATA} and @code{LIB}, but it
can be a custom mode, too.

@item install-directory
It is the installation directory for the module's output files; it is
used to initialise the variable @code{<@var{IDENTIFIER}>_INSTDIR}.
@end table

To use each of the sections we need the @code{eval} plus @code{call}
idiom; examples:

@example
$(eval $(call ds-module,mine,bin))
$(eval $(call ds-module-with-defaults,mine,bin,LIB,$(libdir)))
@end example


@deffn {Makefile Section} ds-module-all-rule @var{identifier} @var{set}
Define the @code{<@var{identifier}>-all} phony rule and make it a
prerequisite for the @code{<@var{set}>} phony rule.

This module gives us the responsibility to define appropriate values for
the following variables:

@example
<@var{IDENTIFIER}>_TARGETS
@end example

@noindent
see below for details.
@end deffn


@deffn {Makefile Section} ds-module-clean-rules @var{identifier} @var{set}
Define the @code{<@var{identifier}>-clean} and
@code{<@var{identifier}>-mostlyclean} phony rules and make them
prerequisites for the @code{<@var{set}>-clean} and
@code{<@var{set}>-mostlyclean} phony rules, respectively.

This module gives us the responsibility to define appropriate values for
the following variables:

@example
<@var{IDENTIFIER}>_CLEANFILES
<@var{IDENTIFIER}>_MOSTLYCLEANFILES
@end example

@noindent
see below for details.
@end deffn


@deffn {Makefile Section} ds-module-install-rules @var{identifier} @var{set}
@deffnx {Makefile Section} ds-module-install-rules @var{identifier} @var{set} @var{install-mode}
Define the installation, uninstallation, layout and uninstall script
rules.  See below for details.

This module gives us the responsibility to define appropriate values for
the following variables:

@example
<@var{IDENTIFIER}>_INSTLST
<@var{IDENTIFIER}>_INSTDIR
@end example

@noindent
see below for details.
@end deffn


@deffn {Makefile Section} ds-module-no-install @var{identifier} @var{set}
Define all the rules needed to drive a transformation module that does
@strong{not} install output files.  This section embeds the following
sections:

@example
ds-module-all-rule
ds-module-clean-rules
@end example
@end deffn


@deffn {Makefile Section} ds-module @var{identifier} @var{set}
@deffnx {Makefile Section} ds-module @var{identifier} @var{set} @var{install-mode}
Define all the rules needed to drive a transformation module that
installs output files.  This section embeds the following sections:

@example
ds-module-no-install
ds-module-install-rules
@end example
@end deffn


@deffn {Makefile Section} ds-module-with-defaults @var{identifier} @var{set} @var{install-mode} @var{install-directory}
Define a transformer module with default clean and install variables.
This section embeds the following sections:

@example
ds-default-clean-variables
ds-default-install-variables
ds-module
@end example
@end deffn

@c ------------------------------------------------------------

@subsubheading Building rules

@table @code
@item <IDENTIFIER>-all
Rebuild the module targets; the list of targets for this module must be
stored in the variable @code{<IDENTIFIER>_TARGETS}.  This rule is
registered as prerequisite of @code{<SET>}.

@item <IDENTIFIER>-mostlyclean
Remove the files and directories listed in the variable
@code{<IDENTIFIER>_MOSTLYCLEANFILES}.  This rule is registered as
prerequisite of @code{<SET>-mostlyclean}.

@item <IDENTIFIER>-clean
Remove the files and directories listed in the variable
@code{<IDENTIFIER>_CLEANFILES}.  This rule is registered as prerequisite
of @code{<SET>-clean}.
@end table

@c ------------------------------------------------------------

@subsubheading Install rules

@table @code
@item <IDENTIFIER>-install
Run the rules:

@example
<@var{identifier}>-install-pre
<@var{identifier}>-install-body
<@var{identifier}>-install-post
@end example

@noindent
in this order.  This rule is registered as prerequisite of
@code{<SET>-install}.

@item <IDENTIFIER>-install-pre
Empty rule we can customise at will.

@item <IDENTIFIER>-install-body
Apply @func{ds-install-module} to @var{identifier} and
@var{install-mode}, or @code{DATA} if @var{install-mode} is not used.

@item <IDENTIFIER>-install-post
Empty rule we can customise at will.
@end table

@c ------------------------------------------------------------

@subsubheading Uninstall rules

@table @code
@item <IDENTIFIER>-uninstall
Run the rules:

@example
<@var{identifier}>-uninstall-pre
<@var{identifier}>-uninstall-body
<@var{identifier}>-uninstall-post
@end example

@noindent
in this order.  This rule is registered as prerequisite of
@code{<SET>-uninstall}.

@item <IDENTIFIER>-uninstall-pre
Empty rule we can customise at will.

@item <IDENTIFIER>-uninstall-body
Apply @func{ds-uninstall-module} to @var{identifier}.

@item <IDENTIFIER>-uninstall-post
Empty rule we can customise at will.
@end table

@c ------------------------------------------------------------

@subsubheading Installation layout

@table @code
@item <IDENTIFIER>-print-install-files-layout
Run the following rules:

@example
<IDENTIFIER>-print-install-files-layout-pre
<IDENTIFIER>-print-install-files-layout-body
<IDENTIFIER>-print-install-files-layout-post
@end example

@noindent
in this order.  This rule is registered as prerequisite of
@code{<SET>-print-install-files-layout}.

@item <IDENTIFIER>-print-install-files-layout-pre
Empty rule we can customise at will.

@item <IDENTIFIER>-print-install-files-layout-body
Print installed files layout: apply @func{ds-print-files-layout}
to @var{identifier}.

@item <IDENTIFIER>-print-install-files-layout-post
Empty rule we can customise at will.

@item <IDENTIFIER>-print-install-dirs-layout
Run the following rules:

@example
<IDENTIFIER>-print-install-dirs-layout-pre
<IDENTIFIER>-print-install-dirs-layout-body
<IDENTIFIER>-print-install-dirs-layout-post
@end example

@noindent
in this order.  This rule is registered as prerequisite of
@code{<SET>-print-install-dirs-layout}.

@item <IDENTIFIER>-print-install-dirs-layout-pre
Empty rule we can customise at will.

@item <IDENTIFIER>-print-install-dirs-layout-body
Print installed directories layout: apply
@func{ds-print-dirs-layout} to @var{identifier}.

@item <IDENTIFIER>-print-install-dirs-layout-post
Empty rule we can customise at will.

@item <IDENTIFIER>-print-install-layout
Run the following rules:

@example
<IDENTIFIER>-print-install-layout-pre
<IDENTIFIER>-print-install-layout-body
<IDENTIFIER>-print-install-layout-post
@end example

@noindent
in this order.  This rule is registered as prerequisite of
@code{<SET>-print-install-layout}.

@item <IDENTIFIER>-print-install-layout-pre
Run the following rules:

@example
<IDENTIFIER>-print-install-dirs-layout-pre
<IDENTIFIER>-print-install-files-layout-pre
@end example

@noindent
in this order.

@item <IDENTIFIER>-print-install-layout-body
Run the following rules:

@example
<IDENTIFIER>-print-install-dirs-layout-body
<IDENTIFIER>-print-install-files-layout-body
@end example

@noindent
in this order.

@item <IDENTIFIER>-print-install-layout-post
Run the following rules:

@example
<IDENTIFIER>-print-install-dirs-layout-post
<IDENTIFIER>-print-install-files-layout-post
@end example

@noindent
in this order.
@end table

@c ------------------------------------------------------------

@subsubheading Uninstall script rules

@table @code
@item <IDENTIFIER>-print-uninstall-files-script
Run the following rules:

@example
<IDENTIFIER>-print-uninstall-files-script-pre
<IDENTIFIER>-print-uninstall-files-script-body
<IDENTIFIER>-print-uninstall-files-script-post
@end example

@noindent
in this order.  This rule is registered as prerequisite of
@code{<SET>-print-uninstall-files-script}.

@item <IDENTIFIER>-print-uninstall-files-script-pre
Empty rule we can customise at will.

@item <IDENTIFIER>-print-uninstall-files-script-body
Print a script to uninstall files: apply
@func{ds-print-uninstall-files-script} to @var{identifier}.

@item <IDENTIFIER>-print-uninstall-files-script-post
Empty rule we can customise at will.

@item <IDENTIFIER>-print-uninstall-dirs-script
Run the following rules:

@example
<IDENTIFIER>-print-uninstall-dirs-script-pre
<IDENTIFIER>-print-uninstall-dirs-script-body
<IDENTIFIER>-print-uninstall-dirs-script-post
@end example

@noindent
in this order.  This rule is registered as prerequisite of
@code{<SET>-print-uninstall-dirs-script}.

@item <IDENTIFIER>-print-uninstall-dirs-script-pre
Empty rule we can customise at will.

@item <IDENTIFIER>-print-uninstall-dirs-script-body
Print a script to uninstall directories: apply
@func{ds-print-uninstall-dirs-script} to @var{identifier}.

@item <IDENTIFIER>-print-uninstall-dirs-script-post
Empty rule we can customise at will.


@item <IDENTIFIER>-print-uninstall-script
Run the following rules:

@example
<IDENTIFIER>-print-uninstall-script-pre
<IDENTIFIER>-print-uninstall-script-body
<IDENTIFIER>-print-uninstall-script-post
@end example

@noindent
in this order.  This rule is registered as prerequisite of
@code{<SET>-print-uninstall-script}.

@item <IDENTIFIER>-print-uninstall-script-pre
Run the following rules:

@example
<IDENTIFIER>-print-uninstall-files-script-pre
<IDENTIFIER>-print-uninstall-dirs-script-pre
@end example

@noindent
in this order.

@item <IDENTIFIER>-print-uninstall-script-body
Run the following rules:

@example
<IDENTIFIER>-print-uninstall-files-script-body
<IDENTIFIER>-print-uninstall-dirs-script-body
@end example

@noindent
in this order.

@item <IDENTIFIER>-print-uninstall-script-post
Run the following rules:

@example
<IDENTIFIER>-print-uninstall-files-script-post
<IDENTIFIER>-print-uninstall-dirs-script-post
@end example

@noindent
in this order.
@end table

@c page
@node make transformers clean
@subsection Removing target files


In the following the @var{identifier} argument is meant to be a module
identifier used when defining a module with @func{ds-module}; this
is not mandatory, though.


@deffn {Makefile Function} ds-mostlyclean-files @var{identifier}
Remove all the items listed in the variable
@code{<IDENTIFIER>_MOSTLYCLEANFILES}.  The shell command uses
@code{$(RM)}, so both files and directories can be removed.

Usage example:

@example
mine_MOSTLYCLEANFILES = a b c

.PHONY: mine-mostlyclean

mine-mostlyclean: ; -@@$(call ds-mostlyclean-files,mine)
@end example
@end deffn


@deffn {Makefile Function} ds-clean-files @var{identifier}
Remove all the items listed in the variable
@code{<IDENTIFIER>_CLEANFILES}.  The shell command uses @code{$(RM)}, so
both files and directories can be removed.

Usage example:

@example
mine_MOSTLYCLEANFILES = a b c
mine_CLEANFILES       = d e f $(mine_MOSTLYCLEANFILES)

.PHONY: mine-clean

mine-clean: ; -@@$(call ds-clean-files,mine)
@end example
@end deffn


@deffn {Makefile Section} ds-default-clean-variables @var{identifier}
Add variables needed to clean the targets of a module that creates only
ordinary output files.  The following is added to the make file:

@example
<IDENTIFIER>_MOSTLYCLEANFILES += $(<IDENTIFIER>_TARGETS)
<IDENTIFIER>_CLEANFILES += $(<IDENTIFIER>_MOSTLYCLEANFILES)
@end example

@noindent
so we see that the list of ordinary targets to clean must be stored in a
variable named @code{<IDENTIFIER>_TARGETS}.  The use of the @code{+=}
assignment operator allows us to predefine the variables and add the
defaults to the preset values.

Usage example:

@example
mine_TARGETS    = a b c

$(eval $(call ds-default-clean-variables,mine))
@end example

@noindent
usage example with preset values:

@example
mine_TARGETS    = a b c
mine_CLEANFILES = d e f

$(eval $(call ds-default-clean-variables,mine))
@end example

@noindent
@code{mine_CLEANFILES} equals @code{d e f a b c}.
@end deffn

@c page
@node make transformers install
@subsection Module installation code sections and functions


This section describes makefile functions and sections that can be used
to automate installation, uninstallation and installation inspection of
makefile modules.  Some of these are used by @func{ds-module}.

@menu
* make transformers install funcs::     Installing files and directories.
* make transformers install install::   Installing module's files and
                                        directories.
* make transformers install uninstall:: Uninstalling a module's files
                                        and directories.
* make transformers install layout::    Inspecting module's installation
                                        layout.
* make transformers install scripts::   Producing uninstall scripts.
@end menu

@c page
@node make transformers install funcs
@subsubsection Installing files and directories


In the following the @var{identifier} parameter is always a module's
identifier.


@deffn {Makefile Function} ds-install-directory @var{identifier}
Use the @code{$(INSTALL)} command to install a module's installation
directory:

@itemize
@item
the directory pathname is taken from the variable
@code{<IDENTIFIER>_INSTDIR};

@item
the installation mode is taken from the variable
@code{<IDENTIFIER>_DMODE} and, if that is the empty string, defaults to
the value in the variable @code{INSTALL_DIR_MODE};

@item
the installed directory owner is taken from the variable
@code{<IDENTIFIER>_OWNER} and left unset if that is the empty string;

@item
the installed directory group is taken from the variable
@code{<IDENTIFIER>_GROUP} and left unset if that is the empty string;

@item
the directory pathname is prefixed with the value of the variable
@code{DESTDIR}.
@end itemize

Examples:

@itemize
@item
install the directory @code{$(DESTDIR)$(mine_INSTDIR)} with mode
@code{INSTALL_DIR_MODE}:

@example
$(call ds-install-directory,mine)
@end example

@item
install the directory @code{$(DESTDIR)$(mine_INSTDIR)} with mode
@code{0700} and owner and group set to @code{root}:

@example
$(eval $(call ds-permissions,mine,root,root,0700,0600))
$(call ds-install-directory,mine)
@end example
@end itemize
@end deffn

@c ------------------------------------------------------------

@deffn {Makefile Function} ds-install-files @var{identifier} @var{mode}
Use the @code{$(INSTALL)} command to install a module's generated files:

@itemize
@item
the destination directory pathname is taken from the variable
@code{<IDENTIFIER>_INSTDIR};

@item
the list of files to install is taken from the variable
@code{<IDENTIFIER>_INSTLST};

@item
the file installation mode is taken from the variable
@code{<IDENTIFIER>_FMODE} and, if that is the empty string, defaults to
the value in the variable @code{INSTALL_<MODE>_MODE}; @var{mode} must be
one among: @code{BIN}, @code{DATA}, @code{LIB};

@item
the installed files owner is taken from the variable
@code{<IDENTIFIER>_OWNER} and left unset if that is the empty string;

@item
the installed files group is taken from the variable
@code{<IDENTIFIER>_GROUP} and left unset if that is the empty string;

@item
the installation directory pathname is prefixed with the value of the
variable @code{DESTDIR}.
@end itemize

Examples:

@itemize
@item
install the files @file{$(srcdir)/src/one.txt} and
@file{$(srcdir)/src/two.txt} in the directory
@code{$(DESTDIR)$(pkgdatadir)} with mode @code{INSTALL_DATA_MODE}:

@example
$(eval $(call ds-srcdir,mine))

mine_INSTLST    = $(call ds-glob,mine,one.txt two.txt)
mine_INSTDIR    = $(pkgdatadir)

$(call ds-install-directory,mine)
$(call ds-install-files,mine,DATA)
@end example

@item
like the above but select the file permissions and owners:

@example
$(eval $(call ds-srcdir,mine))

$(eval $(call ds-permissions,mine,root,root,0700,0600))
mine_INSTLST    = $(call ds-glob,mine,one.txt two.txt)
mine_INSTDIR    = $(pkgdatadir)

$(call ds-install-directory,mine)
$(call ds-install-files,mine,DATA)
@end example
@end itemize
@end deffn


@deffn {Makefile Section} ds-permissions @var{identifier} @var{owner} @var{group} @var{file_mode} @var{dir_mode}
Expands to the following:

@example
<IDENTIFIER>_OWNER      = @var{owner}
<IDENTIFIER>_GROUP      = @var{group}
<IDENTIFIER>_FMODE      = @var{file_mode}
<IDENTIFIER>_DMODE      = @var{dir_mode}
@end example

@noindent
the variables are meant to override the default values in other
functions like @func{ds-install-directory} and @func{ds-install-files}.

To use this function evaluate:

@example
$(eval $(call ds-permissions,@var{identifier},\
   @var{owner},@var{group},@var{file_mode},@var{dir_mode}))
@end example
@end deffn

@c page
@node make transformers install install
@subsubsection Installing module's generated files


In the following the @var{identifier} parameter is always a module's
identifier.


@deffn {Makefile Function} ds-install-module @var{identifier} @var{mode}
Install the output files of a module: invoke both
@func{ds-install-directory} and @func{ds-install-files} using
the supplied arguments.
@end deffn


@deffn {Makefile Function} ds-install-bin @var{identifier}
@deffnx {Makefile Function} ds-install-data @var{identifier}
@deffnx {Makefile Function} ds-install-lib @var{identifier}
These are wrappers for @func{ds-install-module} that set the
@var{mode} parameter to @code{BIN}, @code{DATA} or @code{LIB}.
@end deffn


@deffn {Makefile Section} ds-default-install-variables @var{identifier} @var{directory}
Define the variables needed to install a module and initialise them with
usual values.  For example:

@example
$(eval $(call
   ds-default-install-variables,mine,$(pkgdatadir)))
@end example

@noindent
expands to:

@example
mine_INSTLST	= $(mine_TARGETS)
mine_INSTDIR	= $(pkgdatadir)
@end example
@end deffn

@c page
@node make transformers install uninstall
@subsubsection Uninstalling a module's files and directories


In the following the @var{identifier} parameter is always a module's
identifier.  Notice that the following functions make use of the
variable @code{DESTDIR}.


@deffn {Makefile Function} ds-uninstall-files @var{identifier}
Uninstall a module's output files using @code{$(RM_FILE)}.  The
installation directory is taken from the variable
@code{<IDENTIFIER>_INSTDIR} and prefixed with @code{$(DESTDIR)}; the
list of files is taken from the variable @code{<IDENTIFIER>_INSTLST}.

Usage example:

@example
mine_INSTLST    = a b c
mine_INSTDIR    = $(pkgdatadir)

mine-uninstall-files: ; $(call ds-uninstall-files,mine)
@end example
@end deffn


@deffn {Makefile Function} ds-uninstall-directory @var{identifier}
Uninstall a module's install directory using @code{$(RMDIR)}.  The
installation directory is taken from the variable
@code{<IDENTIFIER>_INSTDIR} and prefixed with @code{$(DESTDIR)}.

Usage example:

@example
mine_INSTDIR    = $(pkgdatadir)

mine-uninstall-dirs: ; $(call ds-uninstall-directory,mine)
@end example
@end deffn


@deffn {Makefile Function} ds-uninstall-module @var{identifier}
Uninstall both a module's files and directory.  Apply both
@func{ds-uninstall-files} and @func{ds-uninstall-directory} to
@var{identifier}.
@end deffn

@c page
@node make transformers install layout
@subsubsection Inspecting module's installation layout


In the following the @var{identifier} parameter is always a module's
identifier.  Notice that the following functions will ignore the
variable @code{DESTDIR}.


@deffn {Makefile Function} ds-print-files-layout @var{identifier}
Print to stdout the installation layout of files, one file pathname per
line.  The installation directory is taken from the variable
@code{<IDENTIFIER>_INSTDIR} and the list of files is taken from the
variable @code{<IDENTIFIER>_INSTLST}.

Usage example:

@example
mine_INSTLST    = a b c
mine_INSTDIR    = $(pkgdatadir)

mine-print-files: ; $(call ds-print-files-layout,mine)
@end example
@end deffn


@deffn {Makefile Function} ds-print-dirs-layout @var{identifier}
Print to stdout the installation layout of directories, one directory
pathname per line.  The installation directory is taken from the
variable @code{<IDENTIFIER>_INSTDIR}.

Usage example:

@example
mine_INSTDIR    = $(pkgdatadir)

mine-print-dirs: ; $(call ds-print-dirs-layout,mine)
@end example
@end deffn


@deffn {Makefile Function} ds-print-layout @var{identifier}
Print to stdout the installation layout of files and directories.  Apply
both @func{ds-print-files-layout} and
@func{ds-print-dirs-layout} to @var{identifier}.
@end deffn

@c page
@node make transformers install scripts
@subsubsection Producing uninstall scripts


In the following the @var{identifier} parameter is always a module's
identifier.  Notice that the following functions will ignore the
variable @code{DESTDIR}.


@deffn {Makefile Function} ds-print-uninstall-files-script @var{identifier}
Print to stdout a script that uninstalls a module's output files.  The
installation directory is taken from the variable
@code{<IDENTIFIER>_INSTDIR} and the list of files is taken from the
variable @code{<IDENTIFIER>_INSTLST}.
@end deffn


@deffn {Makefile Function} ds-print-uninstall-dirs-script @var{identifier}
Print to stdout a script that uninstalls a module's install directory.
The installation directory is taken from the variable
@code{<IDENTIFIER>_INSTDIR}.
@end deffn


@deffn {Makefile Function} ds-print-uninstall-script @var{identifier}
Print to stdout the uninstall script for both files and directories.
Apply both @func{ds-print-uninstall-files-script} and
@func{ds-print-uninstall-dirs-script} to @var{identifier}.
@end deffn

@c page
@node make dist
@section Source and binary distributions


@menu
* make dist variables::         Packaging variables.
* make dist source::            Source distribution.
* make dist binary::            Binary distribution.
* make dist slackware::         Slackware packaging.
@end menu


@c page
@node make dist variables
@subsection Packaging variables


The following variables are always included in the makefile.  Most of
the variables are used to build the file names for the distribution
archives; typically, an archive name looks like this:

@example
develstuff-5.0.1-i686-1mm
@end example

@noindent
where: @code{develstuff} is the package name portion, @code{5.0.1} is
the version number portion, @code{i686} is the architecture name
portion, @code{1mm} is the build version portion.


@defvr {Makefile Variable} ds_archive_NAME
The package name portion of the distribution archive names; defaults to
@code{$(PACKAGE_NAME)}.
@end defvr


@defvr {Makefile Variable} ds_archive_VERSION
The package version portion of the distribution archive names; defaults
to @code{$(PACKAGE_VERSION)}.
@end defvr


@defvr {Makefile Variable} ds_archive_BUILD_VERSION
@defvrx {Environment Variable} BUILD_VERSION
Select the build version portion of the distribution archive names.  If
@env{BUILD_VERSION} is set on the command line of @command{make}, its
value is used; else the value is @code{1mm}, which means ``build 1 by
Marco Maggi''.

This value is meant to be customised.
@end defvr


@defvr {Makefile Variable} ds_archive_ARCH
@defvrx {Environment Variable} ARCHIVE_ARCH
Select the architecture name portion of the distribution archive names.
If @env{ARCHIVE_ARCH} is set on the command line of @command{make}, its
value is used; else the value is the result of:

@example
$(firstword \
 $(subst -, ,$(shell $(infrastructuredir)/config.guess)))
@end example

@noindent
for example when the output of @command{config.guess} is:

@example
i686-pc-linux-gnu
@end example

@noindent
the value of the variable is @code{i686}.
@end defvr


@defvr {Makefile Variable} ds_archive_NAMETAIL
Set to the concatenation of @code{$(ds_archive_VERSION)},
@code{$(ds_archive_ARCH)} and @code{$(ds_archive_BUILD_VERSION)} using
@code{-} as separator.
@end defvr


@defvr {Makefile Variable} ds_archive_bin_PREFIX
Set to:

@example
$(ds_archive_NAME)-$(ds_archive_NAMETAIL)
@end example
@end defvr


@defvr {Makefile Variable} ds_archive_doc_PREFIX
Set to:

@example
$(ds_archive_NAME)-doc-$(ds_archive_NAMETAIL)
@end example
@end defvr


@defvr {Makefile Variable} ds_archive_dev_PREFIX
Set to:

@example
$(ds_archive_NAME)-dev-$(ds_archive_NAMETAIL)
@end example
@end defvr


@defvr {Makefile Variable} ds_archive_full_PREFIX
Set to:

@example
$(ds_archive_NAME)-full-$(ds_archive_NAMETAIL)
@end example
@end defvr


@defvr {Makefile Variable} ds_archive_SUDO
If the configuration variable @code{ds_config_USE_SUDO} is set to
@code{yes} this variable is set to @code{$(SUDO)}; else it is set to the
empty string.

This variable is used in some packaging commands which are meant to
install files with @code{root} as owner and group.  Most notably it is
used by the Slackware packaging rules.
@end defvr

@c page
@node make dist source
@subsection Source distribution


A single source distribution archives can be built; all the files in the
source tree are collected, with the exception of a list of files that is
identified through patterns given to @gnu{} tar.

If the makefile variable @code{ds_include_SOURCE_DISTRIBUTION} is set to
@code{yes}: the makefile section @code{ds-source-distribution} is
automatically evaluated in the makefile library.


@deffn {Makefile Section} ds-source-distribution
Include targets and rules to build the source distribution archives.  To
be evaluated as:

@example
$(eval $(call ds-source-distribution))
@end example

This module is included by @func{ds-full-tail}.
@end deffn


@subsubheading Phony rules


@deffn {Makefile Rule} dist
Build a source distribution archive.  To be invoked as:

@example
$ make dist
@end example
@end deffn


@subsubheading Variables


@defvr {Makefile Variable} ds_dist_ARCHIVE
The file name of the source distribution archive; defaults to:

@example
$(PKG_ID)-src.tar.$(ds_COMPRESSOR_EXT)
@end example
@end defvr


@defvr {Makefile Variable} ds_dist_TMPDIR
The package--specific temporary directory in which the files are
installed to build a source distribution archive; defaults to:

@example
$(TMPDIR)/$(PKG_ID)
@end example
@end defvr


@defvr {Makefile Variable} ds_dist_DESTDIR
The directory pathname in which the source distribution archive will be
stored; defaults to:

@example
$(builddir)/dist.d
@end example
@end defvr

@c page
@node make dist binary
@subsection Binary distribution


Binary distribution archives can be separately built for the @code{bin},
@code{doc} and @code{dev} sections.  Additionally a full binary
distribution archive can be built, including all the enabled sections.

If the makefile variable @code{ds_include_BINARY_DISTRIBUTION} is set to
@code{yes}: the makefile section @code{ds-binary-distribution} is
automatically evaluated in the makefile library.


@deffn {Makefile Section} ds-binary-distribution
Include targets and rules to build the binary distribution archives.  To
be evaluated as:

@example
$(eval $(call ds-binary-distribution))
@end example

This module is included by @func{ds-full-tail}.
@end deffn


@menu
* make dist binary rules::      Phony rules.
* make dist binary variables::  Variables.
* make dist binary functions::  Auxiliary functions.
@end menu

@c page
@node make dist binary rules
@subsubsection Phony rules


@subsubheading Building


@deffn {Make Rule} bindist
Build the binary distribution archives for all the enabled makefile
sections.  To be invoked as:

@example
$ make bindist
@end example
@end deffn


@deffn {Make Rule} bindist-bin
@deffnx {Make Rule} bindist-doc
@deffnx {Make Rule} bindist-dev
Build the binary distribution archive for the selected makefile section.
To be invoked as:

@example
$ make bindist-bin
$ make bindist-doc
$ make bindist-dev
@end example
@end deffn


@deffn {Make Rule} bindist-full
Build a single binary distribution archive including all the files of
the enabled makefile sections.  To be invoked as:

@example
$ make bindist-full
@end example
@end deffn


@subsubheading Installing


Installing a binary distribution archive means:

@enumerate
@item
change the current directory to the root directory (@file{/});

@item
invoke @gnu{} tar (that is: @code{$(TAR)}) to unpack the archive;
@end enumerate

@noindent
we must inspect the source code to see which flags are handed to
@command{tar}.


@deffn {Make Rule} bindist-install
Install the binary distribution archives for all the enabled makefile
sections.  To be invoked as:

@example
$ make bindist-install
@end example
@end deffn


@deffn {Make Rule} bindist-install-bin
@deffnx {Make Rule} bindist-install-doc
@deffnx {Make Rule} bindist-install-dev
Install the binary distribution archive for the selected makefile
section.  To be invoked as:

@example
$ make bindist-install-bin
$ make bindist-install-doc
$ make bindist-install-dev
@end example
@end deffn


@deffn {Make Rule} bindist-install-full
Install the single binary distribution archive including all the files
of the enabled makefile sections.  To be invoked as:

@example
$ make bindist-install-full
@end example
@end deffn


@c page
@node make dist binary variables
@subsubsection Variables


@defvr {Makefile Variable} ds_bindist_bin_ARCHIVE
The file name of the @code{bin} section archive; defaults to:

@example
$(ds_archive_bin_PREFIX).tar.$(ds_COMPRESSOR_EXT)
@end example
@end defvr


@defvr {Makefile Variable} ds_bindist_doc_ARCHIVE
The file name of the @code{doc} section archive; defaults to:

@example
$(ds_archive_doc_PREFIX).tar.$(ds_COMPRESSOR_EXT)
@end example
@end defvr


@defvr {Makefile Variable} ds_bindist_dev_ARCHIVE
The file name of the @code{dev} section archive; defaults to:

@example
$(ds_archive_dev_PREFIX).tar.$(ds_COMPRESSOR_EXT)
@end example
@end defvr


@defvr {Makefile Variable} ds_bindist_full_ARCHIVE
The file name of the full distribution archive; defaults to:

@example
$(ds_archive_full_PREFIX).tar.$(ds_COMPRESSOR_EXT)
@end example
@end defvr


@defvr {Makefile Variable} ds_bindist_TMPDIR
The package--specific temporary directory in which the files are
installed to build a binary distribution archive; defaults to:

@example
$(TMPDIR)/$(PKG_ID)
@end example
@end defvr


@defvr {Makefile Variable} ds_bindist_DESTDIR
The directory pathname in which the binary distribution archives will be
stored; defaults to:

@example
$(builddir)/bindist.d
@end example
@end defvr

@c page
@node make dist binary functions
@subsubsection Auxiliary functions


@deffn {Makefile Function} ds-bindist-make-package @var{install_rules} @var{archive_name}
Invoke @var{install_rules} and build an archive whose name is
@var{archive_name}.  The rules are meant to install files and are
invoked as:

@example
$(MAKE) @var{install_rules} DESTDIR=$(ds_bindist_TMPDIR)
@end example

The archive is created with @gnu{} tar (that is: @code{$(TAR)}) and
contains everything under @code{$(ds_bindist_DESTDIR)}.

For example the @code{bindist-bin} rule can be implemented as:

@example
bindist-bin:
        $(call ds-bindist-make-package,\
               bin-install,$(ds_bindist_bin_ARCHIVE))
@end example

@noindent
while the @code{bindist-full} rule can be implemented as:

@example
bindist-full:
        $(call ds-bindist-make-package,\
                $(addsuffix -install,$(ds_RULESETS)),\
                $(ds_bindist_full_ARCHIVE))
@end example
@end deffn


@deffn {Makefile Function} ds-bindist-install @var{archive_name}
Install a binary distribution archive.  The pathname of the archive file
is built with:

@example
$(ds_bindist_DESTDIR)/@var{archive_name}
@end example
@end deffn

@c page
@node make dist slackware
@subsection Slackware packaging


Slackware packages can be separately built for the @code{bin},
@code{doc} and @code{dev} sections.  Additionally a full Slackware
distribution archive can be built, including all the enabled sections.

If the makefile variable @code{ds_include_SLACKWARE_DISTRIBUTION} is set
to @code{yes}: the makefile section @code{ds-slackware-distribution} is
automatically evaluated in the makefile library.


@deffn {Makefile Section} ds-slackware-distribution
Include targets and rules to build the slackware distribution archives.  To
be evaluated as:

@example
$(eval $(call ds-slackware-distribution))
@end example

This module is included by @func{ds-full-tail}.
@end deffn


@menu
* make dist slackware dirs::            Build directories.
* make dist slackware standard::        Standard packages.
* make dist slackware local::           Local packages.
* make dist slackware aux::             Auxiliary rules.
* make dist slackware variables::       Variables.
* make dist slackware functions::       Auxiliary functions.
@end menu

@c page
@node make dist slackware dirs
@subsubsection Build directories


@deffn {Makefile Rule} slackware-builddir
Create the build directory in which the archive files file be stored.
@end deffn


@deffn {Makefile Rule} slackware-top-builddir
Create the build directory in which the package files will be
temporarily installed to build the archive files.
@end deffn


@deffn {Makefile Rule} slackware-clean-builddir
Remove all the contents of the archive files directory.
@end deffn


@deffn {Makefile Rule} slackware-clean-top-builddir
Remove all the contents of the temporary installation directory.
@end deffn


@deffn {Makefile Rule} slackware-clean
Invokes both @code{slackware-clean-builddir} and
@code{slackware-clean-top-builddir}.
@end deffn


@c page
@node make dist slackware standard
@subsubsection Standard packages


A standard Slackware package is very similar to a package that comes
with the Slackware distribution itself.  The registry of the packages is
@file{/var/log/packages} and the archive holds the file and directory
pathnames relative to the root directorym, @file{/}.


@deffn {Makefile Rule} slackware
Build the Slackware package archives for all the enabled makefile
sections.  Makes use of @command{makepkg}.
@end deffn


@deffn {Makefile Rule} slackware-install
Install the Slackware packages for all the enabled makefile sections.
Makes use of @command{installpkg}.
@end deffn


@deffn {Makefile Rule} slackware-remove
Remove the Slackware packages for all the enabled makefile sections.
Makes use of @command{removepkg}.
@end deffn


@deffn {Makefile Rule} slackware-upgrade
Upgrade the Slackware packages for all the enabled makefile sections.
This rule removes installed Slackware packages and installs the new ones
using @command{upgradepkg}.

The package to remove is selected by the function
@func{ds-slackware-get-installed-package}.  We have to be careful in
using this rule and remember that we can try a dry run to see what will
happen:

@example
$ make slackware-upgrade -n
@end example
@end deffn


@subsubheading Auxiliary rules


@deffn {Makefile Rule} slackware-make-bin
@deffnx {Makefile Rule} slackware-make-doc
@deffnx {Makefile Rule} slackware-make-dev
Build the package for the selected makefile section.
@end deffn


@deffn {Makefile Rule} slackware-install-bin
@deffnx {Makefile Rule} slackware-install-doc
@deffnx {Makefile Rule} slackware-install-dev
Install the package for the selected makefile section.
@end deffn


@deffn {Makefile Rule} slackware-remove-bin
@deffnx {Makefile Rule} slackware-remove-doc
@deffnx {Makefile Rule} slackware-remove-dev
Remove the package for the selected makefile section.
@end deffn


@deffn {Makefile Rule} slackware-upgrade-bin
@deffnx {Makefile Rule} slackware-upgrade-doc
@deffnx {Makefile Rule} slackware-upgrade-dev
Upgrade the package for the selected makefile section.  See the
description of the @code{slackware-upgrade} rule for details.
@end deffn

@c page
@node make dist slackware local
@subsubsection Local packages


A local Slackware package differs from a standard package in two ways:

@enumerate
@item
The registry of the packages is @code{$(prefix)/var/log/packages}.

@item
The archive holds the file and directory pathnames relative to the
installation prefix, @code{$(prefix)}.
@end enumerate

The registry is selected by setting:

@example
ROOT=$(prefix)
@end example

@noindent
in the system environment when running the Slackware packaging tools.


@deffn {Makefile Rule} local-slackware
Build the Slackware package archives for all the enabled makefile
sections.  Makes use of @command{makepkg}.
@end deffn


@deffn {Makefile Rule} local-slackware-install
Install the Slackware packages for all the enabled makefile sections.
Makes use of @command{installpkg}.
@end deffn


@deffn {Makefile Rule} local-slackware-remove
Remove the Slackware packages for all the enabled makefile sections.
Makes use of @command{removepkg}.
@end deffn


@deffn {Makefile Rule} local-slackware-upgrade
Upgrade the Slackware packages for all the enabled makefile sections.
This rule removes installed Slackware packages and installs the new ones
using @command{upgradepkg}.

The package to remove is selected by the function
@func{ds-slackware-get-installed-package}.  We have to be careful in
using this rule and remember that we can try a dry run to see what will
happen:

@example
$ make local-slackware-upgrade -n
@end example
@end deffn


@subsubheading Auxiliary rules


@deffn {Makefile Rule} local-slackware-make-bin
@deffnx {Makefile Rule} local-slackware-make-doc
@deffnx {Makefile Rule} local-slackware-make-dev
Build the package for the selected makefile section.
@end deffn


@deffn {Makefile Rule} local-slackware-install-bin
@deffnx {Makefile Rule} local-slackware-install-doc
@deffnx {Makefile Rule} local-slackware-install-dev
Install the package for the selected makefile section.
@end deffn


@deffn {Makefile Rule} local-slackware-remove-bin
@deffnx {Makefile Rule} local-slackware-remove-doc
@deffnx {Makefile Rule} local-slackware-remove-dev
Remove the package for the selected makefile section.
@end deffn


@deffn {Makefile Rule} local-slackware-upgrade-bin
@deffnx {Makefile Rule} local-slackware-upgrade-doc
@deffnx {Makefile Rule} local-slackware-upgrade-dev
Upgrade the package for the selected makefile section.  See the
description of the @code{local-slackware-upgrade} rule for details.
@end deffn


@c page
@node make dist slackware aux
@subsubsection Auxiliary rules


@deffn {Makefile Rule} slackware-aux-bin
@deffnx {Makefile Rule} slackware-aux-doc
@deffnx {Makefile Rule} slackware-aux-dev
This rule is invoked when building the selected makefile section
package: after the files have been installed in the temporary location,
after the @file{slack-desc} file has been created, and before the
invocation of @command{makepkg}.

The rule is empty and we can define it to do whatever to the installed
files.
@end deffn

@c page
@node make dist slackware variables
@subsubsection Variables


@defvr {Makefile Variable} ds_slackware_bin_PACKAGE_NAME
@defvrx {Makefile Variable} ds_slackware_doc_PACKAGE_NAME
@defvrx {Makefile Variable} ds_slackware_dev_PACKAGE_NAME
The names of the makefile sections package files; the default values
are:

@example
$(ds_archive_bin_PREFIX).tgz
$(ds_archive_doc_PREFIX).tgz
$(ds_archive_dev_PREFIX).tgz
@end example
@end defvr


@defvr {Makefile Variable} ds_slackware_PACKAGE_TOP_BUILDDIR
The pathname of the directory in which the files will be temporarily
installed to build the package; it is set to:

@example
$(TMPDIR)/$(PKG_ID)
@end example
@end defvr


@defvr {Makefile Variable} ds_slackware_PACKAGE_BUILDDIR
The pathname of the package root directory under the temporary
installation tree; everything under this directory is included in the
package.  When building a standard package it is set to:

@example
$(ds_slackware_PACKAGE_TOP_BUILDDIR)
@end example

@noindent
while when building a local package is is set to:

@example
$(ds_slackware_PACKAGE_TOP_BUILDDIR)/$(prefix)
@end example
@end defvr


@defvr {Makefile Variable} ds_slackware_BUILDDIR
The pathname of the directory in which the package files will be stored;
defaults to:

@example
$(abspath $(builddir)/slackware.d)
@end example
@end defvr


@defvr {Makefile Variable} ds_slackware_REGISTRY_DIR
The pathname of the Slackware package registry; it is set to:

@example
/var/log/packages
@end example
@end defvr


@defvr {Makefile Variable} ds_slackware_REGISTRY
The pathname of the Slackware package registry in which to look for
already installed packages; it is used when upgrading an installed
package.  When acting upon a standard package it is set to:

@example
$(ds_slackware_REGISTRY_DIR)
@end example

@noindent
while when acting upon a local package it is set to:

@example
$(prefix)$(ds_slackware_REGISTRY_DIR)
@end example
@end defvr


@defvr {Makefile Variable} ds_slackware_ENV
Holds the system environment to be set when building the packages.  It
is for internal use to configure the differences between a standard and
local package.
@end defvr


@subsubheading Invoking @command{makepkg}


@defvr {Makefile Variable} ds_slackware_MAKEPKG_PROGRAM
The pathname to the system @command{makepkg} program; it is used both
when building a standard and local package.  It should be
@file{/sbin/makepkg}, but can be overwritten when building a local
package.
@end defvr


@defvr {Makefile Variable} ds_local_slackware_MAKEPKG_PROGRAM
The pathname to the @command{makepkg} program to use to build a local
package; it is used to reset @code{ds_slackware_MAKEPKG_PROGRAM}.
Through a command line option to @command{configure}, this value can be
set to a script under the @code{$(prefix)} directory.
@end defvr


@defvr {Makefile Variable} ds_slackware_MAKEPKG_FLAGS
The flags for the @command{makepkg} invocation.
@end defvr


@defvr {Makefile Variable} ds_slackware_MAKEPKG
The command line for the @command{makepkg} invocation.
@end defvr


@subsubheading Invoking @command{installpkg}


@defvr {Makefile Variable} ds_slackware_INSTALLPKG_PROGRAM
The pathname to the system @command{makepkg} program; it is used both
when installing a standard and local package.  It should be
@file{/sbin/installpkg}, but can be overwritten when installing a local
package.
@end defvr


@defvr {Makefile Variable} ds_local_slackware_INSTALLPKG_PROGRAM
The pathname to the @command{installpkg} program to use to install a
local package; it is used to reset
@code{ds_slackware_INSTALLPKG_PROGRAM}.  Through a command line option
to @command{configure}, this value can be set to a script under the
@code{$(prefix)} directory.
@end defvr


@defvr {Makefile Variable} ds_slackware_INSTALLPKG_FLAGS
The flags for the @command{installpkg} invocation.
@end defvr


@defvr {Makefile Variable} ds_slackware_INSTALLPKG
The command line for the @command{installpkg} invocation.
@end defvr


@subsubheading Invoking @command{removepkg}


@defvr {Makefile Variable} ds_slackware_REMOVEPKG_PROGRAM
The pathname to the system @command{removepkg} program; it is used both
when removing a standard and local package.  It should be
@file{/sbin/removepkg}, but can be overwritten when removing a local
package.
@end defvr


@defvr {Makefile Variable} ds_local_slackware_REMOVEKG_PROGRAM
The pathname to the @command{makepkg} program to use to remove a local
package; it is used to reset @code{ds_slackware_REMOVEPKG_PROGRAM}.
Through a command line option to @command{configure}, this value can be
set to a script under the @code{$(prefix)} directory.
@end defvr


@defvr {Makefile Variable} ds_slackware_REMOVEPKG_FLAGS
The flags for the @command{removepkg} invocation.
@end defvr


@defvr {Makefile Variable} ds_slackware_REMOVEPKG
The command line for the @command{removepkg} invocation.
@end defvr


@subsubheading Invoking @command{upgradepkg}


@defvr {Makefile Variable} ds_slackware_UPGRADEPKG_PROGRAM
The pathname to the system @command{upgradepkg} program; it is used both
when upgrading a standard and local package.  It should be
@file{/sbin/upgradepkg}, but can be overwritten when upgrading a local
package.
@end defvr


@defvr {Makefile Variable} ds_local_slackware_UPGRADEPKG_PROGRAM
The pathname to the @command{upgradepkg} program to use to upgrade a
local package; it is used to reset
@code{ds_slackware_UPGRADEPKG_PROGRAM}.  Through a command line option
to @command{configure}, this value can be set to a script under the
@code{$(prefix)} directory.
@end defvr


@defvr {Makefile Variable} ds_slackware_UPGRADEPKG_FLAGS
The flags for the @command{upgradepkg} invocation.
@end defvr


@defvr {Makefile Variable} ds_slackware_UPGRADEPKG
The command line for the @command{upgradepkg} invocation.
@end defvr

@c page
@node make dist slackware functions
@subsubsection Auxiliary functions


@deffn {Makefile Function} ds-slackware-get-installed-package @var{package_spec}
Expands to the name of an installed Slackware package; it is used when
upgrading a package.  The package is searched under the registry
selected by @code{$(ds_slackware_REGISTRY)}.

It should be invoked as:

@example
$(call ds-slackware-get-installed-package,$(PACKAGE_NAME))
$(call ds-slackware-get-installed-package,$(PACKAGE_NAME)-doc)
$(call ds-slackware-get-installed-package,$(PACKAGE_NAME)-dev)
@end example

The implementation is equivalent to:

@example
$(notdir \
  $(firstword \
    $(wildcard $(ds_slackware_REGISTRY)/@var{package_spec}-[0-9]*)))
@end example
@end deffn


@c page
@node make misc
@section Miscellaneous functions


@deffn {Makefile Function} ds-verbose @var{stuff_for_verbose} @var{stuff_for_silent}
If the variable @code{ds_config_VERBOSE_MESSAGES} has a non--empty
value: expand to @var{stuff_for_verbose}, else expand to
@var{stuff_for_silent}.  It is fine for @var{stuff_for_silent} to be the
empty string.
@end deffn


@deffn {Makefile Function} ds-echo @var{message}
Output a message with the shell built in @code{echo}.  The function
@func{ds-verbose} is used to avoid printing the output in silent
mode.  Example:

@example
$(call ds-echo,"installing files...")
@end example
@end deffn


@deffn {Makefile Function} ds-if-yes @var{expr} @var{consequent} @var{alternate}
If @var{expr} expands to the string @code{yes}, @var{consequent} is
expanded; else @var{alternate} is expanded.
@end deffn

@c page
@node compilers
@chapter Generic support for compiling


This chapter documents generic features to configure the behaviour of
compilers.  They are particularly suited to generation of C language
programs and libraries, but can be used with every language that
supports compiling.

@menu
* compilers options::           Command line options.
* compilers setup::             Setting up the environment.
@end menu

@c page
@node compilers options
@section Command line options


All the following command line options for the @configure{} script are
defined by the @code{DS_COMPILED_STUFF} Autoconf macro; the makefile
variables are always included when the DevelStuff library is loaded.


@vindex ds_config_ENABLE_SHARED
@deffn {Configure Options} @option{--enable-shared}
@deffnx {Configure Options} @option{--disable-shared}
@deffnx {Makefile Variable} ds_config_ENABLE_SHARED
Enable or disable building of shared libraries.  To be used only when
building libraries, they have no effect when building programs.

Enabling the option sets to @code{yes} the makefile variable, and causes
the shared libraries to be built.  The makefile variable can be used by
inserting sections like this:

@example
ifeq ($(ds_config_ENABLE_SHARED),yes)
...
endif
@end example
@end deffn


@vindex ds_config_ENABLE_STATIC
@deffn {Configure Options} @option{--enable-static}
@deffnx {Configure Options} @option{--disable-static}
@deffnx {Makefile Variable} ds_config_ENABLE_STATIC
Enable or disable building of static libraries.  To be used only when
building libraries, they have no effect when building programs.

Enabling the option sets to @code{yes} the makefile variable, and causes
the static libraries to be built.  The makefile variable can be used by
inserting sections like this:

@example
ifeq ($(ds_config_ENABLE_STATIC),yes)
...
endif
@end example
@end deffn


@vindex ds_config_ENABLE_STRIP
@deffn {Configure Options} @option{--enable-strip}
@deffnx {Configure Options} @option{--disable-strip}
@deffnx {Makefile Variable} ds_config_ENABLE_STRIP
Enable or disable stripping of debugging symbols from programs and
libraries.

Enabling the option sets to @code{yes} the makefile variable, and causes
symbols to be stripped.  The makefile variable can be used by inserting
sections like this:

@example
ifeq ($(ds_config_ENABLE_STRIP),yes)
...
endif
@end example

@ref{clang module libs,Building libraries}
@end deffn


@vindex ds_config_ENABLE_SHLIB_SYMLINK
@deffn {Configure Option} @option{--enable-shlib-symlink}
@deffnx {Configure Option} @option{--disable-shlib-symlink}
@deffnx {Makefile Variable} ds_config_ENABLE_SHLIB_SYMLINK
If the @configure{} option is enabled, the makefile variable is set to
@code{yes}.  If enabled a symbolic link to the shared library files will
be created; while the shared library files have a major and minor
interface version numbers, the link name only has the major interface
number.  Defaults to enabled.

The makefile variable can be used by inserting sections like this:

@example
ifeq ($(ds_config_ENABLE_SHLIB_SYMLINK),yes)
...
endif
@end example

@ref{clang module libs,Building libraries}
@end deffn

@c page
@node compilers setup
@section Setting up the environment


@deffn {Autoconf Macro} DS_COMPILED_STUFF
Defines miscellaneous support for compilers.
@end deffn


@deffn {Autoconf Macro} DS_SYSTEM_SETUP
It is used to prepare the environment for subsequent tests.  Expands to:

@example
AC_USE_SYSTEM_EXTENSIONS
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AC_SYS_INTERPRETER
AC_SYS_LARGEFILE
AC_SYS_LONG_FILE_NAMES
AC_SYS_POSIX_TERMIOS
@end example

@quotation
@emph{Note:} Notice that @code{AC_USE_SYSTEM_EXTENSIONS} defines
@code{_GNU_SOURCE} if the @gnu{} platform is detected.
@end quotation


@quotation
@emph{Note:} Do not include this macro by default in all the
@file{configure.ac} templates; sometimes it is not required at all.
@end quotation
@end deffn

@c page
@node clang
@chapter C language support


@menu
* clang intro::                 Introduction to C language support.
* clang config::                Configuration.
* clang language::              Language configuration.
* clang variables::             Makefile variables.
* clang invocation::            Invoking the compiler and the linker.
* clang module::                Compiler modules.
* clang misc::                  Miscellaneous modules.
@end menu

@c page
@node clang intro
@section Introduction to C language support


@subsubheading Libraries

Let's say that a project builds a C99 language library, and we have
choosen @code{mine} as its identifier and @code{my} as its name.  If all
the defaults are accepted, the @file{configure.ac} file should have a
section like this:

@example
DS_INCLUDE_SECTION([DEV_RULES])
DS_INCLUDE_SECTION([C_LANGUAGE])
DS_COMPILED_STUFF
DS_SYSTEM_SETUP
DS_C99_LANGUAGE
DS_C_LANGUAGE_LIBRARY([mine],1,2,[my])
@end example

@noindent
where @code{1} and @code{2} are the major and minor library interface
numbers; the @file{Makefile.in} or @file{project.make} files should have
a section like this:

@example
$(eval $(call ds-c-library,ucl))
@end example

@noindent
where @code{ds-c-library} expands to:

@example
include meta.d/makefiles/mine-clib.make
$(eval $(call ds-c-sources,mine))
$(eval $(call ds-c-shared-library,mine))
$(eval $(call ds-c-static-library,mine))
@end example

@noindent
with this setup we build both a shared and static library.

@c page
@node clang config
@section Configuration


@vindex ds_config_ENABLE_GCC_WARNING
@deffn {Configure Option} @option{--enable-gcc-warnings}
@deffnx {Configure Option} @option{--disable-gcc-warnings}
@deffnx {Makefile Variable} ds_config_ENABLE_GCC_WARNING
If the @configure{} option is enabled, the makefile variable is set to
@code{yes}.  When enabled:

@itemize
@item
The makefile variable @code{GCC_WARNINGS} is set to a list of warning
options specific to the @gcc{} C compiler, else it is left unset.

@item
The makefile variable @code{GXX_WARNINGS} is set to a list of warning
options specific to the @gcc{} C++ compiler, else it is left unset.
@end itemize

Defaults to enabled.

@ref{clang variables misc,Other compiler variables}.
@end deffn

@c page
@node clang language
@section Language configuration


@deffn {Autoconf Macro} DS_C89_LANGUAGE
@deffnx {Autoconf Macro} DS_C99_LANGUAGE
Run all the tests required to setup the C89 or C99 language common
environment.  This macro is updated with relative frequency, so we have
to inspect the source of the DevelStuff Autoconf library to know what is
done exactly.

@quotation
@emph{Note:} When using @gcc{} these macros append @code{-std=c89} or
@code{-std=c99} to the definition of the @code{CC} variable itself.
@end quotation
@end deffn


@deffn {Autoconf Macro} DS_C89_LANGUAGE_COMMON_SETUP
@deffnx {Autoconf Macro} DS_C99_LANGUAGE_COMMON_SETUP
An all--included macro for C language projects.  Expands to the
following:

@example
DS_INCLUDE_SECTION([DEV_RULES])
DS_INCLUDE_SECTION([C_LANGUAGE])
DS_COMPILED_STUFF
DS_SYSTEM_SETUP
@end example

@noindent
followed by:

@example
DS_C89_LANGUAGE
@end example

@noindent
or:

@example
DS_C99_LANGUAGE
@end example
@end deffn


@c page
@node clang variables
@section Makefile variables


@menu
* clang variables args::        Command line variables.
* clang variables prog::        Programs.
* clang variables misc::        Other compiler variables.
@end menu

@c page
@node clang variables args
@subsection Command line variables


All the following variables can be set from the command line of both
@configure{} and @command{make}.  Examples:

@example
$ ./configure CFLAGS='-march=i686 -mtune=i686 -g -O3'
$ make        CFLAGS='-march=i686 -mtune=i686 -g -O3'
@end example

@noindent
All of them are set in the DevelStuff makefile library using the
@code{?=} assignment operator.  @autoconfref{Preset Output
Variables,Preset Output Variables}


@defvr {Configuration Variable} CPPFLAGS
Must be set to a list of C preprocessor options.  In the makefile it
defaults to @code{@@CPPFLAGS@@}, which should expand to the empty
string.  It is used by @code{ds-cc-compile}.
@end defvr


@defvr {Configuration Variable} CFLAGS
Must be set to a list of options for the C compiler.  In the makefile it
defaults to @code{@@CFLAGS@@}, which is set by the Autoconf macro
@code{AC_PROG_CC} and usually expands to @code{-g -O2}.  It is used by
@code{ds-cc-compile}.
@end defvr


@defvr {Configuration Variable} LDFLAGS
Must be set to a list of @option{-L} linker options.  In the makefile it
defaults @code{@@LDFLAGS@@}, which should expand to the empty string.
It is used by @code{ds-cc-link-program} and
@code{ds-cc-link-shared-library}.
@end defvr


@defvr {Configuration Variable} LIBS
Must be set to a list of @option{-l} linker options.  In the makefile it
defaults to @code{@@LIBS@@}, which may be set by the Autoconf macro
@code{AC_CHECK_LIB}.  It is used by @code{ds-cc-link-program} and
@code{ds-cc-link-shared-library}.
@end defvr

@c page
@node clang variables prog
@subsection Programs


All the following variables are set to program names or program's
command lines.


@defvr {Makefile Variable} CC
The C language compiler.
@end defvr


@defvr {Makefile Variable} CPP
The C language preprocessor.
@end defvr


@defvr {Makefile Variable} AR
Archives manager.  Used to create static libraries: archives of object
files.
@end defvr


@defvr {Makefile Variable} RANLIB
Index generator for archives.  Used to give more karma to a static
archive.
@end defvr


@defvr {Makefile Variable} STRIP
Remove debugging symbols from programs and shared libraries.
@end defvr


@defvr {Makefile Variable} GDB
The @gnu{} C language debugger.
@end defvr

@c page
@node clang variables misc
@subsection Other compiler variables


The following variables are output variables set by the @configure{}
script or variables preset by the DevelStuff makefile library.


@deffn {Autoconf Symbol} {@@OBJEXT@@}
It is set to the extension of object files, usually @code{o} (without
the leading dot).  It is defined by the @code{DS_C*_LANGUAGE} macros
(through @code{AC_PROG_CC}).
@end deffn


@defvr {Makefile Variable} DEFS
Should be set to a list of C preprocessor symbol definitions.  In the
makefile it defaults to @code{@@DEFS@@}, which is set by the Autoconf
macro @code{AC_DEFINE}.  It is used by @code{ds-cc-compile}.

The DevelStuff infrastructure makes use of the configuration header file
through:

@example
AC_CONFIG_HEADERS([config.h])
@end example

@noindent
so this variable should end up being set to @code{-DHAVE_CONFIG_H}.
@end defvr


@defvr {Makefile Variable} GCC_WARNINGS
Default warning options for the @gcc{} compiler.  If the configuration
variable @code{ds_config_ENABLE_GCC_WARNING} is set to @code{yes} (its
default) @code{GCC_WARNINGS} is set to the following list of options:

@example
-Wall                   -W
-Wextra                 -pedantic
-Wmissing-prototypes    -Wpointer-arith
-Wcast-qual             -Wcast-align
-Wwrite-strings         -Wnested-externs
-Wstrict-prototypes     -Wshadow
-fno-common
@end example

@noindent
else it is left unset.

It is used by @code{ds-cc-compile}.

@quotation
@emph{Note:} If there is the need, for example, to remove the
@code{-Wcast-qual} or @code{-Wshadow} options, we can filter options
with:

@example
GCC_WARNINGS := \
  $(filter-out -Wcast-qual -Wshadow,$(GCC_WARNINGS))
@end example

@noindent
notice the use of @code{:=}, rather than @code{=}, to avoid infinite
recursion.
@end quotation
@end defvr


@defvr {Makefile Variable} GCC_PIPE
If the @configure{} script detects usage of the @gcc{} compiler: this
variable is set to @option{-pipe}, else it is left unset.  It is used by
the compiler functions @code{ds-cc-compile}, @code{ds-cc-link-program}
and @code{ds-cc-link-shared-library}.
@end defvr


@defvr {Makefile Variable} GCC_SHARED
If the @configure{} script detects usage of the @gcc{} compiler: this
variable is set to @option{-shared -fPIC}, else it is left unset.  It is
used by the function @code{ds-cc-link-shared-library}.
@end defvr


@defvr {Makefile Variable} LDFLAGS_RPATH
Options to be passed to the linker to select the search path for
libraries.  The default value is @code{-Wl,-rpath,$(libdir)}.

If needed, it is our responsibility to append this variable to the
command line of the linker.

@quotation
@emph{Note:} It appears that, when using this variable on linker's
command line, the @env{LD_LIBRARY_PATH} variable does not work anymore
to override the search path for shared libraries.
@end quotation
@end defvr


@defvr {Makefile Variable} LDFLAGS_DL
Should be set to @code{-ldl} and included at linking time for a library
or program that needs the @code{dlopen()} @api{}.  A test for the
availability of the library is performed in the @configure{} script by
the @code{DS_C*_LANGUAGE} macros.

If needed, it is our responsibility to append this variable to the
command line of the linker.
@end defvr


@defvr {Makefile Variable} CC_COMPILE_OUTPUT
If the C language compiler accepts the @code{-c -o} options
simultaneously to produce object files: this variable is set to @code{-c
-o}; else it is set to @code{-o}.
@end defvr


@defvr {Makefile Variable} CC_LINK_OUTPUT
Set to @code{-o}, it is meant to be used to select the output of a
linker invocation.
@end defvr

@c page
@node clang invocation
@section Invoking the compiler and the linker


The modules that compile and link files make use of the following
functions to compose the compiler/linker command line.  We have to
remember that we can always redefine these variables and/or the whole
module from the library (you have the code).

In all the following functions the @var{identifier} argument must be a
valid make variable identifier; it is used to build variable names
``local'' to the module.  All the following functions must be invoked as
follows:

@itemize
@item
at the toplevel of the @file{Makefile}:

@example
$(eval $(call ds-cc-compile,mine))
@end example

@item
while inside of a @code{define} body:

@example
$$(eval $$(call ds-cc-compile,mine))
@end example
@end itemize

@menu
* clang invocation objects::     Preprocessing and compiling
                                 source files.
* clang invocation programs::    Linking programs.
* clang invocation libraries::   Linking shared libraries.
@end menu

@c page
@node clang invocation objects
@subsection Preprocessing and compiling source files


@deffn {Makefile Function} ds-cc-compile @var{identifier}
Define variables to be used to preprocess and compile a C source file
into an object file.  The following:

@example
$(eval $(call ds-cc-compile,mine))
@end example

@noindent
expands to:

@example
mine_CC_COMPILE_ENV      ?=
mine_CC_COMPILE_CC       ?= $(CC) $(GCC_PIPE)
mine_CC_COMPILE_INCLUDES ?=
mine_CC_COMPILE_CPPFLAGS ?= $(DEFS) $(CPPFLAGS)
mine_CC_COMPILE_CFLAGS   ?= $(GCC_WARNINGS) $(CFLAGS)
mine_CC_COMPILE_MORE     ?=
mine_CC_COMPILE          ?= $(mine_CC_COMPILE_ENV)      \
                            $(mine_CC_COMPILE_CC)       \
                            $(mine_CC_COMPILE_INCLUDES) \
                            $(mine_CC_COMPILE_CPPFLAGS) \
                            $(mine_CC_COMPILE_CFLAGS)   \
                            $(mine_CC_COMPILE_MORE)     \
                            $(CC_COMPILE_OUTPUT)
@end example

@noindent
we are fully free to preset all the variables.  To use the produced
variables to compile object files we can do:

@example
$(mine_BUILDDIR)/%.@@OBJEXT@@                    \
   : $(mine_BUILDDIR)/%.@@OBJEXT@@               \
   : $(mine_SRCDIR)/%.c $(mine_PREREQUISITES)
	$(mine_CC_COMPILE) $(@@) $(<)
@end example
@end deffn

@c page
@node clang invocation programs
@subsection Linking programs


@deffn {Make Function} ds-cc-link-program @var{identifier}
Define variables to be used to link a set of object files and static
libraries into an executable program.  The following:

@example
$(eval $(call ds-cc-link-program,mine))
@end example

@noindent
expands to:

@example
mine_CC_PROGRAM_ENV     ?=
mine_CC_PROGRAM_CC      ?= $(CC) $(GCC_PIPE)
mine_CC_PROGRAM_LDFLAGS ?= $(LDFLAGS)
mine_CC_PROGRAM_LIBS    ?= $(LIBS)
mine_CC_PROGRAM_PRE     ?=
mine_CC_PROGRAM_POST    ?=
mine_CC_PROGRAM         ?= $(mine_CC_PROGRAM_ENV)       \
                           $(mine_CC_PROGRAM_CC)        \
                           $(mine_CC_PROGRAM_LDFLAGS)   \
                           $(mine_CC_PROGRAM_PRE)       \
                           $(mine_CC_PROGRAM_LIBS)      \
                           $(CC_LINK_OUTPUT) $(@@) $(^)  \
                           $(mine_CC_PROGRAM_POST)
@end example

@noindent
we are fully free to preset all the variables; notice that all the
prerequisites are included as object files (through @code{$(^)}).

To use the variables we can do:

@example
$(mine_program_PATHNAME) : $(mine_program_OBJECTS)
	$(mine_program_CC_PROGRAM)
ifeq ($(ds_config_ENABLE_STRIP),yes)
	$(STRIP) $(@@)
endif
@end example
@end deffn

@c page
@node clang invocation libraries
@subsection Linking shared libraries


@deffn {Make Function} ds-cc-link-shared-library @var{identifier}
Define variables to be used to link a set of object files and static
libraries into a shared library.  The following:

@example
$(eval $(call ds-cc-link-shared-library,mine))
@end example

@noindent
expands to:

@example
mine_CC_SHLIB_ENV     ?=
mine_CC_SHLIB_CC      ?= $(CC) $(GCC_PIPE) $(GCC_SHARED)
mine_CC_SHLIB_LDFLAGS ?= $(LDFLAGS)
mine_CC_SHLIB_LIBS    ?= $(LIBS)
mine_CC_SHLIB_PRE     ?=
mine_CC_SHLIB_POST    ?=
mine_CC_SHLIB         ?= $(mine_CC_SHLIB_ENV)        \
                         $(mine_CC_SHLIB_CC)         \
                         $(mine_CC_SHLIB_LDFLAGS)    \
                         $(mine_CC_SHLIB_PRE)        \
                         $(mine_CC_SHLIB_LIBS)       \
                         $(CC_LINK_OUTPUT) $(@@) $(^) \
                         $(mine_CC_SHLIB_POST)
@end example

@noindent
we are fully free to preset all the variables; notice that all the
prerequisites are included as object files (through @code{$(^)}).

To use the variables we can do:

@example
$(mine_shared_library_PATHNAME) : $(mine_shared_library_OBJECTS)
	$(mine_CC_SHLIB)
ifeq ($(ds_config_ENABLE_STRIP),yes)
	$(STRIP) $(@@)
endif
@end example
@end deffn

@c page
@node clang module
@section Compiler modules


@menu
* clang module objects::        Compiling object files.
* clang module libs::           Building libraries.
* clang module progs::          Building programs.
@end menu

@c page
@node clang module objects
@subsection Compiling object files


To compile a set of C language source files into object files we do
this:

@example
$(eval $(call ds-c-sources,mine))
@end example

@noindent
which collects the files matching @code{$(srcdir)/src/*.c} and compiles
them into object files under @code{$(builddir)/objects.d}.  To override
the default values we can do:

@example
mine_SRCDIR     = $(srcdir)/src
mine_BUILDDIR   = $(builddir)/objects.d
mine_PATTERNS   = *.c
$(eval $(call ds-c-sources,mine))
@end example


@deffn {Makefile Section} ds-c-sources @var{identifier}
Define what is needed to compile a set of C source files into object
files.  All the variables used by the module are prefixed with
@var{identifier}.

The core rules of the module is built with:

@example
$(eval $(call ds-module-no-install,
   <@var{identifier}>, $(<@var{identifier}>_RULESET)))
@end example

@noindent
and the command line of the compiler is composed with:

@example
$(eval $(call ds-cc-compile,<@var{identifier}>))
@end example

@noindent
and all the variables defined by @code{ds-cc-compile} are available for
customisation; additionally, the following variables are available to
configure the module:

@table @code
@item <@var{identifier}>_RULESET ?= bin
selects the main ruleset this module belongs to;

@item <@var{identifier}>_SRCDIR ?= $(srcdir)/src
the directory from which source files are collected; this directory is
added to the search path for @code{%.h} files using the @code{vpath}
directive;

@item <@var{identifier}>_BUILDDIR ?= $(builddir)/objects.d
the directory in which output object files are created; this directory
is added to the search path for @code{%.@@OBJEXT@@} files using the
@code{vpath} directive;

@item <@var{identifier}>_PATTERNS ?= *.c
a list of wildcard patterns used to select source files from the source
directory; the list of source files is built with:

@example
$(call ds-glob,<@var{identifier}>,$(<@var{identifier}>_PATTERNS))
@end example

@item <@var{identifier}>_PREREQUISITES ?=
selects a list of prerequisites for the building rule, which is usually
a list of header files; notice that this list is not prefixed with the
source directory, but can benefit of the search paths selected with
@code{vpath};
@end table

@noindent
notice that the following options:

@example
-I$(builddir) -I$(<@var{identifier}>_SRCDIR)
@end example

@noindent
are added to the command line of the compiler to let it find the header
files for this module (under @code{$(<@var{identifier}>_SRCDIR)}) and
the @file{config.h} file (under @code{$(builddir)}).

The following variables are available for module inspection and usage:

@table @code
@item <@var{identifier}>_SOURCES
the list of selected source file pathnames;

@item <@var{identifier}>_TARGETS
the list of object file pathnames that are produced by this module;

@item <@var{identifier}>_MOSTLYCLEANFILES += $(<@var{identifier}>_TARGETS)
the list of files to clean for this module;

@item <@var{identifier}>_CLEANFILES += $(<@var{identifier}>_MOSTLYCLEANFILES)
the list of files to really clean for this module;
@end table

@noindent
all the phony rules defined by @code{ds-module} are available to drive
the module.
@end deffn

@c page
@node clang module libs
@subsection Building libraries


@menu
* clang module libs intro::     Introduction to building libraries.
* clang module libs macros::    Autoconf macros defining libraries.
* clang module libs shared::    Building shared libraries.
* clang module libs static::    Building static libraries.
* clang module libs misc::      Miscellaneous makefile sections.
@end menu


@c page
@node clang module libs intro
@subsubsection Introduction to building libraries


To build both a shared and static library we can put in
@file{configure.ac} (after the C language support stuff):

@example
DS_C_LANGUAGE_LIBRARY([mine],1,2,[my])
@end example

@noindent
in which:

@table @code
@item mine
is the identifier used to prefix all the configuration and makefile
variables and phony rules;

@item 1
is the major interface version of the library;

@item 2
is the minor interface version of the library;

@item my
is the ``name'' of the library;
@end table

@noindent
the shared library file will be @file{libname1.2.so}, and the static
library file will be @file{libname1.2.a}; @ref{library version} for
details on library version numbers.

In the makefile we put:

@example
include meta.d/makefiles/mine-clib.make
$(eval $(call ds-c-sources,mine))
$(eval $(call ds-c-shared-library,mine))
$(eval $(call ds-c-static-library,mine))
@end example

@noindent
in which:

@itemize
@item
the included makefile defines a set of variables (prefixed with
@code{mine}) related to the library file names; the makefile is
automatically generated by @code{DS_C_LANGUAGE_LIBRARY};

@item
the call to @func{ds-c-sources} produces the object files collecting the
sources with the pattern @code{$(srcdir)/src/*.c};

@item
the call to @func{ds-c-shared-library,mine} links the objects into the
shared library:

@example
$(builddir)/libraries.d/libmy1.2.so
@end example

@item
the call to @func{ds-c-static-library} links the objects into the static
library:

@example
$(builddir)/libraries.d/libmy1.2.a
@end example
@end itemize

Notice that the four lines described above can be included in the
makefile with the following single line:

@example
$(eval $(call ds-c-library,mine))
@end example

@c page
@node clang module libs macros
@subsubsection Autoconf macros defining libraries


@deffn {Autoconf Macro} DS_C_LANGUAGE_LIBRARY (@var{identifier}, @var{major}, @var{minor}, @var{name})
Define a set of output variables needed by the DevelStuff makefile
library to build a C language library.

@table @var
@item identifier
The prefix of all the variables for this library.

@item major
The major interface version for this library.

@item minor
The minor interface version for this library.

@item name
The library name.
@end table

The shared library file name will be:

@example
lib@meta{name}@meta{major}.@meta{minor}.so
@end example

@noindent
and the static library file name will be:

@example
lib@meta{name}@meta{major}.@meta{minor}.a
@end example

@ref{library version} for details on library version numbers.

When the expansion of this macro is evaluated in @configure{}, it will
create a special makefile holding variables definitions related to the
file names and interface versions:

@table @code
@item @meta{identifier}_INTERFACE_VERSION ?= @var{major}.@var{minor}
@itemx @meta{identifier}_INTERFACE_MAJOR_VERSION ?= @var{major}
@itemx @meta{identifier}_INTERFACE_MINOR_VERSION ?= @var{minor}
Library's interface version numbers.

@item @meta{identifier}_SHARED_LIBRARY_NAME ?= lib@meta{identifier}@meta{major}.@meta{minor}.so
The file name of the shared library.

@item @meta{identifier}_SHARED_LIBRARY_LINK_NAME ?= lib@meta{identifier}@meta{major}.so
The file name of the symbolic link to the shared library.  It contains
only the major interface version.

@item @meta{identifier}_STATIC_LIBRARY_NAME ?= lib@meta{identifier}@meta{major}.@meta{minor}.a
The file name of the static library.

@item @meta{identifier}_LIBRARY_ID ?= @meta{identifier}@meta{major}.@meta{minor}
@itemx @meta{identifier}_SHARED_LIBRARY_ID ?= @meta{identifier}@meta{major}.@meta{minor}
@itemx @meta{identifier}_STATIC_LIBRARY_ID ?= @meta{identifier}@meta{major}.@meta{minor}
@itemx @meta{identifier}_SHARED_LIBRARY_LINK_ID ?= @meta{identifier}@meta{major}
It can be used as value for the @option{-l} linker option when linking
the library to a program or another library.
@end table

@noindent
the makefile is named @code{@var{identifier}-clib.make} and is created
in the directory @file{$(builddir)/meta.d/makefiles}.
@end deffn

@c page
@node clang module libs shared
@subsubsection Building shared libraries


@deffn {Makefile Section} ds-c-shared-library @var{identifier}
Define what is needed to link a set of object files into a shared
library.  The expansion of this function is included only if
@code{ds_config_ENABLE_SHARED} is set to @code{yes}.  @ref{compilers
options,Command line options}

This section is meant to link a set of object files produced with
@func{ds-c-sources}, but notice that the only interface from
@func{ds-c-sources} to @func{ds-c-shared-library} is the variable
@code{<@var{identifier}>_TARGETS} which must hold the list of object
files.

All the variables and phony rules used by the module are prefixed with
@code{<@var{identifier}>_shlib}.

Debugging symbols are stripped from the shared library if
@code{ds_config_ENABLE_STRIP} is set to @code{yes}.  @ref{compilers
options,Command line options}

The command line of the linker is composed with:

@example
$(eval $(call ds-cc-link-library,<IDENTIFIER>_shlib))
@end example

@noindent
and all the variables defined by @code{ds-cc-link-library} are
available for customisation; additionally the following variables are
available to configure the module:

@table @code
@item <IDENTIFIER>_shlib_RULESET ?= bin
Selects the ruleset this module belongs to.

@item <@var{identifier}>_shlib_BUILDDIR ?= $(builddir)/libraries.d
Select the output directory for the library file.

@item <IDENTIFIER>_shlib_OBJECTS ?= $(<IDENTIFIER>_TARGETS)
The list of object files to be included in the library, prefixed with
the directory in which they are to be found.  The default value is
consistent with the interface of @func{ds-c-sources}.  @ref{clang module
objects, Compiling object files}.

@item <IDENTIFIER>_shlib_INSTDIR ?= $(libdir)
The directory in which to install the files.
@end table

The following variables are available for inspection:

@table @code
@item <IDENTIFIER>_shlib_NAME
The file name of the shared library.

@item <IDENTIFIER>_shlib_PATHNAME
The file name of the shared library prefixed with the build directory.

@item <IDENTIFIER>_shlib_LINK_NAME
The name of the symbolic link to the shared library file.

@item <IDENTIFIER>_shlib_LINK_PATHNAME
The name of the symbolic link to the shared library file prefixed with
the build directory.

@item <IDENTIFIER>_shlib_TARGETS
The list of targets for this module.  It should be the shared library
file name and the symbolic link name, both prefixed with the build
directory.

@item <IDENTIFIER>_shlib_INSTLST
The list of files to install, prefixed with the directory in which they
are to be found.  It should be the library file name; notice that the
symbolic link is also installed, but it is directly created in the
destination directory.
@end table

The core of the phony rules is generated with:

@example
$(eval $(call ds-module,<@var{identifier}>_shlib,\
   $(<@var{identifier}>_shlib_RULESET),LIB))
@end example
@end deffn

@c page
@node clang module libs static
@subsubsection Building static libraries


@deffn {Makefile Section} ds-c-static-library @var{identifier} @var{libname}
Define what is needed to archive a set of object files into a static
library.  The expansion of this function is included only if
@code{ds_config_ENABLE_SHARED} is set to @code{yes}.  @ref{compilers
options,Command line options}

This section is meant to link a set of object files produced with
@func{ds-c-sources}, but notice that the only interface from
@func{ds-c-sources} to @func{ds-c-static-library} is the variable
@code{<@var{identifier}>_TARGETS} which must hold the list of object
files.

All the variables and phony rules used by the module are prefixed with
@code{<@var{identifier}>_stlib}.

The following variables are available to configure the module:

@table @code
@item <IDENTIFIER>_stlib_RULESET ?= dev
Selects the ruleset this module belongs to.

@item <@var{identifier}>_stlib_BUILDDIR ?= $(builddir)/libraries.d
Select the output directory for the library file.

@item <IDENTIFIER>_stlib_OBJECTS ?= $(<IDENTIFIER>_TARGETS)
The list of object files to be included in the library, prefixed with
the directory in which they are to be found; the default value is
consistent with the interface of @func{ds-c-sources}.  @ref{clang module
objects, Compiling object files}.

@item <IDENTIFIER>_stlib_INSTDIR ?= $(libdir)
The directory in which to install the files.
@end table

The following variables are available for inspection:

@table @code
@item <IDENTIFIER>_stlib_NAME
The file name of the static library.

@item <IDENTIFIER>_stlib_PATHNAME
The file name of the static library prefixed with the build directory.

@item <IDENTIFIER>_stlib_TARGETS
The list of targets for this module.  It should be the static library
file name prefixed with the build directory.

@item <IDENTIFIER>_stlib_INSTLST
The list of files to install, prefixed with the directory in which they
are to be found.  It should be the library file name.
@end table

The core of the phony rules is generated with:

@example
$(eval $(call ds-module,<@var{identifier}>_stlib,\
   $(<@var{identifier}>_stlib_RULESET),LIB))
@end example
@end deffn

@c page
@node clang module libs misc
@subsubsection Miscellaneous makefile sections


@deffn {Makefile Section} ds-c-library @var{identifier}
Helper section to build both a shared and static library.  Calling:

@example
$(eval $(call ds-c-library,mine))
@end example

@noindent
expands to:

@example
include meta.d/makefiles/mine-clib.make
$(eval $(call ds-c-sources,mine))
$(eval $(call ds-c-shared-library,mine))
$(eval $(call ds-c-static-library,mine))
@end example
@end deffn


@deffn {Makefile Section} ds-c-library-extended @var{identifier}
Helper section to build both a shared and static library, and install
header files.  Calling:

@example
$(eval $(call ds-c-library-extended,mine))
@end example

@noindent
expands to:

@example
$(eval $(call ds-c-library,mine))
$(eval $(call ds-h-files-installer,mine))
@end example
@end deffn

@c page
@node clang module progs
@subsection Building programs


@menu
* clang module progs intro::    Introduction.
* clang module progs single::   Linking several object files
                                into a single program.
* clang module progs multi::    Linking several programs.
* clang module progs examples:: Building example programs.
* clang module progs tests::    Building test programs.
@end menu


@c page
@node clang module progs intro
@subsubsection Introduction


To build a single executable program from a set of object files we do:

@example
$(eval $(call ds-c-sources,mine))
$(eval $(call ds-c-single-program,mine,my))
@end example

@noindent
in which:

@itemize
@item
The first line produces the object files collecting the sources with the
pattern @code{$(srcdir)/src/*.c} and storing the objects into
@code{$(builddir)/objects.d}.

@item
The second line links the objects into the program
@code{$(builddir)/programs.d/my}.
@end itemize

To build an executable for each object file in a set we do:

@example
$(eval $(call ds-c-sources,mine))
$(eval $(call ds-c-programs,mine))
@end example

@noindent
in which:

@itemize
@item
The first line produces the object files collecting the sources with the
pattern @code{$(srcdir)/src/*.c} and storing the objects into
@code{$(builddir)/objects.d}.

@item
The second line links each object file into a program storing the result
in @code{$(builddir)/programs.d}.
@end itemize

The name of the programs is built by stripping the extension from the
object file name.

@c page
@node clang module progs single
@subsubsection Linking several object files into a single program


@cindex @code{ds_config_ENABLE_STRIP}, stripping symbols from single programs.
@cindex @func{ds-cc-link-program}, linking several object files into a single program.


@deffn {Makefile Section} ds-c-single-program @var{identifier} @var{progname}
@deffnx {Makefile Section} ds-c-single-program-no-install @var{identifier} @var{progname}
Define what is needed to link a set of object files into an executable
program.  The no install version does not define installation rules for
the output program.

This section is meant to link a set of object files produced with
@func{ds-c-sources}, but notice that the only interface from
@func{ds-c-sources} to @func{ds-c-single-program} is the variable
@code{<@var{identifier}>_TARGETS} which must hold the list of object
files.

All the variables and phony rules used by the module are prefixed with
@code{<@var{identifier}>_sinprog}.

Debugging symbols are stripped from the program if
@code{ds_config_ENABLE_STRIP} is set to @code{yes}.  @ref{compilers
options,Command line options}

The command line of the linker is composed with:

@example
$(eval $(call ds-cc-link-program,<IDENTIFIER>_sinprog))
@end example

@noindent
and all the variables defined by @code{ds-cc-link-program} are
available for customisation; additionally the following variables are
available to configure the module:

@table @code
@item <IDENTIFIER>_sinprog_RULESET ?= bin
Selects the main phony rules section this module belongs to.

@item <IDENTIFIER>_sinprog_BUILDDIR ?= $(builddir)/programs.d
Select the output directory for the executable file.

@item <IDENTIFIER>_sinprog_OBJECTS ?= $(<IDENTIFIER>_TARGETS)
The list of object files to be linked in the executable, prefixed with
the directory in which they are to be found; this is exactly what is
produced by the @func{ds-c-sources} function.  @ref{clang module
objects, Compiling object files}.

@item <IDENTIFIER>_sinprog_PREFIX ?=
A string that is prefixed to @var{PROGNAME} to build the true name of
the program.

@item <IDENTIFIER>_sinprog_INSTDIR ?= $(pkglibexecdir)
The directory in which to install the files.
@end table

The following variables are available for inspection:

@table @code
@item <IDENTIFIER>_sinprog_NAME
The @var{progname} argument prefixed with the selected program prefix.

@item <IDENTIFIER>_sinprog_PATHNAME
The file name of the program prefixed with the build directory in which
it is created.

@item <IDENTIFIER>_sinprog_TARGETS
The list of targets for this module; should be the program file name
prefixed with its build directory.

@item <IDENTIFIER>_sinprog_INSTLST
The list of files to install, prefixed with the directory in which they
are to be found.
@end table

We can think of the core of the phony rules as generated with:

@example
$(eval $(call ds-module,<@var{identifier}>_sinprog,\
   $(<@var{identifier}>_sinprog_RULESET),BIN))
@end example
@end deffn

@c ------------------------------------------------------------

@subsubheading Wrapper script

Notice that, by default, the program is installed under
@code{$(pkglibexecdir)}, so, with usual system configurations, it will
not be found by applications inspecting the @env{PATH} search path.
This is fine if we install in @code{$(bindir)} a wrapper shell script
that executes the real program after environment setup.

Such a script can be called @var{progname} and it can be subject of
@gnu{} Autoconf substitutions; so it can be something like:

@example
#!/bin/bash
#
# Launcher for '@var{progname}'.

PACKAGE_NAME="@@PACKAGE_NAME"
PACKAGE_VERSION="@@PACKAGE_VERSION@@"
PKG_DIR="@@PKG_DIR@@"

prefix="@@prefix@@"
exec_prefix="@@exec_prefix@@"
libexecdir="@@libexecdir@@"
pkglibexecdir="@@pkglibexecdir@@"

PROGRAM_NAME="@var{progname}"

# System administrator customisable settings:
#export LD_LIBRARY_PATH=
export PATH=/bin:/usr/bin:/usr/local/bin

exec "$pkglibexecdir/$PROGRAM_NAME" "$@@"

### end of file
@end example

@c page
@node clang module progs multi
@subsubsection Linking several programs


@cindex @code{ds_config_ENABLE_STRIP}, stripping symbols from several programs.
@cindex @func{ds-cc-link-program}, linking several object files into a several programs.


@deffn {Makefile Section} ds-c-programs @var{identifier}
@deffnx {Makefile Section} ds-c-programs-no-install @var{identifier}
Define what is needed to link a set of object files into a set of
executable programs: one object file for each program.  The no install
version does not install the linked programs.

This section is meant to link a set of object files produced with
@func{ds-c-sources}, but notice that the only interface from
@func{ds-c-sources} to @func{ds-c-programs} is the variable
@code{<@var{identifier}>_TARGETS} which must hold the list of object
files.

All the variables and phony rules used by the module are prefixed with
@code{<@var{identifier}>_programs}.

Debugging symbols are stripped from the program if
@code{ds_config_ENABLE_STRIP} is set to @code{yes}.  @ref{compilers
options,Command line options}

The command line of the linker is composed with:

@example
$(eval $(call ds-cc-link-program,<IDENTIFIER>_programs))
@end example

@noindent
and all the variables defined by @code{ds-cc-link-program} are
available for customisation; additionally the following variables are
available to configure the module:

@table @code
@item <IDENTIFIER>_programs_RULESET ?= bin
Select the ruleset this module belongs to.

@item <IDENTIFIER>_programs_SRCDIR ?= $(<IDENTIFIER>_BUILDDIR)
The source directory in which the object files are to be found; all the
object files have to be in the same directory.  The deafult value is
exactly what is defined by @func{ds-c-sources}.  @ref{clang module
objects, Compiling object files}.

@item <IDENTIFIER>_programs_BUILDDIR ?= $(builddir)/programs.d
Select the output directory for the executable files.

@item <IDENTIFIER>_programs_OBJECTS ?= $(<IDENTIFIER>_TARGETS)
The list of object files to be linked in the executables, prefixed with
the directory in which they are to be found.  This is exactly what is
produced by the @func{ds-c-sources} function.  @ref{clang module
objects, Compiling object files}.

@item <IDENTIFIER>_programs_PREFIX ?=
A string that is prefixed to the name of the programs.

@item <IDENTIFIER>_programs_INSTDIR ?= $(pkglibexecdir)
The directory in which to install the files.
@end table

The following variables are available for inspection:

@table @code
@item <IDENTIFIER>_programs_NAMES
The list of names of the produced programs; it is built by stripping the
extension from the object file names and prefixing with the selected
prefix.

@item <IDENTIFIER>_programs_PATHNAMES
The list of file pathnames.

@item <IDENTIFIER>_programs_TARGETS
The list of targets for this module.  It should be the list of
executable programs pathnames.

@item <IDENTIFIER>_programs_INSTLST
The list of files to install, prefixed with the directory in which they
are to be found.
@end table

We can think of the core of the phony rules as generated with:

@example
$(eval $(call ds-module,<@var{identifier}>_programs,\
   $(<@var{identifier}>_programs_RULESET),BIN))
@end example
@end deffn


@c page
@node clang module progs examples
@subsubsection Linking example programs


@cindex Compiling example programs
@cindex Example programs, compilation


@deffn {Makefile Section} ds-c-example-programs @var{IDENTIFIER}
Define what is needed to compile and link a set of example programs.
Calling it with:

@example
$(eval $(call ds-c-example-programs,mine))
@end example

@noindent
expands to:

@example
mine_examples_RULESET           = examples
mine_examples_SRCDIR            ?= $(srcdir)/examples
mine_examples_BUILDDIR          ?= $(builddir)/examples.d

mine_examples_programs_RULESET  = examples
mine_examples_programs_BUILDDIR ?= $(mine_examples_BUILDDIR)

$(eval $(call ds-c-sources,mine_examples))
$(eval $(call ds-c-programs-no-install,mine_examples))
@end example
@end deffn

@c page
@node clang module progs tests
@subsubsection Building test programs


@cindex Compiling test programs
@cindex Test programs, compilation


@deffn {Makefile Section} ds-c-test-programs @var{IDENTIFIER}
Define what is needed to compile and link a set of example programs.
Calling it with:

@example
$(eval $(call ds-c-test-programs,mine))
@end example

@noindent
expands to:

@example
mine_tests_RULESET           = tests
mine_tests_SRCDIR            ?= $(srcdir)/tests
mine_tests_BUILDDIR          ?= $(builddir)/tests.d

mine_tests_programs_RULESET  = tests
mine_tests_programs_BUILDDIR ?= $(mine_tests_BUILDDIR)

$(eval $(call ds-c-sources,mine_tests))
$(eval $(call ds-c-programs-no-install,mine_tests))
@end example
@end deffn

@c page
@node clang misc
@section Miscellaneous modules


@deffn {Makefile Module} ds-h-files-installer @var{identifier} @var{srcdir} [@var{patterns}]
Define what is needed to install a set of C header files.  All the
variables used by the module are prefixed with
@code{<IDENTIFIER>_c_headers}.

@var{srcdir} must be the directory from which files are collected,
selecting them with @var{patterns}.  The default of @var{patterns} is
@code{*.h}.

The following variables are available for configuration and inspection:

@table @code
@item <IDENTIFIER>_c_headers_RULESET
selects the main phony rules section this module belongs to; defaults to
@code{dev};

@item <IDENTIFIER>_c_headers_SRCDIR
the selected source directory;

@item <IDENTIFIER>_c_headers_PATTERNS
the selected file patterns;

@item <IDENTIFIER>_c_headers_INSTLST
the list of files that will be installed;

@item <IDENTIFIER>_c_headers_INSTDIR
the installation directory; defaults to @code{$(pkgincludedir)}.
@end table
@end deffn


@c page
@node cxxlang
@chapter C++ language support


Support for the C++ language is almost equal to the one for C language,
and partiall depends upon it.

@menu
* cxxlang language::            Language configuration.
* cxxlang variables::           Makefile variables.
* cxxlang invocation::          Invoking the compiler and the linker.
* cxxlang module::              Compiler modules.
* cxxlang misc::                Miscellaneous modules.
@end menu

@c page
@node cxxlang language
@section Language configuration


To enable support for C++ we must include both the @code{C_LANGUAGE} and
the @code{CXX_LANGUAGE} sections and initialise support for the C
language.  The @file{configure.ac} template should include a chunk like
this:

@example
DS_INCLUDE_SECTION([DEV_RULES])
DS_INCLUDE_SECTION([C_LANGUAGE])
DS_INCLUDE_SECTION([CXX_LANGUAGE])
DS_COMPILED_STUFF
DS_SYSTEM_SETUP
DS_C99_LANGUAGE
DS_CXX_LANGUAGE
@end example


@deffn {Autoconf Macro} DS_CXX_LANGUAGE
Run the tests required to setup the C++ language environment.
@end deffn


@c page
@node cxxlang variables
@section Makefile variables


@defvr {Configuration Variable} CXXFLAGS
Must be set to a list of options for the C compiler.  In the makefile it
defaults to @code{@@CXXFLAGS@@}, which is set by the Autoconf macro
@code{AC_PROG_CXX} and usually expands to @code{-g -O2}.  It is used by
@code{ds-cxx-compile}.

This variable can be preset on the command line of @command{configure}
and @command{make}.
@end defvr


@defvr {Makefile Variable} CXX
The C++ language compiler.
@end defvr


@defvr {Makefile Variable} GXX_WARNINGS
Default warning options for the @gcc{} C++ compiler.  If the
configuration variable @code{ds_config_ENABLE_GCC_WARNING} is set to
@code{yes} (its default) @code{GXX_WARNINGS} is set to the following
list of options:

@example
-Wall                   -W
-Wextra                 -pedantic
-Wpointer-arith         -Wcast-qual
-Wcast-align            -Wwrite-strings
-Wshadow                -fno-common
@end example

@noindent
else it is left unset.
@end defvr


@defvr {Makefile Variable} CXX_COMPILE_OUTPUT
If the C++ language compiler accepts the @code{-c -o} options
simultaneously to produce object files: this variable is set to @code{-c
-o}; else it is set to @code{-o}.
@end defvr


@defvr {Makefile Variable} CXX_LINK_OUTPUT
Set to @code{-o}, it is meant to be used to select the output of a
linker invocation.
@end defvr

@c page
@node cxxlang invocation
@section Invoking the compiler and the linker


The C++ compiler ivocation is much similar to the one for the C
language.  @ref{clang invocation, Invoking the compiler and the linker}.

@menu
* cxxlang invocation objects::   Preprocessing and compiling
                                 source files.
* cxxlang invocation programs::  Linking programs.
* cxxlang invocation libraries:: Linking shared libraries.
@end menu

@c page
@node cxxlang invocation objects
@subsection Preprocessing and compiling source files


@deffn {Makefile Function} ds-cxx-compile @var{identifier}
Define variables to be used to preprocess and compile a C++ source file
into an object file.  The following:

@example
$(eval $(call ds-cxx-compile,mine))
@end example

@noindent
expands to:

@example
mine_CXX_COMPILE_ENV      ?=
mine_CXX_COMPILE_CXX      ?= $(CXX) $(GCC_PIPE)
mine_CXX_COMPILE_INCLUDES ?=
mine_CXX_COMPILE_CPPFLAGS ?= $(DEFS) $(CPPFLAGS)
mine_CXX_COMPILE_CXXFLAGS ?= $(GXX_WARNINGS) $(CXXFLAGS)
mine_CXX_COMPILE_MORE     ?=
mine_CXX_COMPILE          ?= $(mine_CXX_COMPILE_ENV)      \
                             $(mine_CXX_COMPILE_CXX)      \
                             $(mine_CXX_COMPILE_INCLUDES) \
                             $(mine_CXX_COMPILE_CPPFLAGS) \
                             $(mine_CXX_COMPILE_CXXFLAGS) \
                             $(mine_CXX_COMPILE_MORE)     \
                             $(CXX_COMPILE_OUTPUT)
@end example

@noindent
we are fully free to preset all the variables.  To use the produced
variables to compile object files we can do:

@example
$(mine_BUILDDIR)/%.@@OBJEXT@@                    \
   : $(mine_BUILDDIR)/%.@@OBJEXT@@               \
   : $(mine_SRCDIR)/%.cpp $(mine_PREREQUISITES)
	$(mine_CXX_COMPILE) $(@@) $(<)
@end example
@end deffn

@c page
@node cxxlang invocation programs
@subsection Linking programs


@deffn {Make Function} ds-cxx-link-program @var{identifier}
Define variables to be used to link a set of object files and static
libraries into an executable program.  The following:

@example
$(eval $(call ds-cxx-link-program,mine))
@end example

@noindent
expands to:

@example
mine_CXX_PROGRAM_ENV     ?=
mine_CXX_PROGRAM_CXX     ?= $(CXX) $(GCC_PIPE)
mine_CXX_PROGRAM_LDFLAGS ?= $(LDFLAGS)
mine_CXX_PROGRAM_LIBS    ?= $(LIBS)
mine_CXX_PROGRAM_PRE     ?=
mine_CXX_PROGRAM_POST    ?=
mine_CXX_PROGRAM         ?= $(mine_CXX_PROGRAM_ENV)       \
                            $(mine_CXX_PROGRAM_CXX)       \
                            $(mine_CXX_PROGRAM_LDFLAGS)   \
                            $(mine_CXX_PROGRAM_PRE)       \
                            $(mine_CXX_PROGRAM_LIBS)      \
                            $(CXX_LINK_OUTPUT) $(@@) $(^) \
                            $(mine_CXX_PROGRAM_POST)
@end example

@noindent
we are fully free to preset all the variables; notice that all the
prerequisites are included as object files (through @code{$(^)}).

To use the variables we can do:

@example
$(mine_program_PATHNAME) : $(mine_program_OBJECTS)
	$(mine_program_CXX_PROGRAM)
ifeq ($(ds_config_ENABLE_STRIP),yes)
	$(STRIP) $(@@)
endif
@end example
@end deffn

@c page
@node cxxlang invocation libraries
@subsection Linking shared libraries


@deffn {Make Function} ds-cxx-link-shared-library @var{identifier}
Define variables to be used to link a set of object files and static
libraries into a shared library.  The following:

@example
$(eval $(call ds-cxx-link-shared-library,mine))
@end example

@noindent
expands to:

@example
mine_CXX_SHLIB_ENV     ?=
mine_CXX_SHLIB_CXX     ?= $(CXX) $(GCC_PIPE) $(GCC_SHARED)
mine_CXX_SHLIB_LDFLAGS ?= $(LDFLAGS)
mine_CXX_SHLIB_LIBS    ?= $(LIBS)
mine_CXX_SHLIB_PRE     ?=
mine_CXX_SHLIB_POST    ?=
mine_CXX_SHLIB         ?= $(mine_CXX_SHLIB_ENV)         \
                          $(mine_CXX_SHLIB_CXX)         \
                          $(mine_CXX_SHLIB_LDFLAGS)     \
                          $(mine_CXX_SHLIB_PRE)         \
                          $(mine_CXX_SHLIB_LIBS)        \
                          $(CXX_LINK_OUTPUT) $(@@) $(^) \
                          $(mine_CXX_SHLIB_POST)
@end example

@noindent
we are fully free to preset all the variables; notice that all the
prerequisites are included as object files (through @code{$(^)}).

To use the variables we can do:

@example
$(mine_shared_library_PATHNAME) : $(mine_shared_library_OBJECTS)
        $(mine_CXX_SHLIB)
ifeq ($(ds_config_ENABLE_STRIP),yes)
        $(STRIP) $(@@)
endif
@end example
@end deffn

@c page
@node cxxlang module
@section Compiler modules


@menu
* cxxlang module objects::      Compiling object files.
* cxxlang module libs::         Building libraries.
* cxxlang module progs::        Building programs.
@end menu

@c page
@node cxxlang module objects
@subsection Compiling object files


To compile a set of C++ language source files into object files we do
this:

@example
$(eval $(call ds-cxx-sources,mine))
@end example

@noindent
which collects the files matching @code{$(srcdir)/src/*.cpp} and
compiles them into object files under @code{$(builddir)/objects.d}.


@deffn {Makefile Section} ds-cxx-sources @var{identifier}
Define what is needed to compile a set of C++ source files into object
files.  All the variables used by the module are prefixed with
@var{identifier}.

The core rules of the module is built with:

@example
$(eval $(call ds-module-no-install,
   <@var{identifier}>, $(<@var{identifier}>_RULESET)))
@end example

@noindent
and the command line of the compiler is composed with:

@example
$(eval $(call ds-cxx-compile,<@var{identifier}>))
@end example

@noindent
and all the variables defined by @code{ds-cxx-compile} are available for
customisation; additionally, the following variables are available to
configure the module:

@table @code
@item <@var{identifier}>_RULESET ?= bin
selects the main ruleset this module belongs to;

@item <@var{identifier}>_SRCDIR ?= $(srcdir)/src
the directory from which source files are collected; this directory is
added to the search path for @code{%.h} files using the @code{vpath}
directive;

@item <@var{identifier}>_BUILDDIR ?= $(builddir)/objects.d
the directory in which output object files are created; this directory
is added to the search path for @code{%.@@OBJEXT@@} files using the
@code{vpath} directive;

@item <@var{identifier}>_PATTERNS ?= *.cpp
a list of wildcard patterns used to select source files from the source
directory; the list of source files is built with:

@example
$(call ds-glob,<@var{identifier}>,$(<@var{identifier}>_PATTERNS))
@end example

@item <@var{identifier}>_PREREQUISITES ?=
selects a list of prerequisites for the building rule, which is usually
a list of header files; notice that this list is not prefixed with the
source directory, but can benefit of the search paths selected with
@code{vpath};
@end table

@noindent
notice that the following options:

@example
-I$(builddir) -I$(<@var{identifier}>_SRCDIR)
@end example

@noindent
are added to the command line of the compiler to let it find the header
files for this module (under @code{$(<@var{identifier}>_SRCDIR)}) and
the @file{config.h} file (under @code{$(builddir)}).

The following variables are available for module inspection and usage:

@table @code
@item <@var{identifier}>_SOURCES
the list of selected source file pathnames;

@item <@var{identifier}>_TARGETS
the list of object file pathnames that are produced by this module;

@item <@var{identifier}>_MOSTLYCLEANFILES += $(<@var{identifier}>_TARGETS)
the list of files to clean for this module;

@item <@var{identifier}>_CLEANFILES += $(<@var{identifier}>_MOSTLYCLEANFILES)
the list of files to really clean for this module;
@end table

@noindent
all the phony rules defined by @code{ds-module} are available to drive
the module.
@end deffn

@c page
@node cxxlang module libs
@subsection Building libraries


@ref{clang module libs, Building libraries}, for and introduction to
library support.

@ref{clang module libs macros, Autoconf macros defining libraries}, for
an explanation of how to declare a library in the @file{configure.ac}
template.

@ref{clang module libs static, Building static libraries}, for an
explanation of how to link a set of object files into a static library.

@menu
* cxxlang module libs shared::  Building shared libraries.
* cxxlang module libs misc::    Miscellaneous makefile sections.
@end menu

@c page
@node cxxlang module libs shared
@subsubsection Building shared libraries


@deffn {Makefile Section} ds-cxx-shared-library @var{identifier}
Define what is needed to link a set of object files into a shared
library.  The expansion of this function is included only if
@code{ds_config_ENABLE_SHARED} is set to @code{yes}.  @ref{compilers
options,Command line options}

This section is meant to link a set of object files produced with
@func{ds-cxx-sources}, but notice that the only interface from
@func{ds-cxx-sources} to @func{ds-cxx-shared-library} is the variable
@code{<@var{identifier}>_TARGETS} which must hold the list of object
files.

All the variables and phony rules used by the module are prefixed with
@code{<@var{identifier}>_shlib}.

Debugging symbols are stripped from the shared library if
@code{ds_config_ENABLE_STRIP} is set to @code{yes}.  @ref{compilers
options,Command line options}

The command line of the linker is composed with:

@example
$(eval $(call ds-cxx-link-library,<IDENTIFIER>_shlib))
@end example

@noindent
and all the variables defined by @code{ds-cxx-link-library} are
available for customisation; additionally the following variables are
available to configure the module:

@table @code
@item <IDENTIFIER>_shlib_RULESET ?= bin
Selects the ruleset this module belongs to.

@item <@var{identifier}>_shlib_BUILDDIR ?= $(builddir)/libraries.d
Select the output directory for the library file.

@item <IDENTIFIER>_shlib_OBJECTS ?= $(<IDENTIFIER>_TARGETS)
The list of object files to be included in the library, prefixed with
the directory in which they are to be found.  The default value is
consistent with the interface of @func{ds-c-sources}.  @ref{clang module
objects, Compiling object files}.

@item <IDENTIFIER>_shlib_INSTDIR ?= $(libdir)
The directory in which to install the files.
@end table

The following variables are available for inspection:

@table @code
@item <IDENTIFIER>_shlib_NAME
The file name of the shared library.

@item <IDENTIFIER>_shlib_PATHNAME
The file name of the shared library prefixed with the build directory.

@item <IDENTIFIER>_shlib_LINK_NAME
The name of the symbolic link to the shared library file.

@item <IDENTIFIER>_shlib_LINK_PATHNAME
The name of the symbolic link to the shared library file prefixed with
the build directory.

@item <IDENTIFIER>_shlib_TARGETS
The list of targets for this module.  It should be the shared library
file name and the symbolic link name, both prefixed with the build
directory.

@item <IDENTIFIER>_shlib_INSTLST
The list of files to install, prefixed with the directory in which they
are to be found.  It should be the library file name; notice that the
symbolic link is also installed, but it is directly created in the
destination directory.
@end table

The core of the phony rules is generated with:

@example
$(eval $(call ds-module,<@var{identifier}>_shlib,\
   $(<@var{identifier}>_shlib_RULESET),LIB))
@end example
@end deffn

@c page
@node cxxlang module libs misc
@subsubsection Miscellaneous makefile sections


@deffn {Makefile Section} ds-cxx-library @var{identifier}
Helper section to build both a shared and static library.  Calling:

@example
$(eval $(call ds-cxx-library,mine))
@end example

@noindent
expands to:

@example
include meta.d/makefiles/mine-clib.make
$(eval $(call ds-cxx-sources,mine))
$(eval $(call ds-cxx-shared-library,mine))
$(eval $(call ds-c-static-library,mine))
@end example
@end deffn


@deffn {Makefile Section} ds-cxx-library-extended @var{identifier}
Helper section to build both a shared and static library, and install
header files.  Calling:

@example
$(eval $(call ds-cxx-library-extended,mine))
@end example

@noindent
expands to:

@example
$(eval $(call ds-cxx-library,mine))
$(eval $(call ds-hpp-files-installer,mine))
@end example
@end deffn

@c page
@node cxxlang module progs
@subsection Building programs


Support for linking programs is much similar to the one of the C language.

@menu
* cxxlang module progs single::   Linking several object files
                                  into a single program.
* cxxlang module progs multi::    Linking several programs.
* cxxlang module progs examples:: Building example programs.
* cxxlang module progs tests::    Building test programs.
@end menu

@c page
@node cxxlang module progs single
@subsubsection Linking several object files into a single program


@cindex @code{ds_config_ENABLE_STRIP}, stripping symbols from single programs.
@cindex @func{ds-cxx-link-program}, linking several object files into a single program.


@deffn {Makefile Section} ds-cxx-single-program @var{identifier} @var{progname}
@deffnx {Makefile Section} ds-cxx-single-program-no-install @var{identifier} @var{progname}
Define what is needed to link a set of object files into an executable
program.  The no install version does not define installation rules for
the output program.

This section is meant to link a set of object files produced with
@func{ds-cxx-sources}, but notice that the only interface from
@func{ds-cxx-sources} to @func{ds-cxx-single-program} is the variable
@code{<@var{identifier}>_TARGETS} which must hold the list of object
files.

All the variables and phony rules used by the module are prefixed with
@code{<@var{identifier}>_sinprog}.

Debugging symbols are stripped from the program if
@code{ds_config_ENABLE_STRIP} is set to @code{yes}.  @ref{compilers
options,Command line options}

The command line of the linker is composed with:

@example
$(eval $(call ds-cxx-link-program,<IDENTIFIER>_sinprog))
@end example

@noindent
and all the variables defined by @code{ds-cxx-link-program} are
available for customisation; additionally the following variables are
available to configure the module:

@table @code
@item <IDENTIFIER>_sinprog_RULESET ?= bin
Selects the main phony rules section this module belongs to.

@item <IDENTIFIER>_sinprog_BUILDDIR ?= $(builddir)/programs.d
Select the output directory for the executable file.

@item <IDENTIFIER>_sinprog_OBJECTS ?= $(<IDENTIFIER>_TARGETS)
The list of object files to be linked in the executable, prefixed with
the directory in which they are to be found; this is exactly what is
produced by the @func{ds-c-sources} function.  @ref{cxxlang module
objects, Compiling object files}.

@item <IDENTIFIER>_sinprog_PREFIX ?=
A string that is prefixed to @var{PROGNAME} to build the true name of
the program.

@item <IDENTIFIER>_sinprog_INSTDIR ?= $(pkglibexecdir)
The directory in which to install the files.
@end table

The following variables are available for inspection:

@table @code
@item <IDENTIFIER>_sinprog_NAME
The @var{progname} argument prefixed with the selected program prefix.

@item <IDENTIFIER>_sinprog_PATHNAME
The file name of the program prefixed with the build directory in which
it is created.

@item <IDENTIFIER>_sinprog_TARGETS
The list of targets for this module; should be the program file name
prefixed with its build directory.

@item <IDENTIFIER>_sinprog_INSTLST
The list of files to install, prefixed with the directory in which they
are to be found.
@end table

We can think of the core of the phony rules as generated with:

@example
$(eval $(call ds-module,<@var{identifier}>_sinprog,\
   $(<@var{identifier}>_sinprog_RULESET),BIN))
@end example
@end deffn

@c page
@node cxxlang module progs multi
@subsubsection Linking several programs


@cindex @code{ds_config_ENABLE_STRIP}, stripping symbols from several programs.
@cindex @func{ds-cxx-link-program}, linking several object files into a several programs.


@deffn {Makefile Section} ds-cxx-programs @var{identifier}
@deffnx {Makefile Section} ds-cxx-programs-no-install @var{identifier}
Define what is needed to link a set of object files into a set of
executable programs: one object file for each program.  The no install
version does not install the linked programs.

This section is meant to link a set of object files produced with
@func{ds-cxx-sources}, but notice that the only interface from
@func{ds-cxx-sources} to @func{ds-cxx-programs} is the variable
@code{<@var{identifier}>_TARGETS} which must hold the list of object
files.

All the variables and phony rules used by the module are prefixed with
@code{<@var{identifier}>_programs}.

Debugging symbols are stripped from the program if
@code{ds_config_ENABLE_STRIP} is set to @code{yes}.  @ref{compilers
options,Command line options}

The command line of the linker is composed with:

@example
$(eval $(call ds-cxx-link-program,<IDENTIFIER>_programs))
@end example

@noindent
and all the variables defined by @code{ds-cxx-link-program} are
available for customisation; additionally the following variables are
available to configure the module:

@table @code
@item <IDENTIFIER>_programs_RULESET ?= bin
Select the ruleset this module belongs to.

@item <IDENTIFIER>_programs_SRCDIR ?= $(<IDENTIFIER>_BUILDDIR)
The source directory in which the object files are to be found; all the
object files have to be in the same directory.  The deafult value is
exactly what is defined by @func{ds-c-sources}.  @ref{cxxlang module
objects, Compiling object files}.

@item <IDENTIFIER>_programs_BUILDDIR ?= $(builddir)/programs.d
Select the output directory for the executable files.

@item <IDENTIFIER>_programs_OBJECTS ?= $(<IDENTIFIER>_TARGETS)
The list of object files to be linked in the executables, prefixed with
the directory in which they are to be found.  This is exactly what is
produced by the @func{ds-c-sources} function.  @ref{cxxlang module
objects, Compiling object files}.

@item <IDENTIFIER>_programs_PREFIX ?=
A string that is prefixed to the name of the programs.

@item <IDENTIFIER>_programs_INSTDIR ?= $(pkglibexecdir)
The directory in which to install the files.
@end table

The following variables are available for inspection:

@table @code
@item <IDENTIFIER>_programs_NAMES
The list of names of the produced programs; it is built by stripping the
extension from the object file names and prefixing with the selected
prefix.

@item <IDENTIFIER>_programs_PATHNAMES
The list of file pathnames.

@item <IDENTIFIER>_programs_TARGETS
The list of targets for this module.  It should be the list of
executable programs pathnames.

@item <IDENTIFIER>_programs_INSTLST
The list of files to install, prefixed with the directory in which they
are to be found.
@end table

We can think of the core of the phony rules as generated with:

@example
$(eval $(call ds-module,<@var{identifier}>_programs,\
   $(<@var{identifier}>_programs_RULESET),BIN))
@end example
@end deffn


@c page
@node cxxlang module progs examples
@subsubsection Linking example programs


@cindex Compiling example programs
@cindex Example programs, compilation


@deffn {Makefile Section} ds-cxx-example-programs @var{IDENTIFIER}
Define what is needed to compile and link a set of example programs.
Calling it with:

@example
$(eval $(call ds-cxx-example-programs,mine))
@end example

@noindent
expands to:

@example
mine_examples_RULESET           = examples
mine_examples_SRCDIR            ?= $(srcdir)/examples
mine_examples_BUILDDIR          ?= $(builddir)/examples.d

mine_examples_programs_RULESET  = examples
mine_examples_programs_BUILDDIR ?= $(mine_examples_BUILDDIR)

$(eval $(call ds-cxx-sources,mine_examples))
$(eval $(call ds-cxx-programs-no-install,mine_examples))
@end example
@end deffn

@c page
@node cxxlang module progs tests
@subsubsection Building test programs


@cindex Compiling test programs
@cindex Test programs, compilation


@deffn {Makefile Section} ds-cxx-test-programs @var{IDENTIFIER}
Define what is needed to compile and link a set of example programs.
Calling it with:

@example
$(eval $(call ds-c-test-programs,mine))
@end example

@noindent
expands to:

@example
mine_tests_RULESET           = tests
mine_tests_SRCDIR            ?= $(srcdir)/tests
mine_tests_BUILDDIR          ?= $(builddir)/tests.d

mine_tests_programs_RULESET  = tests
mine_tests_programs_BUILDDIR ?= $(mine_tests_BUILDDIR)

$(eval $(call ds-cxx-sources,mine_tests))
$(eval $(call ds-cxx-programs-no-install,mine_tests))
@end example
@end deffn

@c page
@node cxxlang misc
@section Miscellaneous modules


@deffn {Makefile Module} ds-hpp-files-installer @var{identifier} @var{srcdir} [@var{patterns}]
Define what is needed to install a set of C++ header files.  All the
variables used by the module are prefixed with
@code{<IDENTIFIER>_cxx_headers}.

@var{srcdir} must be the directory from which files are collected,
selecting them with @var{patterns}.  The default of @var{patterns} is
@code{*.hpp}.

The following variables are available for configuration and inspection:

@table @code
@item <IDENTIFIER>_cxx_headers_RULESET
selects the main phony rules section this module belongs to; defaults to
@code{dev};

@item <IDENTIFIER>_cxx_headers_SRCDIR
the selected source directory;

@item <IDENTIFIER>_cxx_headers_PATTERNS
the selected file patterns;

@item <IDENTIFIER>_cxx_headers_INSTLST
the list of files that will be installed;

@item <IDENTIFIER>_cxx_headers_INSTDIR
the installation directory; defaults to @code{$(pkgincludedir)}.
@end table
@end deffn


@c page
@node makevars
@appendix Understanding @file{Makefile} variables


To use the library effectively we have to understand how @gnu{} Make
substitutes variables.  This section is not a full tutorial on @make{}
variables, rather it is a selection of examples to highlight some of the
features.

This section describes:

@example
$ make --version
GNU Make 3.81
Copyright (C) 2006  Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

This program built for i486-slackware-linux-gnu
@end example

@c ------------------------------------------------------------

@subsubheading Multiple assignment

When a variable is assigned multiple times at the toplevel: the last
assignment wins; @make{} first reads the whole @file{Makefile}, then
substitutes the variables in the rule's commands:

@example
alpha   = 123
beta    = 456

.PHONY: all alpha beta

all: alpha beta

alpha:
        @@echo $(alpha) $(beta)

alpha   = abc

beta:
        @@echo $(alpha) $(beta)
@end example

@noindent
example outputs:

@example
$ make all
abc 456
abc 456

$ make beta
abc 456

$ make beta alpha
abc 456
abc 456
@end example

@noindent
changing @code{=} to @code{:=} makes no difference in this example.

@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@subsubheading Expansion of functions

Read the @gnu{} Make documentation to understand the expansion rules for
functions; functions are variables, too.  Basically a function is
defined with:

@example
define <funcname>
<funcbody>
endef
@end example

@noindent
and is invoked with:

@example
$(call <funcname>,arg1,arg2,...)
@end example

@noindent
in the body: positional parameters are available as @code{$(1)},
@code{$(2)}, @code{$(3)}, @dots{}

A piece of makefile can be defined as function body by expanding a
function with @code{eval}, example:

@example
$(eval $(call <funcname>,arg1,arg2,...))
@end example

@noindent
this evaluates @strong{twice} the body of the function; to prevent the
expansion of a function inside the body use @code{$$}, example:

@example
blu = 123

define spiffy
$(blu)
$$(red)
endef

$(eval $(call spiffy))
@end example

@noindent
is equivalent to putting in the makefile:

@example
123
$(red)
@end example


@strong{Expansion warning} Leading tab chars in the body of functions
are not interpreted as valid separators in their @code{eval} expansion;
this means that to put in a makefile:

@example
target: prerequisite
        command1
@end example

@noindent
we have to use:

@example
define doit
target: prerequisite ; command1
endef

$(eval $(call doit))
@end example

@noindent
and to put in a make file:

@example
target: prerequisite
        command1
        command2
@end example

@noindent
we have to use:

@example
define doit-commands
command1
command2
endef

target: prerequisite ; $(call doit-commands)
@end example

@c page

@include libversion.texiinc

@c page
@node Package License
@appendix @gnu{} General Public License

@c The GNU General Public License.
@center Version 3, 29 June 2007

@c This file is intended to be included within another document,
@c hence no sectioning command or @node.

@display
Copyright @copyright{} 2007 Free Software Foundation, Inc. @url{http://fsf.org/}

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.
@end display

@heading Preamble

The GNU General Public License is a free, copyleft license for
software and other kinds of works.

The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom
to share and change all versions of a program---to make sure it remains
free software for all its users.  We, the Free Software Foundation,
use the GNU General Public License for most of our software; it
applies also to any other work released this way by its authors.  You
can apply it to your programs, too.

When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you
have certain responsibilities if you distribute copies of the
software, or if you modify it: responsibilities to respect the freedom
of others.

For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too,
receive or can get the source code.  And you must show them these
terms so they know their rights.

Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the
manufacturer can do so.  This is fundamentally incompatible with the
aim of protecting users' freedom to change the software.  The
systematic pattern of such abuse occurs in the area of products for
individuals to use, which is precisely where it is most unacceptable.
Therefore, we have designed this version of the GPL to prohibit the
practice for those products.  If such problems arise substantially in
other domains, we stand ready to extend this provision to those
domains in future versions of the GPL, as needed to protect the
freedom of users.

Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish
to avoid the special danger that patents applied to a free program
could make it effectively proprietary.  To prevent this, the GPL
assures that patents cannot be used to render the program non-free.

The precise terms and conditions for copying, distribution and
modification follow.

@heading TERMS AND CONDITIONS

@enumerate 0
@item Definitions.

``This License'' refers to version 3 of the GNU General Public License.

``Copyright'' also means copyright-like laws that apply to other kinds
of works, such as semiconductor masks.

``The Program'' refers to any copyrightable work licensed under this
License.  Each licensee is addressed as ``you''.  ``Licensees'' and
``recipients'' may be individuals or organizations.

To ``modify'' a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of
an exact copy.  The resulting work is called a ``modified version'' of
the earlier work or a work ``based on'' the earlier work.

A ``covered work'' means either the unmodified Program or a work based
on the Program.

To ``propagate'' a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

To ``convey'' a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user
through a computer network, with no transfer of a copy, is not
conveying.

An interactive user interface displays ``Appropriate Legal Notices'' to
the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

@item Source Code.

The ``source code'' for a work means the preferred form of the work for
making modifications to it.  ``Object code'' means any non-source form
of a work.

A ``Standard Interface'' means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

The ``System Libraries'' of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
``Major Component'', in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

The ``Corresponding Source'' for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

The Corresponding Source need not include anything that users can
regenerate automatically from other parts of the Corresponding Source.

The Corresponding Source for a work in source code form is that same
work.

@item Basic Permissions.

All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

You may make, run and propagate covered works that you do not convey,
without conditions so long as your license otherwise remains in force.
You may convey covered works to others for the sole purpose of having
them make modifications exclusively for you, or provide you with
facilities for running those works, provided that you comply with the
terms of this License in conveying all material for which you do not
control copyright.  Those thus making or running the covered works for
you must do so exclusively on your behalf, under your direction and
control, on terms that prohibit them from making any copies of your
copyrighted material outside their relationship with you.

Conveying under any other circumstances is permitted solely under the
conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

@item Protecting Users' Legal Rights From Anti-Circumvention Law.

No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such
circumvention is effected by exercising rights under this License with
respect to the covered work, and you disclaim any intention to limit
operation or modification of the work as a means of enforcing, against
the work's users, your or third parties' legal rights to forbid
circumvention of technological measures.

@item Conveying Verbatim Copies.

You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

@item Conveying Modified Source Versions.

You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these
conditions:

@enumerate a
@item
The work must carry prominent notices stating that you modified it,
and giving a relevant date.

@item
The work must carry prominent notices stating that it is released
under this License and any conditions added under section 7.  This
requirement modifies the requirement in section 4 to ``keep intact all
notices''.

@item
You must license the entire work, as a whole, under this License to
anyone who comes into possession of a copy.  This License will
therefore apply, along with any applicable section 7 additional terms,
to the whole of the work, and all its parts, regardless of how they
are packaged.  This License gives no permission to license the work in
any other way, but it does not invalidate such permission if you have
separately received it.

@item
If the work has interactive user interfaces, each must display
Appropriate Legal Notices; however, if the Program has interactive
interfaces that do not display Appropriate Legal Notices, your work
need not make them do so.
@end enumerate

A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
``aggregate'' if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

@item  Conveying Non-Source Forms.

You may convey a covered work in object code form under the terms of
sections 4 and 5, provided that you also convey the machine-readable
Corresponding Source under the terms of this License, in one of these
ways:

@enumerate a
@item
Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by the
Corresponding Source fixed on a durable physical medium customarily
used for software interchange.

@item
Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by a written
offer, valid for at least three years and valid for as long as you
offer spare parts or customer support for that product model, to give
anyone who possesses the object code either (1) a copy of the
Corresponding Source for all the software in the product that is
covered by this License, on a durable physical medium customarily used
for software interchange, for a price no more than your reasonable
cost of physically performing this conveying of source, or (2) access
to copy the Corresponding Source from a network server at no charge.

@item
Convey individual copies of the object code with a copy of the written
offer to provide the Corresponding Source.  This alternative is
allowed only occasionally and noncommercially, and only if you
received the object code with such an offer, in accord with subsection
6b.

@item
Convey the object code by offering access from a designated place
(gratis or for a charge), and offer equivalent access to the
Corresponding Source in the same way through the same place at no
further charge.  You need not require recipients to copy the
Corresponding Source along with the object code.  If the place to copy
the object code is a network server, the Corresponding Source may be
on a different server (operated by you or a third party) that supports
equivalent copying facilities, provided you maintain clear directions
next to the object code saying where to find the Corresponding Source.
Regardless of what server hosts the Corresponding Source, you remain
obligated to ensure that it is available for as long as needed to
satisfy these requirements.

@item
Convey the object code using peer-to-peer transmission, provided you
inform other peers where the object code and Corresponding Source of
the work are being offered to the general public at no charge under
subsection 6d.

@end enumerate

A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

A ``User Product'' is either (1) a ``consumer product'', which means any
tangible personal property which is normally used for personal,
family, or household purposes, or (2) anything designed or sold for
incorporation into a dwelling.  In determining whether a product is a
consumer product, doubtful cases shall be resolved in favor of
coverage.  For a particular product received by a particular user,
``normally used'' refers to a typical or common use of that class of
product, regardless of the status of the particular user or of the way
in which the particular user actually uses, or expects or is expected
to use, the product.  A product is a consumer product regardless of
whether the product has substantial commercial, industrial or
non-consumer uses, unless such uses represent the only significant
mode of use of the product.

``Installation Information'' for a User Product means any methods,
procedures, authorization keys, or other information required to
install and execute modified versions of a covered work in that User
Product from a modified version of its Corresponding Source.  The
information must suffice to ensure that the continued functioning of
the modified object code is in no case prevented or interfered with
solely because modification has been made.

If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or
updates for a work that has been modified or installed by the
recipient, or for the User Product in which it has been modified or
installed.  Access to a network may be denied when the modification
itself materially and adversely affects the operation of the network
or violates the rules and protocols for communication across the
network.

Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

@item Additional Terms.

``Additional permissions'' are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders
of that material) supplement the terms of this License with terms:

@enumerate a
@item
Disclaiming warranty or limiting liability differently from the terms
of sections 15 and 16 of this License; or

@item
Requiring preservation of specified reasonable legal notices or author
attributions in that material or in the Appropriate Legal Notices
displayed by works containing it; or

@item
Prohibiting misrepresentation of the origin of that material, or
requiring that modified versions of such material be marked in
reasonable ways as different from the original version; or

@item
Limiting the use for publicity purposes of names of licensors or
authors of the material; or

@item
Declining to grant rights under trademark law for use of some trade
names, trademarks, or service marks; or

@item
Requiring indemnification of licensors and authors of that material by
anyone who conveys the material (or modified versions of it) with
contractual assumptions of liability to the recipient, for any
liability that these contractual assumptions directly impose on those
licensors and authors.
@end enumerate

All other non-permissive additional terms are considered ``further
restrictions'' within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions; the
above requirements apply either way.

@item Termination.

You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

@item Acceptance Not Required for Having Copies.

You are not required to accept this License in order to receive or run
a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

@item Automatic Licensing of Downstream Recipients.

Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

An ``entity transaction'' is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

@item Patents.

A ``contributor'' is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's ``contributor version''.

A contributor's ``essential patent claims'' are all patent claims owned
or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, ``control'' includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

In the following three paragraphs, a ``patent license'' is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To ``grant'' such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  ``Knowingly relying'' means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

A patent license is ``discriminatory'' if it does not include within the
scope of its coverage, prohibits the exercise of, or is conditioned on
the non-exercise of one or more of the rights that are specifically
granted under this License.  You may not convey a covered work if you
are a party to an arrangement with a third party that is in the
business of distributing software, under which you make payment to the
third party based on the extent of your activity of conveying the
work, and under which the third party grants, to any of the parties
who would receive the covered work from you, a discriminatory patent
license (a) in connection with copies of the covered work conveyed by
you (or copies made from those copies), or (b) primarily for and in
connection with specific products or compilations that contain the
covered work, unless you entered into that arrangement, or that patent
license was granted, prior to 28 March 2007.

Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

@item No Surrender of Others' Freedom.

If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey
a covered work so as to satisfy simultaneously your obligations under
this License and any other pertinent obligations, then as a
consequence you may not convey it at all.  For example, if you agree
to terms that obligate you to collect a royalty for further conveying
from those to whom you convey the Program, the only way you could
satisfy both those terms and this License would be to refrain entirely
from conveying the Program.

@item Use with the GNU Affero General Public License.

Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

@item Revised Versions of this License.

The Free Software Foundation may publish revised and/or new versions
of the GNU General Public License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies that a certain numbered version of the GNU General Public
License ``or any later version'' applies to it, you have the option of
following the terms and conditions either of that numbered version or
of any later version published by the Free Software Foundation.  If
the Program does not specify a version number of the GNU General
Public License, you may choose any version ever published by the Free
Software Foundation.

If the Program specifies that a proxy can decide which future versions
of the GNU General Public License can be used, that proxy's public
statement of acceptance of a version permanently authorizes you to
choose that version for the Program.

Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

@item Disclaimer of Warranty.

THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM ``AS IS'' WITHOUT
WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND
PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE
DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
CORRECTION.

@item Limitation of Liability.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR
CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR
LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM
TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER
PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

@item Interpretation of Sections 15 and 16.

If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

@end enumerate

@heading END OF TERMS AND CONDITIONS

@heading How to Apply These Terms to Your New Programs

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the ``copyright'' line and a pointer to where the full notice is found.

@smallexample
@var{one line to give the program's name and a brief idea of what it does.}
Copyright (C) @var{year} @var{name of author}

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see @url{http://www.gnu.org/licenses/}.
@end smallexample

Also add information on how to contact you by electronic and paper mail.

If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

@smallexample
@var{program} Copyright (C) @var{year} @var{name of author}
This program comes with ABSOLUTELY NO WARRANTY; for details type @samp{show w}.
This is free software, and you are welcome to redistribute it
under certain conditions; type @samp{show c} for details.
@end smallexample

The hypothetical commands @samp{show w} and @samp{show c} should show
the appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an ``about box''.

You should also get your employer (if you work as a programmer) or school,
if any, to sign a ``copyright disclaimer'' for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
@url{http://www.gnu.org/licenses/}.

The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use
the GNU Lesser General Public License instead of this License.  But
first, please read @url{http://www.gnu.org/philosophy/why-not-lgpl.html}.

@c ------------------------------------------------------------

@c page
@node Documentation License
@appendix GNU Free Documentation License

@cindex FDL, GNU Free Documentation License
@center Version 1.3, 3 November 2008

@c This file is intended to be included within another document,
@c hence no sectioning command or @node.

@display
Copyright @copyright{} 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
@uref{http://fsf.org/}

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
@end display

@enumerate 0
@item
PREAMBLE

The purpose of this License is to make a manual, textbook, or other
functional and useful document @dfn{free} in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.

This License is a kind of ``copyleft'', which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.

@item
APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The ``Document'', below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as ``you''.  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.

A ``Modified Version'' of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A ``Secondary Section'' is a named appendix or a front-matter section
of the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall
subject (or to related matters) and contains nothing that could fall
directly within that overall subject.  (Thus, if the Document is in
part a textbook of mathematics, a Secondary Section may not explain
any mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The ``Invariant Sections'' are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.

The ``Cover Texts'' are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.

A ``Transparent'' copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not ``Transparent'' is called ``Opaque''.

Examples of suitable formats for Transparent copies include plain
@sc{ascii} without markup, Texinfo input format, La@TeX{} input
format, @acronym{SGML} or @acronym{XML} using a publicly available
@acronym{DTD}, and standard-conforming simple @acronym{HTML},
PostScript or @acronym{PDF} designed for human modification.  Examples
of transparent image formats include @acronym{PNG}, @acronym{XCF} and
@acronym{JPG}.  Opaque formats include proprietary formats that can be
read and edited only by proprietary word processors, @acronym{SGML} or
@acronym{XML} for which the @acronym{DTD} and/or processing tools are
not generally available, and the machine-generated @acronym{HTML},
PostScript or @acronym{PDF} produced by some word processors for
output purposes only.

The ``Title Page'' means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, ``Title Page'' means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

The ``publisher'' means any person or entity that distributes copies
of the Document to the public.

A section ``Entitled XYZ'' means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as ``Acknowledgements'',
``Dedications'', ``Endorsements'', or ``History''.)  To ``Preserve the Title''
of such a section when you modify the Document means that it remains a
section ``Entitled XYZ'' according to this definition.

The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.

@item
VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.

@item
COPYING IN QUANTITY

If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document's license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.

@item
MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

@enumerate A
@item
Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.

@item
List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has fewer than five),
unless they release you from this requirement.

@item
State on the Title page the name of the publisher of the
Modified Version, as the publisher.

@item
Preserve all the copyright notices of the Document.

@item
Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.

@item
Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.

@item
Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document's license notice.

@item
Include an unaltered copy of this License.

@item
Preserve the section Entitled ``History'', Preserve its Title, and add
to it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section Entitled ``History'' in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.

@item
Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the ``History'' section.
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.

@item
For any section Entitled ``Acknowledgements'' or ``Dedications'', Preserve
the Title of the section, and preserve in the section all the
substance and tone of each of the contributor acknowledgements and/or
dedications given therein.

@item
Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.

@item
Delete any section Entitled ``Endorsements''.  Such a section
may not be included in the Modified Version.

@item
Do not retitle any existing section to be Entitled ``Endorsements'' or
to conflict in title with any Invariant Section.

@item
Preserve any Warranty Disclaimers.
@end enumerate

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section Entitled ``Endorsements'', provided it contains
nothing but endorsements of your Modified Version by various
parties---for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.

@item
COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled ``History''
in the various original documents, forming one section Entitled
``History''; likewise combine any sections Entitled ``Acknowledgements'',
and any sections Entitled ``Dedications''.  You must delete all
sections Entitled ``Endorsements.''

@item
COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.

You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.

@item
AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an ``aggregate'' if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation's users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document's Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.

@item
TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.

If a section in the Document is Entitled ``Acknowledgements'',
``Dedications'', or ``History'', the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.

@item
TERMINATION

You may not copy, modify, sublicense, or distribute the Document
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense, or distribute it is void, and
will automatically terminate your rights under this License.

However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, receipt of a copy of some or all of the same material does
not give you any rights to use it.

@item
FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
@uref{http://www.gnu.org/copyleft/}.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License ``or any later version'' applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.  If the Document
specifies that a proxy can decide which future versions of this
License can be used, that proxy's public statement of acceptance of a
version permanently authorizes you to choose that version for the
Document.

@item
RELICENSING

``Massive Multiauthor Collaboration Site'' (or ``MMC Site'') means any
World Wide Web server that publishes copyrightable works and also
provides prominent facilities for anybody to edit those works.  A
public wiki that anybody can edit is an example of such a server.  A
``Massive Multiauthor Collaboration'' (or ``MMC'') contained in the
site means any set of copyrightable works thus published on the MMC
site.

``CC-BY-SA'' means the Creative Commons Attribution-Share Alike 3.0
license published by Creative Commons Corporation, a not-for-profit
corporation with a principal place of business in San Francisco,
California, as well as future copyleft versions of that license
published by that same organization.

``Incorporate'' means to publish or republish a Document, in whole or
in part, as part of another Document.

An MMC is ``eligible for relicensing'' if it is licensed under this
License, and if all works that were first published under this License
somewhere other than this MMC, and subsequently incorporated in whole
or in part into the MMC, (1) had no cover texts or invariant sections,
and (2) were thus incorporated prior to November 1, 2008.

The operator of an MMC Site may republish an MMC contained in the site
under CC-BY-SA on the same site at any time before August 1, 2009,
provided the MMC is eligible for relicensing.

@end enumerate

@page
@heading ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

@smallexample
@group
  Copyright (C)  @var{year}  @var{your name}.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.3
  or any later version published by the Free Software Foundation;
  with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
  Texts.  A copy of the license is included in the section entitled ``GNU
  Free Documentation License''.
@end group
@end smallexample

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the ``with@dots{}Texts.'' line with this:

@smallexample
@group
    with the Invariant Sections being @var{list their titles}, with
    the Front-Cover Texts being @var{list}, and with the Back-Cover Texts
    being @var{list}.
@end group
@end smallexample

If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.


@c page
@node references
@appendix Bibliography and references


@noindent
The @gnu{} coding standards guide.
@xref{Top, The @gnu{} coding standards, The @gnu{} coding standards,
gnu-coding-standards}.


@noindent
The @gnu{} Autoconf documentation.
@xref{Top, @gnu{} Autoconf, @gnu{} Autoconf, autoconf}.


@noindent
The @gnu{} Automake documentation.
@xref{Top, @gnu{} Automake, @gnu{} Automake, automake}.


@noindent
Shared library support for @gnu{}.
@xref{Top, @gnu{} Libtool, @gnu{} Libtool, libtool}.



@c page
@node Concept Index
@appendix An entry for each concept

@printindex cp

@node Function Index
@appendix An entry for each function.

@printindex fn

@node Variable Index
@appendix An entry for each variable.

@printindex vr

@c @node Type Index
@c @appendix An entry for each type.

@c @printindex tp

@contents
@bye

@c end of file
