dnl
dnl Part of: DevelStuff
dnl Contents: more macros for GNU Autoconf
dnl Date: Thu Dec 18, 2003
dnl
dnl Abstract
dnl
dnl     This is a library of GNU Autoconf macros that automate common
dnl     tasks in the configuration of a project.  This library should be
dnl     installed under the "infrastructure" subdirectory of a project's
dnl     source tree, and loaded by putting:
dnl
dnl         m4_include(infrastructure/develstuff.autoconf)
dnl
dnl     in the "aclocal.m4" file.
dnl
dnl Copyright (c) 2003, 2007-2009 Marco Maggi <marcomaggi@gna.org>
dnl
dnl This program is  free software: you can redistribute  it and/or modify
dnl it under the  terms of the GNU General Public  License as published by
dnl the Free Software Foundation, either  version 3 of the License, or (at
dnl your option) any later version.
dnl
dnl This program  is distributed in the  hope that it will  be useful, but
dnl WITHOUT   ANY  WARRANTY;   without  even   the  implied   warranty  of
dnl MERCHANTABILITY  or FITNESS  FOR A  PARTICULAR PURPOSE.   See  the GNU
dnl General Public License for more details.
dnl
dnl You  should have received  a copy  of the  GNU General  Public License
dnl along with this program.  If not, see <http://www.gnu.org/licenses/>.
dnl

dnl page
dnl --------------------------------------------------------------------
dnl Infrastructure setup.
dnl --------------------------------------------------------------------

AC_DEFUN_ONCE([DS_BEGIN],
  [AC_PREREQ(2.63)
   AC_CONFIG_SRCDIR([$1])
   DS_PREAMBLE
   DS_DECLARE_SECTIONS
   DS_OPTIONS
   DS_DIRECTORIES
   DS_PROGRAMS
   DS_PACKAGING])

AC_DEFUN_ONCE([DS_PREAMBLE],
  [AC_SUBST([PKG_ID],[\${PACKAGE_NAME}-\${PACKAGE_VERSION}])
   DS_FIND_INFRASTRUCTURE
   DS_FIND_CONFIGURATION
   AC_REQUIRE_AUX_FILE([develstuff.autoconf])
   AC_REQUIRE_AUX_FILE([develstuff.make])
   AC_CONFIG_MACRO_DIR([${INFRASTRUCTUREDIR}])
   AC_CONFIG_MACRO_DIR([${CONFIGURATIONDIR}])
   AC_CACHE_SAVE])

AC_DEFUN_ONCE([DS_FIND_INFRASTRUCTURE],
  [AC_CACHE_CHECK([infrastructure directory],
     [develstuff_cv_INFRASTRUCTUREDIR],
     [if test -d ${srcdir}/infrastructure ; then
         develstuff_cv_INFRASTRUCTUREDIR=${srcdir}/infrastructure
      elif test -d ${srcdir}/../infrastructure ; then
         develstuff_cv_INFRASTRUCTUREDIR=${srcdir}/../infrastructure
      else
         AC_MSG_ERROR([cannot find infrastructure directory],1)
      fi])
   INFRASTRUCTUREDIR=${develstuff_cv_INFRASTRUCTUREDIR}
   AC_SUBST([INFRASTRUCTUREDIR])
   AC_CONFIG_AUX_DIR([${INFRASTRUCTUREDIR}])])

AC_DEFUN_ONCE([DS_FIND_CONFIGURATION],
  [AC_CACHE_CHECK([configuration directory],
     [develstuff_cv_CONFIGURATIONDIR],
     [if test -d ${srcdir}/configuration ; then
         develstuff_cv_CONFIGURATIONDIR=${srcdir}/configuration
      elif test -d ${srcdir}/../configuration ; then
         develstuff_cv_CONFIGURATIONDIR=${srcdir}/../configuration
      else
         AC_MSG_ERROR([cannot find configuration directory],1)
      fi])
   CONFIGURATIONDIR=${develstuff_cv_CONFIGURATIONDIR}
   AC_SUBST([CONFIGURATIONDIR])])

AC_DEFUN_ONCE([DS_OPTIONS],
  [DS_WITH_OPTION([DS_CONFIG_ABI],[abi],[direct],
     [rules for abi and abu shortcuts],
     [select rules for abi and abu shortcuts])
   DS_WITH_OPTION([DS_CONFIG_COMPRESSOR],[compressor],[bzip],
     [compressor to use to compress archives],
     [compressor to use to compress archives])
   DS_ENABLE_OPTION([DS_CONFIG_USE_SUDO],[use-sudo],[no],
     [whether abi and abu rules will use sudo],
     [enable use of sudo when invoking abi and abu rules])
   DS_ENABLE_OPTION([DS_CONFIG_VERSIONED_LAYOUT],[versioned-layout],[yes],
     [whether installation directories will have package version component],
     [enable installation directories with package version component])
   DS_ENABLE_OPTION([DS_CONFIG_ENABLE_DOC],[doc],[yes],
     [whether documentation files will be installed],
     [enable installation of documentation files])
   DS_ENABLE_OPTION([DS_CONFIG_ENABLE_DOC_INFO],[doc-info],[yes],
     [whether documentation in Info format will be installed],
     [enable installation of Info documentation])
   DS_ENABLE_OPTION([DS_CONFIG_ENABLE_DOC_HTML],[doc-html],[no],
     [whether documentation in HTML format will be installed],
     [enable installation of HTML documentation])
   DS_ENABLE_OPTION([DS_CONFIG_ENABLE_DOC_PDF],[doc-pdf],[no],
     [whether documentation in PDF format will be installed],
     [enable installation of PDF documentation])
   DS_ENABLE_OPTION([DS_CONFIG_ENABLE_DOC_DVI],[doc-dvi],[no],
     [whether documentation in DVI format will be installed],
     [enable installation of DVI documentation])
   DS_ENABLE_OPTION([DS_CONFIG_ENABLE_DOC_PS],[doc-ps],[no],
     [whether documentation in PS format will be installed],
     [enable installation of PS documentation])])

dnl page
dnl --------------------------------------------------------------------
dnl Infrastructure conclusion.
dnl --------------------------------------------------------------------

AC_DEFUN_ONCE([DS_END],
  [DS_SUBST_SECTION_VARIABLES
   DS_COMMON_CONFIG_FILES
   AC_OUTPUT])

AC_DEFUN_ONCE([DS_COMMON_CONFIG_FILES],
  [AC_CONFIG_FILES([meta.d/makefiles/develstuff.make:${INFRASTRUCTUREDIR}/develstuff.make])
   AC_CONFIG_FILES([meta.d/makefiles/project.make:${CONFIGURATIONDIR}/project.make])
   AC_CONFIG_FILES([Makefile])])

AC_DEFUN_ONCE([DS_CONFIG_FILE_INSPECTION_SCRIPT],
  [AC_CONFIG_FILES([meta.d/${PACKAGE_NAME}-config:meta/${PACKAGE_NAME}-config.in])])

AC_DEFUN_ONCE([DS_CONFIG_FILE_PKGCONFIG],
  [AC_CONFIG_FILES([meta.d/${PACKAGE_NAME}.pc:meta/${PACKAGE_NAME}.pc.in])])

AC_DEFUN_ONCE([DS_CONFIG_FILE_SLACKWARE_BIN_DESC],
  [AC_CONFIG_FILES([meta.d/slackware/bin/slack-desc:meta/slackware/bin/slack-desc.in])])

AC_DEFUN_ONCE([DS_CONFIG_FILE_SLACKWARE_DOC_DESC],
  [AC_CONFIG_FILES([meta.d/slackware/doc/slack-desc:meta/slackware/doc/slack-desc.in])])

AC_DEFUN_ONCE([DS_CONFIG_FILE_SLACKWARE_DEV_DESC],
  [AC_CONFIG_FILES([meta.d/slackware/dev/slack-desc:meta/slackware/dev/slack-desc.in])])

AC_DEFUN_ONCE([DS_CONFIG_FILE_SLACKWARE_BIN_DOINST],
  [AC_CONFIG_FILES([meta.d/slackware/bin/doinst.sh:meta/slackware/bin/doinst.sh.in])])

AC_DEFUN_ONCE([DS_CONFIG_FILE_SLACKWARE_DOC_DOINST],
  [AC_CONFIG_FILES([meta.d/slackware/doc/doinst.sh:meta/slackware/doc/doinst.sh.in])])

AC_DEFUN_ONCE([DS_CONFIG_FILE_SLACKWARE_DEV_DOINST],
  [AC_CONFIG_FILES([meta.d/slackware/dev/doinst.sh:meta/slackware/dev/doinst.sh.in])])

dnl page
dnl --------------------------------------------------------------------
dnl Sections handling.
dnl --------------------------------------------------------------------

AC_DEFUN([DS_INCLUDE_SECTION],
  [DS_INCLUDE_$1=yes])

AC_DEFUN([DS_EXCLUDE_SECTION],
  [DS_INCLUDE_$1=no])

AC_DEFUN_ONCE([DS_DEFAULT_SECTIONS_DEV],
  [DS_INCLUDE_SECTION([BIN_RULES])
   DS_INCLUDE_SECTION([DOC_RULES])
   DS_INCLUDE_SECTION([DEV_RULES])
   DS_INCLUDE_SECTION([AUTOCONF_DIRS])
   DS_INCLUDE_SECTION([DEVELSTUFF_DIRS])])

AC_DEFUN_ONCE([DS_DECLARE_SECTIONS],
  [DS_INCLUDE_BIN_RULES=yes
   DS_INCLUDE_DOC_RULES=yes
   DS_INCLUDE_DEV_RULES=no
   DS_INCLUDE_AUTOCONF_DIRS=yes
   DS_INCLUDE_DEVELSTUFF_DIRS=yes
   DS_INCLUDE_C_LANGUAGE=no
   DS_INCLUDE_CXX_LANGUAGE=no
   DS_INCLUDE_GENERIC_DOCUMENTATION=yes
   DS_INCLUDE_TEXINFO_DOCUMENTATION=yes
   DS_INCLUDE_META_SCRIPTS=yes
   DS_INCLUDE_PKGCONFIG=yes
   DS_INCLUDE_AUTOCONF=yes
   DS_INCLUDE_CONFIG_INSPECTION_SCRIPT=yes
   DS_INCLUDE_SOURCE_DISTRIBUTION=yes
   DS_INCLUDE_BINARY_DISTRIBUTION=yes
   DS_INCLUDE_SLACKWARE_DISTRIBUTION=yes
   DS_INCLUDE_UNINSTALL_SCRIPTS=yes])

AC_DEFUN_ONCE([DS_SUBST_SECTION_VARIABLES],
  [AC_SUBST([DS_INCLUDE_BIN_RULES])
   AC_SUBST([DS_INCLUDE_DOC_RULES])
   AC_SUBST([DS_INCLUDE_DEV_RULES])
   AC_SUBST([DS_INCLUDE_AUTOCONF_DIRS])
   AC_SUBST([DS_INCLUDE_DEVELSTUFF_DIRS])
   AC_SUBST([DS_INCLUDE_C_LANGUAGE])
   AC_SUBST([DS_INCLUDE_CXX_LANGUAGE])
   AC_SUBST([DS_INCLUDE_GENERIC_DOCUMENTATION])
   AC_SUBST([DS_INCLUDE_TEXINFO_DOCUMENTATION])
   AC_SUBST([DS_INCLUDE_META_SCRIPTS])
   AC_SUBST([DS_INCLUDE_PKGCONFIG])
   AC_SUBST([DS_INCLUDE_AUTOCONF])
   AC_SUBST([DS_INCLUDE_CONFIG_INSPECTION_SCRIPT])
   AC_SUBST([DS_INCLUDE_SOURCE_DISTRIBUTION])
   AC_SUBST([DS_INCLUDE_BINARY_DISTRIBUTION])
   AC_SUBST([DS_INCLUDE_SLACKWARE_DISTRIBUTION])
   AC_SUBST([DS_INCLUDE_UNINSTALL_SCRIPTS])])

dnl page
dnl ------------------------------------------------------------
dnl General macros.
dnl ------------------------------------------------------------

AC_DEFUN_ONCE([DS_SYSTEM_SETUP],
  [AC_USE_SYSTEM_EXTENSIONS
   AC_CANONICAL_BUILD
   AC_CANONICAL_HOST
   AC_CANONICAL_TARGET
   AC_SYS_INTERPRETER
   AC_SYS_LARGEFILE
   AC_SYS_LONG_FILE_NAMES
   AC_SYS_POSIX_TERMIOS
   AC_CACHE_SAVE])

AC_DEFUN_ONCE([DS_COMPILED_STUFF],
  [DS_ENABLE_OPTION([ds_config_ENABLE_SHARED],[shared],[yes],
     [whether shared libraries will be built],
     [enable building shared libraries])
   DS_ENABLE_OPTION([ds_config_ENABLE_STATIC],[static],[no],
     [whether static libraries will be built],
     [enable building static libraries])
   DS_ENABLE_OPTION([ds_config_ENABLE_STRIP],[strip],[yes],
     [whether executables and libraries will be stripped of debug symbols],
     [strip debug symbols from executables and libraries])
   DS_ENABLE_OPTION([ds_config_ENABLE_SHLIB_SYMLINK],[shlib-symlink],[yes],
     [whether symbolic links to shared libraries will be created],
     [create symbolic links to shared libraries])])

AC_DEFUN_ONCE([DS_PROGRAMS],
  [AC_PROG_INSTALL
   AC_PROG_MAKE_SET
   DS_PROGRAM([BASH_PROGRAM],[bash],[the GNU bash shell])
   DS_PROGRAM([BZIP],[bzip2],[the bzip2 compressor program])
   DS_PROGRAM([CAT],[cat],[the GNU cat program])
   DS_PROGRAM([CP],[cp],[copies files])
   DS_PROGRAM([DATE],[date],[a program that prints the current date])
   DS_PROGRAM([GAWK],[gawk],[the GNU awk program])
   DS_PROGRAM([GREP],[grep],[the GNU grep program])
   DS_PROGRAM([GZIP],[gzip],[the gzip compressor program])
   DS_PROGRAM([M4],[m4],[the GNU m4 preprocessor])
   DS_PROGRAM([MAKEINFO],[makeinfo],[builds Info and HTML docs from Texinfo source])
   DS_PROGRAM([MKDIR],[mkdir],[creates directories recursively])
   DS_PROGRAM([MV],[mv],[move files around])
   DS_PROGRAM([RM],[rm],[deletes files and directories recursively])
   DS_PROGRAM([RMDIR],[rmdir],[deletes empty directories])
   DS_PROGRAM([SED],[sed],[the GNU sed program])
   DS_PROGRAM([SUDO],[sudo],[the sudo superuser executor])
   DS_PROGRAM([SYMLINK],[ln],[program used create symbolic links])
   DS_PROGRAM([TAR],[tar],[the GNU tar program])
   DS_PROGRAM([TEXI2PDF],[texi2pdf],[builds PDF docs from Texinfo source])
   DS_PROGRAM([DVIPS],[dvips],[builds PS docs from DVI docs])
   AC_CACHE_SAVE])

dnl Notice that the directories are defined here so that they
dnl are available in scripts like "package-config".
AC_DEFUN_ONCE([DS_DIRECTORIES],
   [AC_SUBST([PKG_DIR],[\${PACKAGE_NAME}/\${PACKAGE_VERSION}])
    AC_SUBST([pkgdatadir],[\${datadir}/\${PKG_DIR}])
    AC_SUBST([pkgdocdir],[\${docdir}/\${PKG_DIR}])
    AC_SUBST([pkgexampledir],[\${pkgdocdir}/examples])
    AC_SUBST([pkginfodir],[\${docdir}/\${PKG_DIR}])
    AC_SUBST([pkghtmldir],[\${htmldir}/\${PKG_DIR}])
    AC_SUBST([pkgpdfdir],[\${pdfdir}/\${PKG_DIR}])
    AC_SUBST([pkgpsdir],[\${psdir}/\${PKG_DIR}])
    AC_SUBST([pkgdvidir],[\${dvidir}/\${PKG_DIR}])
    AC_SUBST([pkgincludedir],[\${includedir}/\${PKG_DIR}])
    AC_SUBST([pkglibdir],[\${libdir}/\${PKG_DIR}])
    AC_SUBST([pkglibexecdir],[\${libexecdir}/\${PKG_DIR}])
    AC_SUBST([pkgsysconfdir],[\${sysconfdir}/\${PKG_DIR}])])

dnl page
dnl --------------------------------------------------------------------
dnl Packaging programs.
dnl --------------------------------------------------------------------

AC_DEFUN_ONCE([DS_PACKAGING],
  [DS_PACKAGING_SLACKWARE])

AC_DEFUN_ONCE([DS_PACKAGING_SLACKWARE],
  [DS_ENABLE_OPTION([DS_CONFIG_SLACKWARE_CHOWN],[slackware-chown],[yes],
     [whether Slackware packages will be created with root as file owner],
     [enable creation of Slackware packages with root as file owner])
  DS_ENABLE_OPTION([DS_CONFIG_SLACKWARE_LINKADD],[slackware-linkadd],[yes],
     [whether symbolic links in Slackware packages will be created by doinst.sh],
     [enable creation of symbolic links in Slackware packages by doinst.sh])
  DS_ENABLE_OPTION([DS_CONFIG_SLACKWARE_USE_PREFIX_TOOLS],
     [slackware-prefix-tools],[no],
     [whether Slackware tools under installation prefix will be used for local packages],
     [use Slackware tools under installation prefix for local packages])
   DS_WITH_SAVED_VARIABLE([PATH],
     [PATH=/sbin:${PATH}
      DS_PROGRAM([ds_slackware_MAKEPKG_PROGRAM],
        [makepkg],[the Slackware package maker])
      DS_PROGRAM([ds_slackware_INSTALLPKG_PROGRAM],
        [installpkg],[the Slackware package installer])
      DS_PROGRAM([ds_slackware_REMOVEPKG_PROGRAM],
        [removepkg],[the Slackware package remover])
      DS_PROGRAM([ds_slackware_UPGRADEPKG_PROGRAM],
        [upgradepkg],[the Slackware package upgrader])])
   DS_WITH_SAVED_VARIABLE([PATH],
     [if test "${DS_CONFIG_SLACKWARE_USE_PREFIX_TOOLS}" = yes ; then
         PATH=${prefix}/sbin:${PATH}
      else
         PATH=/sbin:${PATH}
      fi
      DS_PROGRAM([ds_local_slackware_MAKEPKG_PROGRAM],
        [makepkg],[the Slackware local package maker])
      DS_PROGRAM([ds_local_slackware_INSTALLPKG_PROGRAM],
        [installpkg],[the Slackware local package installer])
      DS_PROGRAM([ds_local_slackware_REMOVEPKG_PROGRAM],
        [removepkg],[the Slackware local package remover])
      DS_PROGRAM([ds_local_slackware_UPGRADEPKG_PROGRAM],
        [upgradepkg],[the Slackware local package upgrader])])])

dnl page
dnl --------------------------------------------------------------------
dnl Compiled programs and libraries.
dnl --------------------------------------------------------------------

AC_DEFUN_ONCE([DS_C89_LANGUAGE_COMMON_SETUP],
  [DS_P_C_LANGUAGE_COMMON_SETUP
   DS_C89_LANGUAGE])

AC_DEFUN_ONCE([DS_C99_LANGUAGE_COMMON_SETUP],
  [DS_P_C_LANGUAGE_COMMON_SETUP
   DS_C99_LANGUAGE])

AC_DEFUN_ONCE([DS_P_C_LANGUAGE_COMMON_SETUP],
  [DS_INCLUDE_SECTION([DEV_RULES])
   DS_INCLUDE_SECTION([C_LANGUAGE])
   DS_COMPILED_STUFF
   DS_SYSTEM_SETUP])

dnl --------------------------------------------------------------------

AC_DEFUN_ONCE([DS_C99_LANGUAGE],
  [DS_PRE_C_LANGUAGE
   AC_PROG_CC_C99
   DS_POST_C_LANGUAGE])

AC_DEFUN_ONCE([DS_C89_LANGUAGE],
  [DS_PRE_C_LANGUAGE
   AC_PROG_CC_C89
   DS_POST_C_LANGUAGE])

AC_DEFUN_ONCE([DS_PRE_C_LANGUAGE],
  [AC_CONFIG_HEADERS([config.h])
   DS_ENABLE_OPTION([ds_config_ENABLE_GCC_WARNING],[gcc-warnings],[yes],
     [whether the compiler is given options for GCC warnings],
     [give GCC warning options to the compiler])
   AC_PROG_CC
   AC_SUBST([USING_GCC],[$GCC])])

AC_DEFUN_ONCE([DS_POST_C_LANGUAGE],
  [AC_PROG_CC_C_O
   AC_SUBST([NO_MINUS_C_MINUS_O])
   AC_PROG_CPP
   AC_PROG_RANLIB
   AC_PATH_PROG([AR],[ar],:)
   AC_PATH_PROG([STRIP], [strip],:)
   AC_PATH_PROG([GDB],[GDB],:)
   AC_HEADER_STDC
   AC_HEADER_ASSERT
   AC_HEADER_TIME
   AC_HEADER_DIRENT
   AC_HEADER_STDBOOL
   AC_HEADER_SYS_WAIT
   AC_CHECK_HEADER([complex.h])
   AC_CHECK_HEADER([dlfcn.h])
   AC_CHECK_HEADER([limits.h])
   AC_CHECK_HEADER([math.h])
   AC_CHECK_HEADER([setjmp.h])
   AC_CHECK_HEADER([stdbool.h])
   AC_CHECK_HEADER([stdint.h])
   AC_CHECK_HEADER([sys/time.h])
   AC_CHECK_HEADER([unistd.h])
   AC_C_BIGENDIAN
   AC_C_CHAR_UNSIGNED
   AC_C_CONST
   AC_C_FLEXIBLE_ARRAY_MEMBER
   AC_C_INLINE
   AC_C_TYPEOF
   AC_C_RESTRICT
   AC_C_STRINGIZE
   AC_C_VARARRAYS
   AC_C_VOLATILE
   AC_CHECK_TYPES([ptrdiff_t])
   AC_TYPE_SIZE_T
   AC_FUNC_MALLOC
   AC_CHECK_FUNCS([memmove memset strerror strchr])
   AC_CHECK_LIB([dl],[dlopen],[LDFLAGS_DL=-ldl])
   AC_SUBST(LDFLAGS_DL)])

dnl --------------------------------------------------------------------

AC_DEFUN_ONCE([DS_CXX_LANGUAGE],
  [AC_PROG_CXX
   AC_PROG_CXX_C_O])

dnl --------------------------------------------------------------------

AC_DEFUN_ONCE([DS_C_LANGUAGE_PTHREADS],
  [DS_ENABLE_OPTION([ds_config_ENABLE_PTHREADS],[pthreads],[no],
     [whether we will link with pthreads],
     [enable linking with the POSIX threads library (default: DISabled)])
   test "$ds_config_ENABLE_PTHREADS" = yes && {
     AC_CHECK_HEADER([pthread.h],,[AC_MSG_ERROR([cannot find pthread.h],1)])
     AC_CHECK_LIB([pthread],[pthread_mutex_lock],,[AC_MSG_ERROR([cannot find pthread.h],1)])
     AC_DEFINE([_REENTRANT],[1],[attempt to turn on reentrant functions])
   }
   AC_CACHE_SAVE])

dnl 1 - VARIABLE_PREFIX
dnl 2 - MAJOR_INTERFACE_VERSION
dnl 3 - MINOR_INTERFACE_VERSION
dnl 4 - LIBRARY_NAME
AC_DEFUN([DS_C_LANGUAGE_LIBRARY],
  [AC_DEFINE([$1_LIBRARY_ID],[$4$2.$3],[the library identifier])
   AC_DEFINE([$1_INTERFACE_VERSION],[$2.$3],[library interface version])
   AC_DEFINE([$1_INTERFACE_MAJOR_VERSION],[$2],[library interface major version])
   AC_DEFINE([$1_INTERFACE_MINOR_VERSION],[$3],[library interface minor version])
   AC_SUBST([$1_INTERFACE_VERSION],[$2.$3])
   AC_SUBST([$1_INTERFACE_MAJOR_VERSION],[$2])
   AC_SUBST([$1_INTERFACE_MINOR_VERSION],[$3])
   AC_SUBST([$1_LIBRARY_ID],[$4$2.$3])
   AC_CONFIG_COMMANDS([$1-clib],
     [mkdir -p "${ac_top_build_prefix}./meta.d/makefiles"
      echo "# Variables for the $1 library.

$1_LIBRARY_ID			?= $4$2.$3
$1_INTERFACE_VERSION		?= $2.$3
$1_INTERFACE_MAJOR_VERSION	?= $2
$1_INTERFACE_MINOR_VERSION	?= $3
$1_SHARED_LIBRARY_ID		?= \$($1_LIBRARY_ID)
$1_SHARED_LIBRARY_LINK_ID	?= $4$2
$1_SHARED_LIBRARY_NAME		?= lib\$($1_SHARED_LIBRARY_ID).so
$1_SHARED_LIBRARY_LINK_NAME	?= lib\$($1_SHARED_LIBRARY_LINK_ID).so
$1_STATIC_LIBRARY_ID		?= \$($1_LIBRARY_ID)
$1_STATIC_LIBRARY_NAME		?= lib\$($1_STATIC_LIBRARY_ID).a

### end of file
" >"${ac_top_build_prefix}./meta.d/makefiles/$1-clib.make"])])

dnl page
dnl --------------------------------------------------------------------
dnl Helpers.
dnl --------------------------------------------------------------------

dnl 1 VARIABLE_SUFFIX
dnl 2 DEFAULT_VALUE
AC_DEFUN([DS_DEFAULT_VALUE],
  [if test -z "$2" ; then
      develstuff_default_$1=
   else
      develstuff_default_$1="$2"
   fi])


dnl 1 OUTPUT_VARIABLE
dnl 2 PROGRAM_NAME
dnl 3 PROGRAM_DESCRIPTION
dnl
dnl AC_DEFUN([DS_PROGRAM],
dnl   [AC_PATH_PROG([$1],[$2],[:])
dnl    AC_ARG_VAR([$1],[$3])])
AC_DEFUN([DS_PROGRAM],
  [AC_PATH_PROG([$1],[$2],[:])])

dnl --------------------------------------------------------------------

dnl 1 OUTPUT_VARIABLE
dnl 2 IDENTIFIER
dnl 3 DEFAULT
dnl 4 CHECKING-DESCRIPTION
dnl 5 OPTION-DESCRIPTION
AC_DEFUN([DS_ENABLE_OPTION],
  [AC_MSG_CHECKING([$4])
   AC_ARG_ENABLE([$2],
     AC_HELP_STRING(--enable-$2,[$5 (default: $3)]),
     [if test "$enableval" = yes ; then $1=yes ; else $1=no ; fi],
     [$1=$3])
   AC_MSG_RESULT([$[]$1])
   AC_SUBST([$1])])

dnl 1 OUTPUT_VARIABLE
dnl 2 IDENTIFIER
dnl 3 DEFAULT
dnl 4 CHECKING-DESCRIPTION
dnl 5 OPTION-DESCRIPTION
AC_DEFUN([DS_WITH_OPTION],
  [AC_MSG_CHECKING([$4])
   AC_ARG_WITH([$2],
     AC_HELP_STRING([--with-$2],[$5 (default: $3)]),
     [if test -n "$withval" ; then $1=$withval ; else $1=$withval ; fi],
     [$1=$3])
   AC_MSG_RESULT([$[]$1])
   AC_SUBST([$1])])

dnl --------------------------------------------------------------------

dnl 1 WITH_TEMP_FILE_CHUNK
dnl 2 AFTER_CHUNK
AC_DEFUN([DS_WITH_TMPFILE],
  [: ${TMPDIR=/tmp}
   {
     ds_private_TMPDIR=$((umask 077 && mktemp -d "$TMPDIR/fooXXXXXX") 2>/dev/null) &&
       test -n "${ds_private_TMPDIR}" && test -d "${ds_private_TMPDIR}"
   } || {
     ds_private_TMPDIR=${TMPDIR}/foo$$-$RANDOM
     (umask 077 && mkdir "${ds_private_TMPDIR}")
   } || exit $?
   ds_TMPFILE=${ds_private_TMPDIR}/temporary.txt
   dnl Chunk with temporary file usage.
   $1
   rm -fr "${ds_private_TMPDIR}"
   dnl Chunk after temporary file usage.
   $2
   ])

dnl --------------------------------------------------------------------

dnl 1 - VARIABLE_TO_SAVE
dnl 2 - CHUNK
AC_DEFUN([DS_WITH_SAVED_VARIABLE],
  [ds_private_$1=${$1}
   $2
   $1=${ds_private_$1}])


dnl end of file
dnl Local Variables:
dnl mode: autoconf
dnl End:
